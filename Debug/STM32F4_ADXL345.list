
STM32F4_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e4c  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c220  0800c220  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800c220  0800c220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c228  0800c228  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c22c  0800c22c  0001c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800c230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001435c  20000084  0800c2b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200143e0  0800c2b4  000243e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011237  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b1  00000000  00000000  000312eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  000339a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001f97a  00000000  00000000  00034248  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a095  00000000  00000000  00053bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c3a4b  00000000  00000000  0005dc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001216a2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000730  00000000  00000000  00121720  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002358  00000000  00000000  00121e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080063bc 	.word	0x080063bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080063bc 	.word	0x080063bc

080001c8 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001c8:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001ca:	2b01      	cmp	r3, #1
	IT       LS
 80001cc:	bf98      	it	ls
	BXLS     lr
 80001ce:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001d4:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e0:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001e6:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001e8:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001ea:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001ec:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001f6:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000200:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000204:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000208:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000212:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000224:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000226:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000228:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
	POP      {r4-r9}
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8000232:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000234:	2b01      	cmp	r3, #1
	IT       LS
 8000236:	bf98      	it	ls
	BXLS     lr
 8000238:	4770      	bxls	lr
	PUSH     {r4-r9}
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800023e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800024a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000268:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800026e:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000272:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000276:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800027a:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 800027c:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 800027e:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c6:	f1a4 0401 	sub.w	r4, r4, #1
 80003ca:	d1e9      	bne.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b972 	b.w	8000efc <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	9e08      	ldr	r6, [sp, #32]
 8000c36:	4604      	mov	r4, r0
 8000c38:	4688      	mov	r8, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d14b      	bne.n	8000cd6 <__udivmoddi4+0xa6>
 8000c3e:	428a      	cmp	r2, r1
 8000c40:	4615      	mov	r5, r2
 8000c42:	d967      	bls.n	8000d14 <__udivmoddi4+0xe4>
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	b14a      	cbz	r2, 8000c5e <__udivmoddi4+0x2e>
 8000c4a:	f1c2 0720 	rsb	r7, r2, #32
 8000c4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c52:	fa20 f707 	lsr.w	r7, r0, r7
 8000c56:	4095      	lsls	r5, r2
 8000c58:	ea47 0803 	orr.w	r8, r7, r3
 8000c5c:	4094      	lsls	r4, r2
 8000c5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c62:	0c23      	lsrs	r3, r4, #16
 8000c64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c68:	fa1f fc85 	uxth.w	ip, r5
 8000c6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c74:	fb07 f10c 	mul.w	r1, r7, ip
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d909      	bls.n	8000c90 <__udivmoddi4+0x60>
 8000c7c:	18eb      	adds	r3, r5, r3
 8000c7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c82:	f080 811b 	bcs.w	8000ebc <__udivmoddi4+0x28c>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 8118 	bls.w	8000ebc <__udivmoddi4+0x28c>
 8000c8c:	3f02      	subs	r7, #2
 8000c8e:	442b      	add	r3, r5
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca4:	45a4      	cmp	ip, r4
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x8c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x290>
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x290>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	442c      	add	r4, r5
 8000cbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc0:	eba4 040c 	sub.w	r4, r4, ip
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	b11e      	cbz	r6, 8000cd0 <__udivmoddi4+0xa0>
 8000cc8:	40d4      	lsrs	r4, r2
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0xbe>
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	f000 80eb 	beq.w	8000eb6 <__udivmoddi4+0x286>
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	4639      	mov	r1, r7
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f783 	clz	r7, r3
 8000cf2:	2f00      	cmp	r7, #0
 8000cf4:	d147      	bne.n	8000d86 <__udivmoddi4+0x156>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xd0>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80fa 	bhi.w	8000ef4 <__udivmoddi4+0x2c4>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0303 	sbc.w	r3, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4698      	mov	r8, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d0e0      	beq.n	8000cd0 <__udivmoddi4+0xa0>
 8000d0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d12:	e7dd      	b.n	8000cd0 <__udivmoddi4+0xa0>
 8000d14:	b902      	cbnz	r2, 8000d18 <__udivmoddi4+0xe8>
 8000d16:	deff      	udf	#255	; 0xff
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	f040 808f 	bne.w	8000e40 <__udivmoddi4+0x210>
 8000d22:	1b49      	subs	r1, r1, r5
 8000d24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d28:	fa1f f885 	uxth.w	r8, r5
 8000d2c:	2701      	movs	r7, #1
 8000d2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d32:	0c23      	lsrs	r3, r4, #16
 8000d34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x124>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x122>
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2bc>
 8000d52:	4684      	mov	ip, r0
 8000d54:	1a59      	subs	r1, r3, r1
 8000d56:	b2a3      	uxth	r3, r4
 8000d58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d64:	fb08 f800 	mul.w	r8, r8, r0
 8000d68:	45a0      	cmp	r8, r4
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x14c>
 8000d6c:	192c      	adds	r4, r5, r4
 8000d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x14a>
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	f200 80b6 	bhi.w	8000ee6 <__udivmoddi4+0x2b6>
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	eba4 0408 	sub.w	r4, r4, r8
 8000d80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d84:	e79f      	b.n	8000cc6 <__udivmoddi4+0x96>
 8000d86:	f1c7 0c20 	rsb	ip, r7, #32
 8000d8a:	40bb      	lsls	r3, r7
 8000d8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d94:	fa01 f407 	lsl.w	r4, r1, r7
 8000d98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da4:	4325      	orrs	r5, r4
 8000da6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000daa:	0c2c      	lsrs	r4, r5, #16
 8000dac:	fb08 3319 	mls	r3, r8, r9, r3
 8000db0:	fa1f fa8e 	uxth.w	sl, lr
 8000db4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db8:	fb09 f40a 	mul.w	r4, r9, sl
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000dc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b0>
 8000dc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd0:	f080 8087 	bcs.w	8000ee2 <__udivmoddi4+0x2b2>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f240 8084 	bls.w	8000ee2 <__udivmoddi4+0x2b2>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4473      	add	r3, lr
 8000de0:	1b1b      	subs	r3, r3, r4
 8000de2:	b2ad      	uxth	r5, r5
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df4:	45a2      	cmp	sl, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1da>
 8000df8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e00:	d26b      	bcs.n	8000eda <__udivmoddi4+0x2aa>
 8000e02:	45a2      	cmp	sl, r4
 8000e04:	d969      	bls.n	8000eda <__udivmoddi4+0x2aa>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4474      	add	r4, lr
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e12:	eba4 040a 	sub.w	r4, r4, sl
 8000e16:	454c      	cmp	r4, r9
 8000e18:	46c2      	mov	sl, r8
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	d354      	bcc.n	8000ec8 <__udivmoddi4+0x298>
 8000e1e:	d051      	beq.n	8000ec4 <__udivmoddi4+0x294>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d069      	beq.n	8000ef8 <__udivmoddi4+0x2c8>
 8000e24:	ebb1 050a 	subs.w	r5, r1, sl
 8000e28:	eb64 0403 	sbc.w	r4, r4, r3
 8000e2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e30:	40fd      	lsrs	r5, r7
 8000e32:	40fc      	lsrs	r4, r7
 8000e34:	ea4c 0505 	orr.w	r5, ip, r5
 8000e38:	e9c6 5400 	strd	r5, r4, [r6]
 8000e3c:	2700      	movs	r7, #0
 8000e3e:	e747      	b.n	8000cd0 <__udivmoddi4+0xa0>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f703 	lsr.w	r7, r0, r3
 8000e48:	4095      	lsls	r5, r2
 8000e4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e56:	4338      	orrs	r0, r7
 8000e58:	0c01      	lsrs	r1, r0, #16
 8000e5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5e:	fa1f f885 	uxth.w	r8, r5
 8000e62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6a:	fb07 f308 	mul.w	r3, r7, r8
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x256>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e7c:	d22f      	bcs.n	8000ede <__udivmoddi4+0x2ae>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d92d      	bls.n	8000ede <__udivmoddi4+0x2ae>
 8000e82:	3f02      	subs	r7, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1acb      	subs	r3, r1, r3
 8000e88:	b281      	uxth	r1, r0
 8000e8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb00 f308 	mul.w	r3, r0, r8
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x27e>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea4:	d217      	bcs.n	8000ed6 <__udivmoddi4+0x2a6>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d915      	bls.n	8000ed6 <__udivmoddi4+0x2a6>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1ac9      	subs	r1, r1, r3
 8000eb0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb4:	e73b      	b.n	8000d2e <__udivmoddi4+0xfe>
 8000eb6:	4637      	mov	r7, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e709      	b.n	8000cd0 <__udivmoddi4+0xa0>
 8000ebc:	4607      	mov	r7, r0
 8000ebe:	e6e7      	b.n	8000c90 <__udivmoddi4+0x60>
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x8c>
 8000ec4:	4541      	cmp	r1, r8
 8000ec6:	d2ab      	bcs.n	8000e20 <__udivmoddi4+0x1f0>
 8000ec8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ecc:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed0:	3801      	subs	r0, #1
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	e7a4      	b.n	8000e20 <__udivmoddi4+0x1f0>
 8000ed6:	4660      	mov	r0, ip
 8000ed8:	e7e9      	b.n	8000eae <__udivmoddi4+0x27e>
 8000eda:	4618      	mov	r0, r3
 8000edc:	e795      	b.n	8000e0a <__udivmoddi4+0x1da>
 8000ede:	4667      	mov	r7, ip
 8000ee0:	e7d1      	b.n	8000e86 <__udivmoddi4+0x256>
 8000ee2:	4681      	mov	r9, r0
 8000ee4:	e77c      	b.n	8000de0 <__udivmoddi4+0x1b0>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	442c      	add	r4, r5
 8000eea:	e747      	b.n	8000d7c <__udivmoddi4+0x14c>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	442b      	add	r3, r5
 8000ef2:	e72f      	b.n	8000d54 <__udivmoddi4+0x124>
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xda>
 8000ef8:	4637      	mov	r7, r6
 8000efa:	e6e9      	b.n	8000cd0 <__udivmoddi4+0xa0>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f0a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8000f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db0a      	blt.n	8000f30 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000f1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f1e:	f005 f947 	bl	80061b0 <sqrtf>
 8000f22:	eef0 7a40 	vmov.f32	s15, s0
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e005      	b.n	8000f3c <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8000f56:	e082      	b.n	800105e <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1d1a      	adds	r2, r3, #4
 8000f5c:	60fa      	str	r2, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1d1a      	adds	r2, r3, #4
 8000f66:	60fa      	str	r2, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000f6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f78:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1d1a      	adds	r2, r3, #4
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f7ff ffb4 	bl	8000f00 <arm_sqrt_f32>

    realIn = *pSrc++;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1d1a      	adds	r2, r3, #4
 8000f9c:	60fa      	str	r2, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1d1a      	adds	r2, r3, #4
 8000fa6:	60fa      	str	r2, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000fac:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb8:	edd7 6a05 	vldr	s13, [r7, #20]
 8000fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1d1a      	adds	r2, r3, #4
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd4:	f7ff ff94 	bl	8000f00 <arm_sqrt_f32>

    realIn = *pSrc++;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	60fa      	str	r2, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1d1a      	adds	r2, r3, #4
 8000fe6:	60fa      	str	r2, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000fec:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ff0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff8:	edd7 6a05 	vldr	s13, [r7, #20]
 8000ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1d1a      	adds	r2, r3, #4
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	4618      	mov	r0, r3
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	f7ff ff74 	bl	8000f00 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1d1a      	adds	r2, r3, #4
 800101c:	60fa      	str	r2, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1d1a      	adds	r2, r3, #4
 8001026:	60fa      	str	r2, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800102c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001030:	edd7 7a06 	vldr	s15, [r7, #24]
 8001034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001038:	edd7 6a05 	vldr	s13, [r7, #20]
 800103c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	4618      	mov	r0, r3
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	f7ff ff54 	bl	8000f00 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	3b01      	subs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f47f af79 	bne.w	8000f58 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 800106e:	e022      	b.n	80010b6 <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1d1a      	adds	r2, r3, #4
 8001074:	60fa      	str	r2, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1d1a      	adds	r2, r3, #4
 800107e:	60fa      	str	r2, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001084:	ed97 7a06 	vldr	s14, [r7, #24]
 8001088:	edd7 7a06 	vldr	s15, [r7, #24]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	edd7 6a05 	vldr	s13, [r7, #20]
 8001094:	edd7 7a05 	vldr	s15, [r7, #20]
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	4618      	mov	r0, r3
 80010a8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ac:	f7ff ff28 	bl	8000f00 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1d9      	bne.n	8001070 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b08b      	sub	sp, #44	; 0x2c
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1d1a      	adds	r2, r3, #4
 80010de:	60fa      	str	r2, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80010ec:	e051      	b.n	8001192 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1d1a      	adds	r2, r3, #4
 80010f2:	60fa      	str	r2, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1d1a      	adds	r2, r3, #4
 80010fc:	60fa      	str	r2, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001102:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001106:	edd7 7a05 	vldr	s15, [r7, #20]
 800110a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	d504      	bpl.n	800111e <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	3301      	adds	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1d1a      	adds	r2, r3, #4
 8001122:	60fa      	str	r2, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8001128:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800112c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d504      	bpl.n	8001144 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	3302      	adds	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1d1a      	adds	r2, r3, #4
 8001148:	60fa      	str	r2, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800114e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d504      	bpl.n	800116a <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	3303      	adds	r3, #3
 8001168:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800116a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800116e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	d504      	bpl.n	8001186 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3304      	adds	r3, #4
 8001184:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	3304      	adds	r3, #4
 800118a:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	3b01      	subs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1aa      	bne.n	80010ee <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3b01      	subs	r3, #1
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80011a2:	e016      	b.n	80011d2 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	60fa      	str	r2, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80011ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d505      	bpl.n	80011cc <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e5      	bne.n	80011a4 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011dc:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	372c      	adds	r7, #44	; 0x2c
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b08b      	sub	sp, #44	; 0x2c
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1d1a      	adds	r2, r3, #4
 800120a:	60fa      	str	r2, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3b01      	subs	r3, #1
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8001218:	e051      	b.n	80012be <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1d1a      	adds	r2, r3, #4
 800121e:	60fa      	str	r2, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1d1a      	adds	r2, r3, #4
 8001228:	60fa      	str	r2, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 800122e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001232:	edd7 7a05 	vldr	s15, [r7, #20]
 8001236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	dd04      	ble.n	800124a <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	60fa      	str	r2, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 8001254:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001258:	edd7 7a04 	vldr	s15, [r7, #16]
 800125c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	dd04      	ble.n	8001270 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	3302      	adds	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1d1a      	adds	r2, r3, #4
 8001274:	60fa      	str	r2, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 800127a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800127e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	dd04      	ble.n	8001296 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	3303      	adds	r3, #3
 8001294:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8001296:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800129a:	edd7 7a04 	vldr	s15, [r7, #16]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd04      	ble.n	80012b2 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	3304      	adds	r3, #4
 80012b0:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	3304      	adds	r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1aa      	bne.n	800121a <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 80012ce:	e016      	b.n	80012fe <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	60fa      	str	r2, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 80012da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012de:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	dd05      	ble.n	80012f8 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e5      	bne.n	80012d0 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001308:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	372c      	adds	r7, #44	; 0x2c
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <arm_sqrt_f32>:
  {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	ed87 0a01 	vstr	s0, [r7, #4]
 8001326:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001328:	edd7 7a01 	vldr	s15, [r7, #4]
 800132c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	db0a      	blt.n	800134c <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8001336:	ed97 0a01 	vldr	s0, [r7, #4]
 800133a:	f004 ff39 	bl	80061b0 <sqrtf>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001348:	2300      	movs	r3, #0
 800134a:	e005      	b.n	8001358 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001378:	e046      	b.n	8001408 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1d1a      	adds	r2, r3, #4
 800137e:	60fa      	str	r2, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001384:	ed97 7a05 	vldr	s14, [r7, #20]
 8001388:	edd7 7a05 	vldr	s15, [r7, #20]
 800138c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001390:	ed97 7a07 	vldr	s14, [r7, #28]
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1d1a      	adds	r2, r3, #4
 80013a0:	60fa      	str	r2, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80013a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80013b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ba:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1d1a      	adds	r2, r3, #4
 80013c2:	60fa      	str	r2, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80013c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1d1a      	adds	r2, r3, #4
 80013e4:	60fa      	str	r2, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80013ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fe:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	3b01      	subs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1b5      	bne.n	800137a <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8001416:	e013      	b.n	8001440 <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1d1a      	adds	r2, r3, #4
 800141c:	60fa      	str	r2, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001422:	ed97 7a05 	vldr	s14, [r7, #20]
 8001426:	edd7 7a05 	vldr	s15, [r7, #20]
 800142a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001436:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	3b01      	subs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e8      	bne.n	8001418 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	ed97 7a07 	vldr	s14, [r7, #28]
 8001454:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	eeb0 0a66 	vmov.f32	s0, s13
 800145e:	f7ff ff5d 	bl	800131c <arm_sqrt_f32>
}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b0a0      	sub	sp, #128	; 0x80
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800147a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 800148e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001490:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8001492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80014a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014a8:	4413      	add	r3, r2
 80014aa:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 80014ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014b2:	e1b6      	b.n	8001822 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 80014cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80014d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80014d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80014de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80014e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80014ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80014f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80014f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80014fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8001502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8001508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 800150e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8001514:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001518:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	1d1a      	adds	r2, r3, #4
 8001520:	603a      	str	r2, [r7, #0]
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 800152a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800152e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	603a      	str	r2, [r7, #0]
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8001540:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001544:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	1d1a      	adds	r2, r3, #4
 800154c:	603a      	str	r2, [r7, #0]
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8001556:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800155a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	1d1a      	adds	r2, r3, #4
 8001562:	603a      	str	r2, [r7, #0]
 8001564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001568:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800156c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001570:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001578:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800157c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001580:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800158c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001590:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800159c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80015a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80015ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80015b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80015c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80015c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015cc:	1d1a      	adds	r2, r3, #4
 80015ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80015d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80015dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80015ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015f8:	1d1a      	adds	r2, r3, #4
 80015fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80015fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001600:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8001604:	ed97 7a02 	vldr	s14, [r7, #8]
 8001608:	edd7 7a06 	vldr	s15, [r7, #24]
 800160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001610:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8001614:	ed97 7a03 	vldr	s14, [r7, #12]
 8001618:	edd7 7a07 	vldr	s15, [r7, #28]
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8001624:	ed97 7a04 	vldr	s14, [r7, #16]
 8001628:	edd7 7a08 	vldr	s15, [r7, #32]
 800162c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001630:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8001634:	ed97 7a05 	vldr	s14, [r7, #20]
 8001638:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8001644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	673a      	str	r2, [r7, #112]	; 0x70
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800164e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001650:	1d1a      	adds	r2, r3, #4
 8001652:	673a      	str	r2, [r7, #112]	; 0x70
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8001658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800165c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001668:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800166c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001674:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001678:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800167c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8001688:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800168c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8001698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800169a:	1d1a      	adds	r2, r3, #4
 800169c:	677a      	str	r2, [r7, #116]	; 0x74
 800169e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80016a2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80016ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016b0:	1d1a      	adds	r2, r3, #4
 80016b2:	677a      	str	r2, [r7, #116]	; 0x74
 80016b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80016c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80016cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80016e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80016ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80016f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001706:	1d1a      	adds	r2, r3, #4
 8001708:	67ba      	str	r2, [r7, #120]	; 0x78
 800170a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800170e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001716:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800171a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800171c:	1d1a      	adds	r2, r3, #4
 800171e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001720:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001724:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8001730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001732:	1d1a      	adds	r2, r3, #4
 8001734:	673a      	str	r2, [r7, #112]	; 0x70
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800173a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800173c:	1d1a      	adds	r2, r3, #4
 800173e:	673a      	str	r2, [r7, #112]	; 0x70
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8001744:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001748:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800174c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001750:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8001754:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001758:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8001764:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001768:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8001774:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001778:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8001784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001786:	1d1a      	adds	r2, r3, #4
 8001788:	677a      	str	r2, [r7, #116]	; 0x74
 800178a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800178e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800179a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	677a      	str	r2, [r7, #116]	; 0x74
 80017a0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ac:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 80017b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80017c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80017d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80017e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80017f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	67ba      	str	r2, [r7, #120]	; 0x78
 80017f6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017fa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001802:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001808:	1d1a      	adds	r2, r3, #4
 800180a:	67ba      	str	r2, [r7, #120]	; 0x78
 800180c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001810:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 800181c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800181e:	3b01      	subs	r3, #1
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001824:	2b00      	cmp	r3, #0
 8001826:	f47f ae45 	bne.w	80014b4 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 800182a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800182c:	b299      	uxth	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001836:	f000 fedb 	bl	80025f0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800183a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800183c:	b299      	uxth	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	2302      	movs	r3, #2
 8001844:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001846:	f000 fed3 	bl	80025f0 <arm_radix8_butterfly_f32>
}
 800184a:	bf00      	nop
 800184c:	3780      	adds	r7, #128	; 0x80
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b0ac      	sub	sp, #176	; 0xb0
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001880:	4413      	add	r3, r2
 8001882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800189a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800189e:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80018a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018a4:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80018a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018aa:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80018ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018b0:	3b04      	subs	r3, #4
 80018b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80018b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ba:	3b04      	subs	r3, #4
 80018bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80018c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c4:	3b04      	subs	r3, #4
 80018c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80018ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80018d4:	4413      	add	r3, r2
 80018d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80018f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001904:	2306      	movs	r3, #6
 8001906:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	ed93 7a00 	vldr	s14, [r3]
 800190e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3304      	adds	r3, #4
 8001938:	ed93 7a00 	vldr	s14, [r3]
 800193c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001940:	3304      	adds	r3, #4
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3304      	adds	r3, #4
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800195a:	3304      	adds	r3, #4
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001964:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800196c:	3304      	adds	r3, #4
 800196e:	ed93 7a00 	vldr	s14, [r3]
 8001972:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001976:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800197e:	3304      	adds	r3, #4
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001988:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800198c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800199c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80019ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80019b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80019cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019d0:	3304      	adds	r3, #4
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80019da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019e2:	3304      	adds	r3, #4
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80019f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f4:	3304      	adds	r3, #4
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80019fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a06:	3304      	adds	r3, #4
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a30:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	1d1a      	adds	r2, r3, #4
 8001a50:	603a      	str	r2, [r7, #0]
 8001a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a56:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a5e:	3304      	adds	r3, #4
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a70:	3304      	adds	r3, #4
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	1d1a      	adds	r2, r3, #4
 8001a7a:	603a      	str	r2, [r7, #0]
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001a84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a88:	1d1a      	adds	r2, r3, #4
 8001a8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a90:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a96:	1d1a      	adds	r2, r3, #4
 8001a98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a9e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa4:	1d1a      	adds	r2, r3, #4
 8001aa6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab2:	1d1a      	adds	r2, r3, #4
 8001ab4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac0:	1d1a      	adds	r2, r3, #4
 8001ac2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ace:	1d1a      	adds	r2, r3, #4
 8001ad0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001aee:	4413      	add	r3, r2
 8001af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001afc:	4413      	add	r3, r2
 8001afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b06:	3b02      	subs	r3, #2
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b0e:	e31a      	b.n	8002146 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b48:	3304      	adds	r3, #4
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b62:	3304      	adds	r3, #4
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b74:	3304      	adds	r3, #4
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b86:	3304      	adds	r3, #4
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001bc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd8:	3304      	adds	r3, #4
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bea:	3304      	adds	r3, #4
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf4:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c0e:	3304      	adds	r3, #4
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c20:	ed93 7a00 	vldr	s14, [r3]
 8001c24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	1d1a      	adds	r2, r3, #4
 8001c58:	603a      	str	r2, [r7, #0]
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c66:	3304      	adds	r3, #4
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c78:	3304      	adds	r3, #4
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	1d1a      	adds	r2, r3, #4
 8001c82:	603a      	str	r2, [r7, #0]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c90:	3b04      	subs	r3, #4
 8001c92:	ed93 7a00 	vldr	s14, [r3]
 8001c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cac:	3b04      	subs	r3, #4
 8001cae:	ed93 7a00 	vldr	s14, [r3]
 8001cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cc8:	ed93 7a00 	vldr	s14, [r3]
 8001ccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cf8:	ed93 7a00 	vldr	s14, [r3]
 8001cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d08:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d2c:	3b04      	subs	r3, #4
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d4c:	3b04      	subs	r3, #4
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d88:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da8:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001dac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001db0:	3b04      	subs	r3, #4
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dec:	1f1a      	subs	r2, r3, #4
 8001dee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e10:	3b04      	subs	r3, #4
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e1a:	1f1a      	subs	r2, r3, #4
 8001e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e24:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e2c:	1d1a      	adds	r2, r3, #4
 8001e2e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001e44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e48:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001e54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001e64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001e74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e78:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e88:	1d1a      	adds	r2, r3, #4
 8001e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e8e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e92:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001ea8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001eac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8001eb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ebc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8001ec8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ecc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8001ed8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001edc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8001ee8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001eec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8001ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001efc:	1f1a      	subs	r2, r3, #4
 8001efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f02:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8001f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f16:	1f1a      	subs	r2, r3, #4
 8001f18:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f1c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f20:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f28:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8001f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8001f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8001f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f44:	4413      	add	r3, r2
 8001f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8001f4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f4e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8001f5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f66:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8001f6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8001f7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f94:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8001fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa8:	1d1a      	adds	r2, r3, #4
 8001faa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8001fbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fc2:	eef1 7a67 	vneg.f32	s15, s15
 8001fc6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8001fd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fd6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8001fe2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fe6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8001ff2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ff6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8002002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002006:	1f1a      	subs	r2, r3, #4
 8002008:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800200c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002010:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 800201c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002020:	1f1a      	subs	r2, r3, #4
 8002022:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002026:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800202a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800202e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002032:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8002036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 800203e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8002046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800204e:	4413      	add	r3, r2
 8002050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8002054:	edd7 7a03 	vldr	s15, [r7, #12]
 8002058:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800205c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002060:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8002064:	edd7 7a04 	vldr	s15, [r7, #16]
 8002068:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800206c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002070:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8002074:	edd7 7a04 	vldr	s15, [r7, #16]
 8002078:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8002084:	edd7 7a03 	vldr	s15, [r7, #12]
 8002088:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800208c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002090:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8002094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002098:	1d1a      	adds	r2, r3, #4
 800209a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800209e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 80020ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80020b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80020bc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c4:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 80020c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 80020d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80020e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80020f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020fc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8002108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800210c:	1f1a      	subs	r2, r3, #4
 800210e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002112:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002116:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8002122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002126:	1f1a      	subs	r2, r3, #4
 8002128:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800212c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002130:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800213c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002140:	3b01      	subs	r3, #1
 8002142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214a:	2b00      	cmp	r3, #0
 800214c:	f47f ace0 	bne.w	8001b10 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	ed93 7a00 	vldr	s14, [r3]
 800216c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002178:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3304      	adds	r3, #4
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002188:	3304      	adds	r3, #4
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3304      	adds	r3, #4
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021a2:	3304      	adds	r3, #4
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80021b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021b4:	3304      	adds	r3, #4
 80021b6:	ed93 7a00 	vldr	s14, [r3]
 80021ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80021be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021c6:	3304      	adds	r3, #4
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80021d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80021e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80021f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002214:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002218:	3304      	adds	r3, #4
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002222:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800222a:	3304      	adds	r3, #4
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002234:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800223c:	3304      	adds	r3, #4
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800224a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800224e:	3304      	adds	r3, #4
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800225c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002260:	ed93 7a00 	vldr	s14, [r3]
 8002264:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800227c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	603a      	str	r2, [r7, #0]
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80022a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022a6:	3304      	adds	r3, #4
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80022b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022b8:	3304      	adds	r3, #4
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	1d1a      	adds	r2, r3, #4
 80022c2:	603a      	str	r2, [r7, #0]
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 80022cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80022d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80022dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80022e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80022ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80022f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80022fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002300:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002308:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800230c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002310:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800231c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002320:	1d1a      	adds	r2, r3, #4
 8002322:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002326:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800232a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8002336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002340:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002344:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234c:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002360:	edd7 7a07 	vldr	s15, [r7, #28]
 8002364:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002370:	edd7 7a08 	vldr	s15, [r7, #32]
 8002374:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002380:	edd7 7a08 	vldr	s15, [r7, #32]
 8002384:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002390:	edd7 7a07 	vldr	s15, [r7, #28]
 8002394:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80023a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a4:	1d1a      	adds	r2, r3, #4
 80023a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80023c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d0:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 80023d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80023dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80023e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80023f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002400:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8002404:	edd7 7a04 	vldr	s15, [r7, #16]
 8002408:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8002414:	edd7 7a03 	vldr	s15, [r7, #12]
 8002418:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800241c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002420:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8002424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002428:	1d1a      	adds	r2, r3, #4
 800242a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800242e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002432:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800243e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002448:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800244c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800245c:	b299      	uxth	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	2304      	movs	r3, #4
 8002464:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002466:	f000 f8c3 	bl	80025f0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800246a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800246e:	b299      	uxth	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	2304      	movs	r3, #4
 8002476:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002478:	f000 f8ba 	bl	80025f0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800247c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002480:	b299      	uxth	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	2304      	movs	r3, #4
 8002488:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800248a:	f000 f8b1 	bl	80025f0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800248e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002492:	b299      	uxth	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	2304      	movs	r3, #4
 800249a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800249c:	f000 f8a8 	bl	80025f0 <arm_radix8_butterfly_f32>
}
 80024a0:	bf00      	nop
 80024a2:	37b0      	adds	r7, #176	; 0xb0
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	4611      	mov	r1, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	460b      	mov	r3, r1
 80024b8:	71fb      	strb	r3, [r7, #7]
 80024ba:	4613      	mov	r3, r2
 80024bc:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d117      	bne.n	80024fa <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3304      	adds	r3, #4
 80024ce:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	e00d      	b.n	80024f2 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	eef1 7a67 	vneg.f32	s15, s15
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3308      	adds	r3, #8
 80024ea:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3ed      	bcc.n	80024d6 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002500:	d024      	beq.n	800254c <arm_cfft_f32+0xa4>
 8002502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002506:	d80b      	bhi.n	8002520 <arm_cfft_f32+0x78>
 8002508:	2b20      	cmp	r3, #32
 800250a:	d01f      	beq.n	800254c <arm_cfft_f32+0xa4>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d802      	bhi.n	8002516 <arm_cfft_f32+0x6e>
 8002510:	2b10      	cmp	r3, #16
 8002512:	d016      	beq.n	8002542 <arm_cfft_f32+0x9a>
 8002514:	e028      	b.n	8002568 <arm_cfft_f32+0xc0>
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d01d      	beq.n	8002556 <arm_cfft_f32+0xae>
 800251a:	2b80      	cmp	r3, #128	; 0x80
 800251c:	d011      	beq.n	8002542 <arm_cfft_f32+0x9a>
 800251e:	e023      	b.n	8002568 <arm_cfft_f32+0xc0>
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002524:	d00d      	beq.n	8002542 <arm_cfft_f32+0x9a>
 8002526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252a:	d803      	bhi.n	8002534 <arm_cfft_f32+0x8c>
 800252c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002530:	d011      	beq.n	8002556 <arm_cfft_f32+0xae>
 8002532:	e019      	b.n	8002568 <arm_cfft_f32+0xc0>
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002538:	d008      	beq.n	800254c <arm_cfft_f32+0xa4>
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d00a      	beq.n	8002556 <arm_cfft_f32+0xae>
 8002540:	e012      	b.n	8002568 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7fe ff90 	bl	800146a <arm_cfft_radix8by2_f32>
        break;
 800254a:	e00d      	b.n	8002568 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff f97f 	bl	8001852 <arm_cfft_radix8by4_f32>
        break;
 8002554:	e008      	b.n	8002568 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	b299      	uxth	r1, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	2301      	movs	r3, #1
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f000 f845 	bl	80025f0 <arm_radix8_butterfly_f32>
        break;
 8002566:	bf00      	nop
    }  

    if( bitReverseFlag )
 8002568:	79bb      	ldrb	r3, [r7, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8999      	ldrh	r1, [r3, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	461a      	mov	r2, r3
 8002578:	68b8      	ldr	r0, [r7, #8]
 800257a:	f7fd fe25 	bl	80001c8 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d130      	bne.n	80025e6 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002596:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e01c      	b.n	80025de <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	61ba      	str	r2, [r7, #24]
 80025aa:	ed93 7a00 	vldr	s14, [r3]
 80025ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	eeb1 7a67 	vneg.f32	s14, s15
 80025c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3304      	adds	r3, #4
 80025d6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3301      	adds	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3de      	bcc.n	80025a4 <arm_cfft_f32+0xfc>
        }
    }
}
 80025e6:	bf00      	nop
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b0bd      	sub	sp, #244	; 0xf4
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	461a      	mov	r2, r3
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
 8002600:	4613      	mov	r3, r2
 8002602:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <arm_radix8_butterfly_f32+0x3c>)
 8002606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8002610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002628:	e002      	b.n	8002630 <arm_radix8_butterfly_f32+0x40>
 800262a:	bf00      	nop
 800262c:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8002630:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002638:	4413      	add	r3, r2
 800263a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800263e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002646:	4413      	add	r3, r2
 8002648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800264c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002654:	4413      	add	r3, r2
 8002656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800265a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	4413      	add	r3, r2
 8002664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002668:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800266c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002670:	4413      	add	r3, r2
 8002672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267e:	4413      	add	r3, r2
 8002680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268c:	4413      	add	r3, r2
 800268e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002692:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	ed93 7a00 	vldr	s14, [r3]
 80026a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80026b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	ed93 7a00 	vldr	s14, [r3]
 80026c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80026da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	ed93 7a00 	vldr	s14, [r3]
 80026e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4413      	add	r3, r2
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80026fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002722:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002742:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002746:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002766:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800276a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800278e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	ed93 7a00 	vldr	s14, [r3]
 800279c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4413      	add	r3, r2
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80027b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80027b6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80027c2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80027c6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80027d2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80027d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80027da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027de:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80027e2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80027e6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 80027f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002800:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800280c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800281a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	3304      	adds	r3, #4
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	ed93 7a00 	vldr	s14, [r3]
 8002836:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	3304      	adds	r3, #4
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800284e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	3304      	adds	r3, #4
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	3304      	adds	r3, #4
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002872:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3304      	adds	r3, #4
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3304      	adds	r3, #4
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800289e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	3304      	adds	r3, #4
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3304      	adds	r3, #4
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80028c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	3304      	adds	r3, #4
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	3304      	adds	r3, #4
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80028ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3304      	adds	r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3304      	adds	r3, #4
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3304      	adds	r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3304      	adds	r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800293e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3304      	adds	r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	ed93 7a00 	vldr	s14, [r3]
 800294e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002962:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002966:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800296a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002976:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800297a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002986:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800298a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800298e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002992:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002996:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800299a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80029a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3304      	adds	r3, #4
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80029b6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80029ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80029c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	3304      	adds	r3, #4
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80029d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80029d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80029de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80029ec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80029f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002a06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	3304      	adds	r3, #4
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002a22:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3304      	adds	r3, #4
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002a3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a46:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002a4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002a4e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a56:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002a62:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002a66:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002a7a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002a7e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a86:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002a92:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002a96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002aaa:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002aae:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002aba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002abe:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002aca:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ace:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002ada:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ade:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002aea:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002aee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002afa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002afe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002b0a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002b0e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002b1a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002b1e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b26:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002b38:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002b44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002b52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b6c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b74:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b86:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3304      	adds	r3, #4
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002ba2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002baa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002bae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002bbe:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002bda:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	3304      	adds	r3, #4
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002bf6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 8002c02:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002c10:	897b      	ldrh	r3, [r7, #10]
 8002c12:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002c16:	429a      	cmp	r2, r3
 8002c18:	f4ff ad0a 	bcc.w	8002630 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	f240 84e3 	bls.w	80035ec <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002c32:	893b      	ldrh	r3, [r7, #8]
 8002c34:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002c38:	4413      	add	r3, r2
 8002c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002c42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c48:	4413      	add	r3, r2
 8002c4a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002c4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c50:	4413      	add	r3, r2
 8002c52:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002c54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c58:	4413      	add	r3, r2
 8002c5a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002c5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c60:	4413      	add	r3, r2
 8002c62:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c68:	4413      	add	r3, r2
 8002c6a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002c6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c70:	4413      	add	r3, r2
 8002c72:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002c74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	3304      	adds	r3, #4
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	3304      	adds	r3, #4
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3304      	adds	r3, #4
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3304      	adds	r3, #4
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8002d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3304      	adds	r3, #4
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8002d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002d36:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3e:	4413      	add	r3, r2
 8002d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002d44:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002d60:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d68:	4413      	add	r3, r2
 8002d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	4413      	add	r3, r2
 8002d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002d7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d84:	4413      	add	r3, r2
 8002d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002d8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	4413      	add	r3, r2
 8002d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002d98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4413      	add	r3, r2
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	ed93 7a00 	vldr	s14, [r3]
 8002dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ddc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002de0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	ed93 7a00 	vldr	s14, [r3]
 8002dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e00:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e24:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002e28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	ed93 7a00 	vldr	s14, [r3]
 8002e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002e4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	ed93 7a00 	vldr	s14, [r3]
 8002e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	ed93 7a00 	vldr	s14, [r3]
 8002e7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002eb8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ebc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002ec8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ecc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002ed8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002edc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002ee8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002eec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002ef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002f06:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002f12:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002f16:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	3304      	adds	r3, #4
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	ed93 7a00 	vldr	s14, [r3]
 8002f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	3304      	adds	r3, #4
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002f4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	3304      	adds	r3, #4
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	ed93 7a00 	vldr	s14, [r3]
 8002f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	3304      	adds	r3, #4
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	3304      	adds	r3, #4
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	ed93 7a00 	vldr	s14, [r3]
 8002f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	3304      	adds	r3, #4
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	ed93 7a00 	vldr	s14, [r3]
 8002faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002fc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	3304      	adds	r3, #4
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3304      	adds	r3, #4
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002fea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	ed93 7a00 	vldr	s14, [r3]
 8002ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3304      	adds	r3, #4
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003012:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3304      	adds	r3, #4
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3304      	adds	r3, #4
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003036:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800303a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3304      	adds	r3, #4
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	ed93 7a00 	vldr	s14, [r3]
 800304a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	3304      	adds	r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8003062:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003066:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8003072:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003076:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800307a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8003082:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003086:	edd7 7a08 	vldr	s15, [r7, #32]
 800308a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8003092:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003096:	edd7 7a08 	vldr	s15, [r7, #32]
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80030a2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80030a6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80030b2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80030b6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80030c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3304      	adds	r3, #4
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80030d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030da:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80030de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80030e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80030ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80030f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80030f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80030fe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003102:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800310e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003112:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800311e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003122:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800312e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003132:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800313e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003142:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800314e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	ed97 7a07 	vldr	s14, [r7, #28]
 800315c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	3304      	adds	r3, #4
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	ed97 7a05 	vldr	s14, [r7, #20]
 8003178:	edd7 7a04 	vldr	s15, [r7, #16]
 800317c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003180:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8003184:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003188:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800318c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003190:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8003194:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800319c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80031a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80031a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80031ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80031b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80031b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80031bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80031c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80031d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031da:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80031de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	3304      	adds	r3, #4
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80031f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80031fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80031fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800320a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800320e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800321a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800321e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800322a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800322e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800323a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	ed97 7a07 	vldr	s14, [r7, #28]
 8003248:	edd7 7a06 	vldr	s15, [r7, #24]
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	3304      	adds	r3, #4
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	ed97 7a05 	vldr	s14, [r7, #20]
 8003264:	edd7 7a04 	vldr	s15, [r7, #16]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003270:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003274:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800327c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003284:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003288:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800328c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003294:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80032a0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80032a4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80032a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ac:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80032b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80032b8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80032bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80032c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80032c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032cc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80032d0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80032d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80032d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032dc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80032e0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80032e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80032f0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80032f4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80032f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003300:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003304:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8003310:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003314:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003320:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8003330:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003334:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003340:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003344:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003350:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003354:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003360:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003364:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003370:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003374:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003380:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003384:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003390:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003394:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800339c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80033a0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80033a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80033a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ac:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80033b0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033b4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80033c0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033c4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80033d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80033d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80033d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033dc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80033e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80033e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ec:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80033f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80033f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003400:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003404:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	ed97 7a07 	vldr	s14, [r7, #28]
 800341e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800342a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3304      	adds	r3, #4
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	ed97 7a05 	vldr	s14, [r7, #20]
 800343a:	edd7 7a04 	vldr	s15, [r7, #16]
 800343e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003442:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003446:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800344a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800344e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003452:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003456:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800345a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003466:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800346a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003476:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800347a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003486:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	ed97 7a07 	vldr	s14, [r7, #28]
 8003494:	edd7 7a06 	vldr	s15, [r7, #24]
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80034a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	3304      	adds	r3, #4
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80034bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80034c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80034c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80034cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80034d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80034dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80034e0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80034e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80034ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034f0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80034f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80034fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	ed97 7a07 	vldr	s14, [r7, #28]
 800350a:	edd7 7a06 	vldr	s15, [r7, #24]
 800350e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003512:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	3304      	adds	r3, #4
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	ed97 7a05 	vldr	s14, [r7, #20]
 8003526:	edd7 7a04 	vldr	s15, [r7, #16]
 800352a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8003532:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003536:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003542:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003546:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003552:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003556:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003562:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003566:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003580:	edd7 7a06 	vldr	s15, [r7, #24]
 8003584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003588:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800358c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	3304      	adds	r3, #4
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	ed97 7a05 	vldr	s14, [r7, #20]
 800359c:	edd7 7a04 	vldr	s15, [r7, #16]
 80035a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a4:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 80035a8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80035ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035b0:	4413      	add	r3, r2
 80035b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80035bc:	429a      	cmp	r2, r3
 80035be:	f4ff abba 	bcc.w	8002d36 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 80035c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c6:	3301      	adds	r3, #1
 80035c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 80035cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d4:	429a      	cmp	r2, r3
 80035d6:	f4ff ab2c 	bcc.w	8002c32 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 80035da:	893b      	ldrh	r3, [r7, #8]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	f63f a813 	bhi.w	8002610 <arm_radix8_butterfly_f32+0x20>
}
 80035ea:	e000      	b.n	80035ee <arm_radix8_butterfly_f32+0xffe>
         break;
 80035ec:	bf00      	nop
}
 80035ee:	bf00      	nop
 80035f0:	37f4      	adds	r7, #244	; 0xf4
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	460a      	mov	r2, r1
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	4613      	mov	r3, r2
 800360a:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2b3f      	cmp	r3, #63	; 0x3f
 8003610:	d901      	bls.n	8003616 <writeRegister+0x1a>
		address = 63;
 8003612:	233f      	movs	r3, #63	; 0x3f
 8003614:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361c:	b2db      	uxtb	r3, r3
 800361e:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8003620:	2200      	movs	r2, #0
 8003622:	2110      	movs	r1, #16
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <writeRegister+0x58>)
 8003626:	f001 fba9 	bl	8004d7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 800362a:	1df9      	adds	r1, r7, #7
 800362c:	2364      	movs	r3, #100	; 0x64
 800362e:	2201      	movs	r2, #1
 8003630:	4809      	ldr	r0, [pc, #36]	; (8003658 <writeRegister+0x5c>)
 8003632:	f002 f841 	bl	80056b8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,100);
 8003636:	1db9      	adds	r1, r7, #6
 8003638:	2364      	movs	r3, #100	; 0x64
 800363a:	2201      	movs	r2, #1
 800363c:	4806      	ldr	r0, [pc, #24]	; (8003658 <writeRegister+0x5c>)
 800363e:	f002 f83b 	bl	80056b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8003642:	2201      	movs	r2, #1
 8003644:	2110      	movs	r1, #16
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <writeRegister+0x58>)
 8003648:	f001 fb98 	bl	8004d7c <HAL_GPIO_WritePin>
	

}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40020000 	.word	0x40020000
 8003658:	20014384 	.word	0x20014384

0800365c <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
 8003668:	4613      	mov	r3, r2
 800366a:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2b3f      	cmp	r3, #63	; 0x3f
 8003670:	d901      	bls.n	8003676 <readRegister+0x1a>
		address = 63;
 8003672:	233f      	movs	r3, #63	; 0x3f
 8003674:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 8003676:	79bb      	ldrb	r3, [r7, #6]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d905      	bls.n	8003688 <readRegister+0x2c>
		address |= 0x40;
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003682:	b2db      	uxtb	r3, r3
 8003684:	71fb      	strb	r3, [r7, #7]
 8003686:	e004      	b.n	8003692 <readRegister+0x36>
		else	
		address &= ~(0x40);
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368e:	b2db      	uxtb	r3, r3
 8003690:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003698:	b2db      	uxtb	r3, r3
 800369a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800369c:	2200      	movs	r2, #0
 800369e:	2110      	movs	r1, #16
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <readRegister+0x78>)
 80036a2:	f001 fb6b 	bl	8004d7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 80036a6:	1df9      	adds	r1, r7, #7
 80036a8:	2364      	movs	r3, #100	; 0x64
 80036aa:	2201      	movs	r2, #1
 80036ac:	480a      	ldr	r0, [pc, #40]	; (80036d8 <readRegister+0x7c>)
 80036ae:	f002 f803 	bl	80056b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,100);
 80036b2:	79bb      	ldrb	r3, [r7, #6]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	2364      	movs	r3, #100	; 0x64
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <readRegister+0x7c>)
 80036bc:	f002 f930 	bl	8005920 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80036c0:	2201      	movs	r2, #1
 80036c2:	2110      	movs	r1, #16
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <readRegister+0x78>)
 80036c6:	f001 fb59 	bl	8004d7c <HAL_GPIO_WritePin>
	
	
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40020000 	.word	0x40020000
 80036d8:	20014384 	.word	0x20014384

080036dc <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
void adxlBW(ADXL_InitTypeDef * adxl)
		{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	4619      	mov	r1, r3
 80036ec:	202c      	movs	r0, #44	; 0x2c
 80036ee:	f7ff ff85 	bl	80035fc <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	789b      	ldrb	r3, [r3, #2]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d11a      	bne.n	8003730 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	f043 0310 	orr.w	r3, r3, #16
 8003700:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	78db      	ldrb	r3, [r3, #3]
 8003706:	2b06      	cmp	r3, #6
 8003708:	d807      	bhi.n	800371a <adxlBW+0x3e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	78db      	ldrb	r3, [r3, #3]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d903      	bls.n	800371a <adxlBW+0x3e>
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3307      	adds	r3, #7
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e004      	b.n	8003724 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	78da      	ldrb	r2, [r3, #3]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	4413      	add	r3, r2
 8003722:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	4619      	mov	r1, r3
 8003728:	202c      	movs	r0, #44	; 0x2c
 800372a:	f7ff ff67 	bl	80035fc <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 800372e:	e015      	b.n	800375c <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d807      	bhi.n	8003748 <adxlBW+0x6c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	78db      	ldrb	r3, [r3, #3]
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d903      	bls.n	8003748 <adxlBW+0x6c>
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3306      	adds	r3, #6
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e004      	b.n	8003752 <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	78da      	ldrb	r2, [r3, #3]
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	4413      	add	r3, r2
 8003750:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	4619      	mov	r1, r3
 8003756:	202c      	movs	r0, #44	; 0x2c
 8003758:	f7ff ff50 	bl	80035fc <writeRegister>
		}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	4619      	mov	r1, r3
 8003774:	2031      	movs	r0, #49	; 0x31
 8003776:	f7ff ff41 	bl	80035fc <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	019b      	lsls	r3, r3, #6
 8003780:	b25a      	sxtb	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	015b      	lsls	r3, r3, #5
 8003788:	b25b      	sxtb	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b25a      	sxtb	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	799b      	ldrb	r3, [r3, #6]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	b25b      	sxtb	r3, r3
 8003796:	4313      	orrs	r3, r2
 8003798:	b25a      	sxtb	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	795b      	ldrb	r3, [r3, #5]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	b25b      	sxtb	r3, r3
 80037a2:	4313      	orrs	r3, r2
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	791a      	ldrb	r2, [r3, #4]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	4413      	add	r3, r2
 80037b0:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	4619      	mov	r1, r3
 80037b6:	2031      	movs	r0, #49	; 0x31
 80037b8:	f7ff ff20 	bl	80035fc <writeRegister>
			}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl, uint8_t * id)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	delay_init(16);
 80037ce:	2010      	movs	r0, #16
 80037d0:	f000 fb7a 	bl	8003ec8 <delay_init>
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80037d4:	2201      	movs	r2, #1
 80037d6:	2110      	movs	r1, #16
 80037d8:	4849      	ldr	r0, [pc, #292]	; (8003900 <ADXL_Init+0x13c>)
 80037da:	f001 facf 	bl	8004d7c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	delay_us(10);
 80037de:	200a      	movs	r0, #10
 80037e0:	f000 fb9a 	bl	8003f18 <delay_us>
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID, id,1);
 80037e4:	2201      	movs	r2, #1
 80037e6:	6839      	ldr	r1, [r7, #0]
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7ff ff37 	bl	800365c <readRegister>
	delay_us(10);
 80037ee:	200a      	movs	r0, #10
 80037f0:	f000 fb92 	bl	8003f18 <delay_us>

	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff71 	bl	80036dc <adxlBW>
	adxlFormat(adxl);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffb2 	bl	8003764 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	795b      	ldrb	r3, [r3, #5]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d140      	bne.n	800388a <ADXL_Init+0xc6>
			{
			switch (adxl->Range) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	791b      	ldrb	r3, [r3, #4]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d847      	bhi.n	80038a0 <ADXL_Init+0xdc>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <ADXL_Init+0x54>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003829 	.word	0x08003829
 800381c:	08003841 	.word	0x08003841
 8003820:	08003859 	.word	0x08003859
 8003824:	08003871 	.word	0x08003871
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <ADXL_Init+0x140>)
 800382a:	4a37      	ldr	r2, [pc, #220]	; (8003908 <ADXL_Init+0x144>)
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	4b35      	ldr	r3, [pc, #212]	; (8003904 <ADXL_Init+0x140>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a36      	ldr	r2, [pc, #216]	; (800390c <ADXL_Init+0x148>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b35      	ldr	r3, [pc, #212]	; (800390c <ADXL_Init+0x148>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a35      	ldr	r2, [pc, #212]	; (8003910 <ADXL_Init+0x14c>)
 800383c:	6013      	str	r3, [r2, #0]
								break;
 800383e:	e02f      	b.n	80038a0 <ADXL_Init+0xdc>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8003840:	4b30      	ldr	r3, [pc, #192]	; (8003904 <ADXL_Init+0x140>)
 8003842:	4a34      	ldr	r2, [pc, #208]	; (8003914 <ADXL_Init+0x150>)
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <ADXL_Init+0x140>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a30      	ldr	r2, [pc, #192]	; (800390c <ADXL_Init+0x148>)
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <ADXL_Init+0x148>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <ADXL_Init+0x14c>)
 8003854:	6013      	str	r3, [r2, #0]
								break;
 8003856:	e023      	b.n	80038a0 <ADXL_Init+0xdc>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8003858:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <ADXL_Init+0x140>)
 800385a:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <ADXL_Init+0x154>)
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <ADXL_Init+0x140>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2a      	ldr	r2, [pc, #168]	; (800390c <ADXL_Init+0x148>)
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <ADXL_Init+0x148>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <ADXL_Init+0x14c>)
 800386c:	6013      	str	r3, [r2, #0]
								break;
 800386e:	e017      	b.n	80038a0 <ADXL_Init+0xdc>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <ADXL_Init+0x140>)
 8003872:	4a2a      	ldr	r2, [pc, #168]	; (800391c <ADXL_Init+0x158>)
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <ADXL_Init+0x140>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <ADXL_Init+0x148>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <ADXL_Init+0x148>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a23      	ldr	r2, [pc, #140]	; (8003910 <ADXL_Init+0x14c>)
 8003884:	6013      	str	r3, [r2, #0]
								break;
 8003886:	bf00      	nop
 8003888:	e00a      	b.n	80038a0 <ADXL_Init+0xdc>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <ADXL_Init+0x140>)
 800388c:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <ADXL_Init+0x144>)
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <ADXL_Init+0x140>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <ADXL_Init+0x148>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b1c      	ldr	r3, [pc, #112]	; (800390c <ADXL_Init+0x148>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <ADXL_Init+0x14c>)
 800389e:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80038a0:	f107 030f 	add.w	r3, r7, #15
 80038a4:	2201      	movs	r2, #1
 80038a6:	4619      	mov	r1, r3
 80038a8:	202d      	movs	r0, #45	; 0x2d
 80038aa:	f7ff fed7 	bl	800365c <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	79db      	ldrb	r3, [r3, #7]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <ADXL_Init+0xfe>
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	f043 0310 	orr.w	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e004      	b.n	80038cc <ADXL_Init+0x108>
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	f023 0310 	bic.w	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	73fb      	strb	r3, [r7, #15]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7a1b      	ldrb	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <ADXL_Init+0x11c>
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	f043 0320 	orr.w	r3, r3, #32
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	73fb      	strb	r3, [r7, #15]
 80038de:	e004      	b.n	80038ea <ADXL_Init+0x126>
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	f023 0320 	bic.w	r3, r3, #32
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	73fb      	strb	r3, [r7, #15]
			writeRegister(POWER_CTL,reg);
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	4619      	mov	r1, r3
 80038ee:	202d      	movs	r0, #45	; 0x2d
 80038f0:	f7ff fe84 	bl	80035fc <writeRegister>
			

			//writeRegister(INT_ENABLE, 0x80);

	return ADXL_OK;
 80038f4:	2300      	movs	r3, #0
	
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40020000 	.word	0x40020000
 8003904:	200000a8 	.word	0x200000a8
 8003908:	3b808081 	.word	0x3b808081
 800390c:	200000a4 	.word	0x200000a4
 8003910:	200000a0 	.word	0x200000a0
 8003914:	3c010204 	.word	0x3c010204
 8003918:	3c820821 	.word	0x3c820821
 800391c:	3d042108 	.word	0x3d042108

08003920 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800392a:	f107 030f 	add.w	r3, r7, #15
 800392e:	2201      	movs	r2, #1
 8003930:	4619      	mov	r1, r3
 8003932:	202d      	movs	r0, #45	; 0x2d
 8003934:	f7ff fe92 	bl	800365c <readRegister>
			switch (s) {
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <ADXL_Measure+0x24>
 800393e:	2b01      	cmp	r3, #1
 8003940:	d010      	beq.n	8003964 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8003942:	e01a      	b.n	800397a <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	b2db      	uxtb	r3, r3
 800394c:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	f043 0308 	orr.w	r3, r3, #8
 8003954:	b2db      	uxtb	r3, r3
 8003956:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4619      	mov	r1, r3
 800395c:	202d      	movs	r0, #45	; 0x2d
 800395e:	f7ff fe4d 	bl	80035fc <writeRegister>
				break;
 8003962:	e00a      	b.n	800397a <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	f023 0308 	bic.w	r3, r3, #8
 800396a:	b2db      	uxtb	r3, r3
 800396c:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	4619      	mov	r1, r3
 8003972:	202d      	movs	r0, #45	; 0x2d
 8003974:	f7ff fe42 	bl	80035fc <writeRegister>
				break;				
 8003978:	bf00      	nop
		}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <ADXL_IntProto>:
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/

void ADXL_IntProto(void)
	
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
			uint8_t reg=0;
 8003988:	2300      	movs	r3, #0
 800398a:	71fb      	strb	r3, [r7, #7]
			readRegister(INT_SOURCE,&reg,1);
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	2201      	movs	r2, #1
 8003990:	4619      	mov	r1, r3
 8003992:	2030      	movs	r0, #48	; 0x30
 8003994:	f7ff fe62 	bl	800365c <readRegister>
	
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
	float ans = 0;
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<n; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e016      	b.n	80039ea <Calculate_FreqOverAll+0x4a>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	ed93 7a00 	vldr	s14, [r3]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	edd3 7a00 	vldr	s15, [r3]
 80039d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80039dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i<n; i++)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	3301      	adds	r3, #1
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	dbe4      	blt.n	80039bc <Calculate_FreqOverAll+0x1c>
	}

	ans = sqrt(ParsevalFftPower)/n;
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f7fc fdac 	bl	8000550 <__aeabi_f2d>
 80039f8:	4603      	mov	r3, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	ec44 3b10 	vmov	d0, r3, r4
 8003a00:	f002 fb7c 	bl	80060fc <sqrt>
 8003a04:	ec56 5b10 	vmov	r5, r6, d0
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7fc fd8f 	bl	800052c <__aeabi_i2d>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	460c      	mov	r4, r1
 8003a12:	461a      	mov	r2, r3
 8003a14:	4623      	mov	r3, r4
 8003a16:	4628      	mov	r0, r5
 8003a18:	4631      	mov	r1, r6
 8003a1a:	f7fc ff1b 	bl	8000854 <__aeabi_ddiv>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	4618      	mov	r0, r3
 8003a24:	4621      	mov	r1, r4
 8003a26:	f7fd f89b 	bl	8000b60 <__aeabi_d2f>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	60fb      	str	r3, [r7, #12]
	return ans;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	ee07 3a90 	vmov	s15, r3
}
 8003a34:	eeb0 0a67 	vmov.f32	s0, s15
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a3e <Calculate_All_statisitc>:

void Calculate_All_statisitc(float32_t *statisticDataSet, uint16_t dataLength, Sv *staticInstance)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	460b      	mov	r3, r1
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	817b      	strh	r3, [r7, #10]
	uint32_t maxtestIndex = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
	uint32_t mintestIndex = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]

	arm_max_f32(statisticDataSet, dataLength, &staticInstance->Statistic_max, &maxtestIndex);
 8003a54:	8979      	ldrh	r1, [r7, #10]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7fd fb31 	bl	80010c4 <arm_max_f32>
	arm_min_f32(statisticDataSet, dataLength, &staticInstance->Statistic_min, &mintestIndex);
 8003a62:	8979      	ldrh	r1, [r7, #10]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7fd fbbf 	bl	80011f0 <arm_min_f32>
	arm_rms_f32(statisticDataSet, dataLength, &staticInstance->Statistic_rms);
 8003a72:	8979      	ldrh	r1, [r7, #10]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	330c      	adds	r3, #12
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7fd fc70 	bl	8001360 <arm_rms_f32>
	staticInstance->Statistic_p2p = (staticInstance->Statistic_max - staticInstance->Statistic_min);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	ed93 7a00 	vldr	s14, [r3]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

}
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <Calculate_FFT_RMS>:

void Calculate_FFT_RMS(float32_t * bufferforFFT, float32_t * OutputFFTbuffer, int32_t fftSize, Sv *staticInstance)
{
 8003aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003aa4:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8003aa8:	b08c      	sub	sp, #48	; 0x30
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003ab0:	3c24      	subs	r4, #36	; 0x24
 8003ab2:	6020      	str	r0, [r4, #0]
 8003ab4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003ab8:	3828      	subs	r0, #40	; 0x28
 8003aba:	6001      	str	r1, [r0, #0]
 8003abc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ac0:	392c      	subs	r1, #44	; 0x2c
 8003ac2:	600a      	str	r2, [r1, #0]
 8003ac4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ac8:	3a30      	subs	r2, #48	; 0x30
 8003aca:	6013      	str	r3, [r2, #0]
	float32_t maxValue = 0;
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003ad4:	f102 0214 	add.w	r2, r2, #20
 8003ad8:	6013      	str	r3, [r2, #0]
	float32_t Speeddatabuffer[2048];
	uint32_t testIndex = 0;
 8003ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ade:	3b20      	subs	r3, #32
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
	uint32_t ifftFlag = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003aea:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8003aee:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003af6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8003afa:	6013      	str	r3, [r2, #0]

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, bufferforFFT, ifftFlag, doBitReverse);
 8003afc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003b00:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003b0c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003b18:	3924      	subs	r1, #36	; 0x24
 8003b1a:	6809      	ldr	r1, [r1, #0]
 8003b1c:	4892      	ldr	r0, [pc, #584]	; (8003d68 <Calculate_FFT_RMS+0x2c8>)
 8003b1e:	f7fe fcc3 	bl	80024a8 <arm_cfft_f32>

	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(bufferforFFT, OutputFFTbuffer, fftSize);
 8003b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b26:	3b2c      	subs	r3, #44	; 0x2c
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003b2e:	3928      	subs	r1, #40	; 0x28
 8003b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b34:	3b24      	subs	r3, #36	; 0x24
 8003b36:	6809      	ldr	r1, [r1, #0]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f7fd fa03 	bl	8000f44 <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(OutputFFTbuffer, fftSize, &maxValue, &testIndex);
 8003b3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b42:	3b2c      	subs	r3, #44	; 0x2c
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b4a:	3b20      	subs	r3, #32
 8003b4c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003b50:	f102 0214 	add.w	r2, r2, #20
 8003b54:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003b58:	3828      	subs	r0, #40	; 0x28
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	f7fd fab2 	bl	80010c4 <arm_max_f32>


	for(uint16_t i = 0; i < fftSize; i++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003b66:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003b6a:	8013      	strh	r3, [r2, #0]
 8003b6c:	e021      	b.n	8003bb2 <Calculate_FFT_RMS+0x112>
	{
		Speeddatabuffer[i] = OutputFFTbuffer[i];
 8003b6e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003b72:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b7e:	3b28      	subs	r3, #40	; 0x28
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4413      	add	r3, r2
 8003b84:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003b88:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003b8c:	8811      	ldrh	r1, [r2, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b94:	3b1c      	subs	r3, #28
 8003b96:	0089      	lsls	r1, r1, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < fftSize; i++)
 8003b9c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003ba0:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003bac:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003bb0:	8013      	strh	r3, [r2, #0]
 8003bb2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003bb6:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8003bba:	881a      	ldrh	r2, [r3, #0]
 8003bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc0:	3b2c      	subs	r3, #44	; 0x2c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	dcd2      	bgt.n	8003b6e <Calculate_FFT_RMS+0xce>
	}

	//TODO: remove low frequency noise (DC component)
	OutputFFTbuffer[0] = 0;
 8003bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bcc:	3b28      	subs	r3, #40	; 0x28
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[1] = 0;
 8003bd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bda:	3b28      	subs	r3, #40	; 0x28
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3304      	adds	r3, #4
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[2] = 0;
 8003be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bea:	3b28      	subs	r3, #40	; 0x28
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]

	staticInstance->Statistic_FreqOvall = Calculate_FreqOverAll(OutputFFTbuffer,2048);
 8003bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bfa:	3b28      	subs	r3, #40	; 0x28
 8003bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f7ff fecd 	bl	80039a0 <Calculate_FreqOverAll>
 8003c06:	eef0 7a40 	vmov.f32	s15, s0
 8003c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c0e:	3b30      	subs	r3, #48	; 0x30
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 2048;
 8003c16:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8003c1a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003c1e:	f102 0220 	add.w	r2, r2, #32
 8003c22:	6013      	str	r3, [r2, #0]
	float32_t samplingRate = 3200;
 8003c24:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <Calculate_FFT_RMS+0x2cc>)
 8003c26:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003c2a:	f102 021c 	add.w	r2, r2, #28
 8003c2e:	6013      	str	r3, [r2, #0]
	float32_t frequencyScale = samplingRate/sampleCount;
 8003c30:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c34:	f103 031c 	add.w	r3, r3, #28
 8003c38:	edd3 6a00 	vldr	s13, [r3]
 8003c3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c40:	f103 0320 	add.w	r3, r3, #32
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c50:	f103 0318 	add.w	r3, r3, #24
 8003c54:	edc3 7a00 	vstr	s15, [r3]

	for(uint16_t i = 1; i < fftSize; i++)
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003c5e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8003c62:	8013      	strh	r3, [r2, #0]
 8003c64:	e0f5      	b.n	8003e52 <Calculate_FFT_RMS+0x3b2>
	{
		if(i < fftSize/2)
 8003c66:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c6a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c74:	3b2c      	subs	r3, #44	; 0x2c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0fd9      	lsrs	r1, r3, #31
 8003c7a:	440b      	add	r3, r1
 8003c7c:	105b      	asrs	r3, r3, #1
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	da78      	bge.n	8003d74 <Calculate_FFT_RMS+0x2d4>
		{
			if(i ==0)
 8003c82:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c86:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <Calculate_FFT_RMS+0x21e>
			{
				Speeddatabuffer[i] = Speeddatabuffer[i];
 8003c90:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c94:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003c9e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003ca2:	8819      	ldrh	r1, [r3, #0]
 8003ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ca8:	3b1c      	subs	r3, #28
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cb4:	3b1c      	subs	r3, #28
 8003cb6:	0089      	lsls	r1, r1, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e0be      	b.n	8003e3c <Calculate_FFT_RMS+0x39c>
			}
			else
			{
				Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 8003cbe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003cc2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ccc:	3b1c      	subs	r3, #28
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	edd3 7a00 	vldr	s15, [r3]
 8003cd6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003d70 <Calculate_FFT_RMS+0x2d0>
 8003cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cde:	ee17 0a90 	vmov	r0, s15
 8003ce2:	f7fc fc35 	bl	8000550 <__aeabi_f2d>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	460d      	mov	r5, r1
 8003cea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003cee:	f103 0318 	add.w	r3, r3, #24
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	f7fc fc2c 	bl	8000550 <__aeabi_f2d>
 8003cf8:	a319      	add	r3, pc, #100	; (adr r3, 8003d60 <Calculate_FFT_RMS+0x2c0>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fc7f 	bl	8000600 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4690      	mov	r8, r2
 8003d08:	4699      	mov	r9, r3
 8003d0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003d0e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fc09 	bl	800052c <__aeabi_i2d>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4640      	mov	r0, r8
 8003d20:	4649      	mov	r1, r9
 8003d22:	f7fc fc6d 	bl	8000600 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fd91 	bl	8000854 <__aeabi_ddiv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	461a      	mov	r2, r3
 8003d38:	4623      	mov	r3, r4
 8003d3a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8003d3e:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8003d42:	880c      	ldrh	r4, [r1, #0]
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc ff0a 	bl	8000b60 <__aeabi_d2f>
 8003d4c:	4601      	mov	r1, r0
 8003d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d52:	3b1c      	subs	r3, #28
 8003d54:	00a2      	lsls	r2, r4, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	6019      	str	r1, [r3, #0]
 8003d5a:	e06f      	b.n	8003e3c <Calculate_FFT_RMS+0x39c>
 8003d5c:	f3af 8000 	nop.w
 8003d60:	4d12d84a 	.word	0x4d12d84a
 8003d64:	401921fb 	.word	0x401921fb
 8003d68:	0800c194 	.word	0x0800c194
 8003d6c:	45480000 	.word	0x45480000
 8003d70:	46193c00 	.word	0x46193c00
			}

		}
		else if(i > fftSize/2)
 8003d74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003d78:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d82:	3b2c      	subs	r3, #44	; 0x2c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	0fd9      	lsrs	r1, r3, #31
 8003d88:	440b      	add	r3, r1
 8003d8a:	105b      	asrs	r3, r3, #1
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	dd55      	ble.n	8003e3c <Calculate_FFT_RMS+0x39c>
		{
			Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * abs(fftSize-i));
 8003d90:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003d94:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d9e:	3b1c      	subs	r3, #28
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	edd3 7a00 	vldr	s15, [r3]
 8003da8:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8003d70 <Calculate_FFT_RMS+0x2d0>
 8003dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db0:	ee17 0a90 	vmov	r0, s15
 8003db4:	f7fc fbcc 	bl	8000550 <__aeabi_f2d>
 8003db8:	4604      	mov	r4, r0
 8003dba:	460d      	mov	r5, r1
 8003dbc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003dc0:	f103 0318 	add.w	r3, r3, #24
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	f7fc fbc3 	bl	8000550 <__aeabi_f2d>
 8003dca:	a33d      	add	r3, pc, #244	; (adr r3, 8003ec0 <Calculate_FFT_RMS+0x420>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fc16 	bl	8000600 <__aeabi_dmul>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4690      	mov	r8, r2
 8003dda:	4699      	mov	r9, r3
 8003ddc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003de0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dea:	3b2c      	subs	r3, #44	; 0x2c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfb8      	it	lt
 8003df4:	425b      	neglt	r3, r3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fb98 	bl	800052c <__aeabi_i2d>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc fbfc 	bl	8000600 <__aeabi_dmul>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	f7fc fd20 	bl	8000854 <__aeabi_ddiv>
 8003e14:	4603      	mov	r3, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8003e20:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8003e24:	880c      	ldrh	r4, [r1, #0]
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f7fc fe99 	bl	8000b60 <__aeabi_d2f>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e34:	3b1c      	subs	r3, #28
 8003e36:	00a2      	lsls	r2, r4, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize; i++)
 8003e3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003e40:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003e4c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8003e50:	8013      	strh	r3, [r2, #0]
 8003e52:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003e56:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e60:	3b2c      	subs	r3, #44	; 0x2c
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	f73f aefe 	bgt.w	8003c66 <Calculate_FFT_RMS+0x1c6>
		}

	}

	Speeddatabuffer[0] = 0;
 8003e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e6e:	3b1c      	subs	r3, #28
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[1] = 0;
 8003e76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e7a:	3b1c      	subs	r3, #28
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
	Speeddatabuffer[2] = 0;
 8003e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e86:	3b1c      	subs	r3, #28
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]

	staticInstance->Statistic_SpeedOvall = Calculate_FreqOverAll(Speeddatabuffer,2048);
 8003e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e92:	3b1c      	subs	r3, #28
 8003e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fd81 	bl	80039a0 <Calculate_FreqOverAll>
 8003e9e:	eef0 7a40 	vmov.f32	s15, s0
 8003ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea6:	3b30      	subs	r3, #48	; 0x30
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


}
 8003eae:	bf00      	nop
 8003eb0:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8003eb4:	3730      	adds	r7, #48	; 0x30
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	4d12d84a 	.word	0x4d12d84a
 8003ec4:	401921fb 	.word	0x401921fb

08003ec8 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <delay_init+0x44>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <delay_init+0x44>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <delay_init+0x48>)
 8003ee6:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <delay_init+0x48>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	0152      	lsls	r2, r2, #5
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <delay_init+0x4c>)
 8003efe:	801a      	strh	r2, [r3, #0]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e010 	.word	0xe000e010
 8003f10:	200000ac 	.word	0x200000ac
 8003f14:	200000ae 	.word	0x200000ae

08003f18 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <delay_us+0x5c>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <delay_us+0x60>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	fb03 f301 	mul.w	r3, r3, r1
 8003f2e:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <delay_us+0x60>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <delay_us+0x60>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <delay_us+0x60>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <delay_us+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <delay_us+0x44>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f2      	beq.n	8003f42 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <delay_us+0x60>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <delay_us+0x60>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	200000ac 	.word	0x200000ac
 8003f78:	e000e010 	.word	0xe000e010
 8003f7c:	00000000 	.word	0x00000000

08003f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f86:	f000 fbdb 	bl	8004740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f8a:	f000 f9db 	bl	8004344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f8e:	f000 fa79 	bl	8004484 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003f92:	f000 fa41 	bl	8004418 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  delay_init(168);
 8003f96:	20a8      	movs	r0, #168	; 0xa8
 8003f98:	f7ff ff96 	bl	8003ec8 <delay_init>


  ADXL_InitTypeDef adxl_config;
  adxl_config.Range = RANGE_16G;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	723b      	strb	r3, [r7, #8]
  adxl_config.Resolution = RESOLUTION_FULL;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	727b      	strb	r3, [r7, #9]
  adxl_config.AutoSleep = AUTOSLEEPOFF;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	72fb      	strb	r3, [r7, #11]
  adxl_config.LPMode = LPMODE_LOWPOWER;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	71bb      	strb	r3, [r7, #6]
  adxl_config.Rate = BWRATE_3200;
 8003fac:	230f      	movs	r3, #15
 8003fae:	71fb      	strb	r3, [r7, #7]
  adxl_config.SPIMode = SPIMODE_4WIRE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	713b      	strb	r3, [r7, #4]
  adxl_config.IntMode = INT_ACTIVEHIGH;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	717b      	strb	r3, [r7, #5]

  adxlStatus InitStatus = ADXL_Init(&adxl_config, &ADXLid);
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	49af      	ldr	r1, [pc, #700]	; (8004278 <main+0x2f8>)
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fc01 	bl	80037c4 <ADXL_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
  if(ADXLid == 0xE5)InitStatus = ADXL_OK;
 8003fc6:	4bac      	ldr	r3, [pc, #688]	; (8004278 <main+0x2f8>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2be5      	cmp	r3, #229	; 0xe5
 8003fcc:	d101      	bne.n	8003fd2 <main+0x52>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  if(InitStatus == ADXL_OK)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d100      	bne.n	8003fda <main+0x5a>
  {
	  __NOP();
 8003fd8:	bf00      	nop

  }

  ADXL_Measure(ON);
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f7ff fca0 	bl	8003920 <ADXL_Measure>
  writeRegister(INT_MAP, 0x10);
 8003fe0:	2110      	movs	r1, #16
 8003fe2:	202f      	movs	r0, #47	; 0x2f
 8003fe4:	f7ff fb0a 	bl	80035fc <writeRegister>
  writeRegister(INT_ENABLE, 0x80);
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	202e      	movs	r0, #46	; 0x2e
 8003fec:	f7ff fb06 	bl	80035fc <writeRegister>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ADXL_IntProto();
 8003ff0:	f7ff fcc7 	bl	8003982 <ADXL_IntProto>
    readRegister(DATA0,data,6);
 8003ff4:	2206      	movs	r2, #6
 8003ff6:	49a1      	ldr	r1, [pc, #644]	; (800427c <main+0x2fc>)
 8003ff8:	2032      	movs	r0, #50	; 0x32
 8003ffa:	f7ff fb2f 	bl	800365c <readRegister>
    if(dataReady == true)
 8003ffe:	4ba0      	ldr	r3, [pc, #640]	; (8004280 <main+0x300>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f4      	bne.n	8003ff0 <main+0x70>
    {
    	readRegister(DATA0,data,6);
 8004006:	2206      	movs	r2, #6
 8004008:	499c      	ldr	r1, [pc, #624]	; (800427c <main+0x2fc>)
 800400a:	2032      	movs	r0, #50	; 0x32
 800400c:	f7ff fb26 	bl	800365c <readRegister>
    	Xdata0 = data[0];
 8004010:	4b9a      	ldr	r3, [pc, #616]	; (800427c <main+0x2fc>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b9b      	ldr	r3, [pc, #620]	; (8004284 <main+0x304>)
 8004018:	801a      	strh	r2, [r3, #0]
    	Xdata1 = data[1];
 800401a:	4b98      	ldr	r3, [pc, #608]	; (800427c <main+0x2fc>)
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	b29a      	uxth	r2, r3
 8004020:	4b99      	ldr	r3, [pc, #612]	; (8004288 <main+0x308>)
 8004022:	801a      	strh	r2, [r3, #0]
    	Ydata0 = data[2];
 8004024:	4b95      	ldr	r3, [pc, #596]	; (800427c <main+0x2fc>)
 8004026:	789b      	ldrb	r3, [r3, #2]
 8004028:	b29a      	uxth	r2, r3
 800402a:	4b98      	ldr	r3, [pc, #608]	; (800428c <main+0x30c>)
 800402c:	801a      	strh	r2, [r3, #0]
    	Ydata1 = data[3];
 800402e:	4b93      	ldr	r3, [pc, #588]	; (800427c <main+0x2fc>)
 8004030:	78db      	ldrb	r3, [r3, #3]
 8004032:	b29a      	uxth	r2, r3
 8004034:	4b96      	ldr	r3, [pc, #600]	; (8004290 <main+0x310>)
 8004036:	801a      	strh	r2, [r3, #0]
    	Zdata0 = data[4];
 8004038:	4b90      	ldr	r3, [pc, #576]	; (800427c <main+0x2fc>)
 800403a:	791b      	ldrb	r3, [r3, #4]
 800403c:	b29a      	uxth	r2, r3
 800403e:	4b95      	ldr	r3, [pc, #596]	; (8004294 <main+0x314>)
 8004040:	801a      	strh	r2, [r3, #0]
    	Zdata1 = data[5];
 8004042:	4b8e      	ldr	r3, [pc, #568]	; (800427c <main+0x2fc>)
 8004044:	795b      	ldrb	r3, [r3, #5]
 8004046:	b29a      	uxth	r2, r3
 8004048:	4b93      	ldr	r3, [pc, #588]	; (8004298 <main+0x318>)
 800404a:	801a      	strh	r2, [r3, #0]
    	accX = ((uint8_t)Xdata1<<8)|(uint8_t)Xdata0;
 800404c:	4b8e      	ldr	r3, [pc, #568]	; (8004288 <main+0x308>)
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	b21a      	sxth	r2, r3
 8004056:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <main+0x304>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	b21b      	sxth	r3, r3
 800405e:	4313      	orrs	r3, r2
 8004060:	b21a      	sxth	r2, r3
 8004062:	4b8e      	ldr	r3, [pc, #568]	; (800429c <main+0x31c>)
 8004064:	801a      	strh	r2, [r3, #0]
    	accY = ((uint8_t)Ydata1<<8)|(uint8_t)Ydata0;
 8004066:	4b8a      	ldr	r3, [pc, #552]	; (8004290 <main+0x310>)
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21a      	sxth	r2, r3
 8004070:	4b86      	ldr	r3, [pc, #536]	; (800428c <main+0x30c>)
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	b21b      	sxth	r3, r3
 8004078:	4313      	orrs	r3, r2
 800407a:	b21a      	sxth	r2, r3
 800407c:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <main+0x320>)
 800407e:	801a      	strh	r2, [r3, #0]
    	accZ = ((uint8_t)Zdata1<<8)|(uint8_t)Zdata0;
 8004080:	4b85      	ldr	r3, [pc, #532]	; (8004298 <main+0x318>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	b21a      	sxth	r2, r3
 800408a:	4b82      	ldr	r3, [pc, #520]	; (8004294 <main+0x314>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	b21b      	sxth	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b21a      	sxth	r2, r3
 8004096:	4b83      	ldr	r3, [pc, #524]	; (80042a4 <main+0x324>)
 8004098:	801a      	strh	r2, [r3, #0]

    	//3.9 is scale of LSB(one bit) mg, 1000 is scale to g
    	accXfloat = (float)accX  * 3.9 / 1000;
 800409a:	4b80      	ldr	r3, [pc, #512]	; (800429c <main+0x31c>)
 800409c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a8:	ee17 0a90 	vmov	r0, s15
 80040ac:	f7fc fa50 	bl	8000550 <__aeabi_f2d>
 80040b0:	a36f      	add	r3, pc, #444	; (adr r3, 8004270 <main+0x2f0>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc faa3 	bl	8000600 <__aeabi_dmul>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	4618      	mov	r0, r3
 80040c0:	4621      	mov	r1, r4
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <main+0x328>)
 80040c8:	f7fc fbc4 	bl	8000854 <__aeabi_ddiv>
 80040cc:	4603      	mov	r3, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	4618      	mov	r0, r3
 80040d2:	4621      	mov	r1, r4
 80040d4:	f7fc fd44 	bl	8000b60 <__aeabi_d2f>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <main+0x32c>)
 80040dc:	601a      	str	r2, [r3, #0]
    	accYfloat = (float)accY  * 3.9 / 1000;
 80040de:	4b70      	ldr	r3, [pc, #448]	; (80042a0 <main+0x320>)
 80040e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ec:	ee17 0a90 	vmov	r0, s15
 80040f0:	f7fc fa2e 	bl	8000550 <__aeabi_f2d>
 80040f4:	a35e      	add	r3, pc, #376	; (adr r3, 8004270 <main+0x2f0>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f7fc fa81 	bl	8000600 <__aeabi_dmul>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	4618      	mov	r0, r3
 8004104:	4621      	mov	r1, r4
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <main+0x328>)
 800410c:	f7fc fba2 	bl	8000854 <__aeabi_ddiv>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	4618      	mov	r0, r3
 8004116:	4621      	mov	r1, r4
 8004118:	f7fc fd22 	bl	8000b60 <__aeabi_d2f>
 800411c:	4602      	mov	r2, r0
 800411e:	4b64      	ldr	r3, [pc, #400]	; (80042b0 <main+0x330>)
 8004120:	601a      	str	r2, [r3, #0]
    	accZfloat = (float)accZ  * 3.9 / 1000;
 8004122:	4b60      	ldr	r3, [pc, #384]	; (80042a4 <main+0x324>)
 8004124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004130:	ee17 0a90 	vmov	r0, s15
 8004134:	f7fc fa0c 	bl	8000550 <__aeabi_f2d>
 8004138:	a34d      	add	r3, pc, #308	; (adr r3, 8004270 <main+0x2f0>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc fa5f 	bl	8000600 <__aeabi_dmul>
 8004142:	4603      	mov	r3, r0
 8004144:	460c      	mov	r4, r1
 8004146:	4618      	mov	r0, r3
 8004148:	4621      	mov	r1, r4
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <main+0x328>)
 8004150:	f7fc fb80 	bl	8000854 <__aeabi_ddiv>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	4618      	mov	r0, r3
 800415a:	4621      	mov	r1, r4
 800415c:	f7fc fd00 	bl	8000b60 <__aeabi_d2f>
 8004160:	4602      	mov	r2, r0
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <main+0x334>)
 8004164:	601a      	str	r2, [r3, #0]

    	// move X axis data to buffer
    	XbufferforFFT[sampleIndex * 2] = accXfloat;
 8004166:	4b54      	ldr	r3, [pc, #336]	; (80042b8 <main+0x338>)
 8004168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4a4f      	ldr	r2, [pc, #316]	; (80042ac <main+0x32c>)
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	4952      	ldr	r1, [pc, #328]	; (80042bc <main+0x33c>)
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	601a      	str	r2, [r3, #0]
    	XbufferforFFT[sampleIndex * 2+1] = 0;
 800417a:	4b4f      	ldr	r3, [pc, #316]	; (80042b8 <main+0x338>)
 800417c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	3301      	adds	r3, #1
 8004184:	4a4d      	ldr	r2, [pc, #308]	; (80042bc <main+0x33c>)
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
    	XbufferforTimeSV[sampleIndex] = accXfloat;
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <main+0x338>)
 8004192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004196:	4618      	mov	r0, r3
 8004198:	4b44      	ldr	r3, [pc, #272]	; (80042ac <main+0x32c>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4948      	ldr	r1, [pc, #288]	; (80042c0 <main+0x340>)
 800419e:	0083      	lsls	r3, r0, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	601a      	str	r2, [r3, #0]

    	// move Y axis data to buffer
    	YbufferforFFT[sampleIndex * 2] = accYfloat;
 80041a4:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <main+0x338>)
 80041a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4a40      	ldr	r2, [pc, #256]	; (80042b0 <main+0x330>)
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	4944      	ldr	r1, [pc, #272]	; (80042c4 <main+0x344>)
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	601a      	str	r2, [r3, #0]
    	YbufferforFFT[sampleIndex * 2+1] = 0;
 80041b8:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <main+0x338>)
 80041ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	3301      	adds	r3, #1
 80041c2:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <main+0x344>)
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
    	YbufferforTimeSV[sampleIndex] = accYfloat;
 80041ce:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <main+0x338>)
 80041d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d4:	4618      	mov	r0, r3
 80041d6:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <main+0x330>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	493b      	ldr	r1, [pc, #236]	; (80042c8 <main+0x348>)
 80041dc:	0083      	lsls	r3, r0, #2
 80041de:	440b      	add	r3, r1
 80041e0:	601a      	str	r2, [r3, #0]

    	// move Z axis data to buffer
    	ZbufferforFFT[sampleIndex * 2] = accZfloat;
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <main+0x338>)
 80041e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4a32      	ldr	r2, [pc, #200]	; (80042b4 <main+0x334>)
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	4937      	ldr	r1, [pc, #220]	; (80042cc <main+0x34c>)
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	601a      	str	r2, [r3, #0]
    	ZbufferforFFT[sampleIndex * 2+1] = 0;
 80041f6:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <main+0x338>)
 80041f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	3301      	adds	r3, #1
 8004200:	4a32      	ldr	r2, [pc, #200]	; (80042cc <main+0x34c>)
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
    	ZbufferforTimeSV[sampleIndex] = accZfloat;
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <main+0x338>)
 800420e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004212:	4618      	mov	r0, r3
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <main+0x334>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	492d      	ldr	r1, [pc, #180]	; (80042d0 <main+0x350>)
 800421a:	0083      	lsls	r3, r0, #2
 800421c:	440b      	add	r3, r1
 800421e:	601a      	str	r2, [r3, #0]




		sampleIndex++;
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <main+0x338>)
 8004222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004226:	b29b      	uxth	r3, r3
 8004228:	3301      	adds	r3, #1
 800422a:	b29b      	uxth	r3, r3
 800422c:	b21a      	sxth	r2, r3
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <main+0x338>)
 8004230:	801a      	strh	r2, [r3, #0]
    	if(sampleIndex == dataLength/2)
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <main+0x338>)
 8004234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d16e      	bne.n	800431c <main+0x39c>
		{

    		//Calculate Z axis statistic
    		Calculate_FFT_RMS(ZbufferforFFT, testOutput, fftSize, &Zstatistic_value);
 800423e:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <main+0x354>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <main+0x358>)
 8004244:	4925      	ldr	r1, [pc, #148]	; (80042dc <main+0x35c>)
 8004246:	4821      	ldr	r0, [pc, #132]	; (80042cc <main+0x34c>)
 8004248:	f7ff fc2a 	bl	8003aa0 <Calculate_FFT_RMS>
			Calculate_All_statisitc(ZstatisticDataSet, dataLength/2, &Zstatistic_value);
 800424c:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <main+0x360>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <main+0x358>)
 8004252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fbf1 	bl	8003a3e <Calculate_All_statisitc>

			//Calculate X axis statistic
    		Calculate_FFT_RMS(XbufferforFFT, testOutput, fftSize, &Xstatistic_value);
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <main+0x354>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <main+0x364>)
 8004262:	491e      	ldr	r1, [pc, #120]	; (80042dc <main+0x35c>)
 8004264:	4815      	ldr	r0, [pc, #84]	; (80042bc <main+0x33c>)
 8004266:	f7ff fc1b 	bl	8003aa0 <Calculate_FFT_RMS>
			Calculate_All_statisitc(XstatisticDataSet, dataLength/2, &Xstatistic_value);
 800426a:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <main+0x368>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e03d      	b.n	80042ec <main+0x36c>
 8004270:	33333333 	.word	0x33333333
 8004274:	400f3333 	.word	0x400f3333
 8004278:	200000b0 	.word	0x200000b0
 800427c:	200000d4 	.word	0x200000d4
 8004280:	200000de 	.word	0x200000de
 8004284:	200000b6 	.word	0x200000b6
 8004288:	200000b8 	.word	0x200000b8
 800428c:	200000ba 	.word	0x200000ba
 8004290:	200000bc 	.word	0x200000bc
 8004294:	200000b2 	.word	0x200000b2
 8004298:	200000b4 	.word	0x200000b4
 800429c:	200000be 	.word	0x200000be
 80042a0:	200000c4 	.word	0x200000c4
 80042a4:	200000cc 	.word	0x200000cc
 80042a8:	408f4000 	.word	0x408f4000
 80042ac:	200000c0 	.word	0x200000c0
 80042b0:	200000c8 	.word	0x200000c8
 80042b4:	200000d0 	.word	0x200000d0
 80042b8:	200000da 	.word	0x200000da
 80042bc:	20010384 	.word	0x20010384
 80042c0:	20006380 	.word	0x20006380
 80042c4:	20008380 	.word	0x20008380
 80042c8:	20000380 	.word	0x20000380
 80042cc:	20002380 	.word	0x20002380
 80042d0:	2000e384 	.word	0x2000e384
 80042d4:	20000000 	.word	0x20000000
 80042d8:	200002d8 	.word	0x200002d8
 80042dc:	2000c380 	.word	0x2000c380
 80042e0:	20000004 	.word	0x20000004
 80042e4:	200000e0 	.word	0x200000e0
 80042e8:	20000008 	.word	0x20000008
 80042ec:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <main+0x3a4>)
 80042ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fba3 	bl	8003a3e <Calculate_All_statisitc>

			//Calculate Y axis statistic
    		Calculate_FFT_RMS(YbufferforFFT, testOutput, fftSize, &Ystatistic_value);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <main+0x3a8>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <main+0x3ac>)
 80042fe:	490c      	ldr	r1, [pc, #48]	; (8004330 <main+0x3b0>)
 8004300:	480c      	ldr	r0, [pc, #48]	; (8004334 <main+0x3b4>)
 8004302:	f7ff fbcd 	bl	8003aa0 <Calculate_FFT_RMS>
			Calculate_All_statisitc(YstatisticDataSet, dataLength/2, &Ystatistic_value);
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <main+0x3b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <main+0x3ac>)
 800430c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fb94 	bl	8003a3e <Calculate_All_statisitc>




			//Data transmission by uart
    		sampleIndex = 0;
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <main+0x3bc>)
 8004318:	2200      	movs	r2, #0
 800431a:	801a      	strh	r2, [r3, #0]
		}
    	dataReady = false;
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <main+0x3c0>)
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
    ADXL_IntProto();
 8004322:	e665      	b.n	8003ff0 <main+0x70>
 8004324:	200000e0 	.word	0x200000e0
 8004328:	20000000 	.word	0x20000000
 800432c:	20000188 	.word	0x20000188
 8004330:	2000c380 	.word	0x2000c380
 8004334:	20008380 	.word	0x20008380
 8004338:	2000000c 	.word	0x2000000c
 800433c:	200000da 	.word	0x200000da
 8004340:	200000de 	.word	0x200000de

08004344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b094      	sub	sp, #80	; 0x50
 8004348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800434a:	f107 0320 	add.w	r3, r7, #32
 800434e:	2230      	movs	r2, #48	; 0x30
 8004350:	2100      	movs	r1, #0
 8004352:	4618      	mov	r0, r3
 8004354:	f001 feca 	bl	80060ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <SystemClock_Config+0xcc>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	4a27      	ldr	r2, [pc, #156]	; (8004410 <SystemClock_Config+0xcc>)
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6413      	str	r3, [r2, #64]	; 0x40
 8004378:	4b25      	ldr	r3, [pc, #148]	; (8004410 <SystemClock_Config+0xcc>)
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004384:	2300      	movs	r3, #0
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	4b22      	ldr	r3, [pc, #136]	; (8004414 <SystemClock_Config+0xd0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a21      	ldr	r2, [pc, #132]	; (8004414 <SystemClock_Config+0xd0>)
 800438e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <SystemClock_Config+0xd0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043a0:	2302      	movs	r3, #2
 80043a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043a4:	2301      	movs	r3, #1
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043a8:	2310      	movs	r3, #16
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043ac:	2302      	movs	r3, #2
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80043b4:	2308      	movs	r3, #8
 80043b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80043b8:	23a8      	movs	r3, #168	; 0xa8
 80043ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043bc:	2302      	movs	r3, #2
 80043be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80043c0:	2304      	movs	r3, #4
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043c4:	f107 0320 	add.w	r3, r7, #32
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fd09 	bl	8004de0 <HAL_RCC_OscConfig>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80043d4:	f000 f8c6 	bl	8004564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043d8:	230f      	movs	r3, #15
 80043da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043dc:	2302      	movs	r3, #2
 80043de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80043e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80043e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80043ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	2105      	movs	r1, #5
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 ff62 	bl	80052c0 <HAL_RCC_ClockConfig>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004402:	f000 f8af 	bl	8004564 <Error_Handler>
  }
}
 8004406:	bf00      	nop
 8004408:	3750      	adds	r7, #80	; 0x50
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000

08004418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800441c:	4b17      	ldr	r3, [pc, #92]	; (800447c <MX_SPI1_Init+0x64>)
 800441e:	4a18      	ldr	r2, [pc, #96]	; (8004480 <MX_SPI1_Init+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004422:	4b16      	ldr	r3, [pc, #88]	; (800447c <MX_SPI1_Init+0x64>)
 8004424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800442a:	4b14      	ldr	r3, [pc, #80]	; (800447c <MX_SPI1_Init+0x64>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <MX_SPI1_Init+0x64>)
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <MX_SPI1_Init+0x64>)
 8004438:	2202      	movs	r2, #2
 800443a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <MX_SPI1_Init+0x64>)
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <MX_SPI1_Init+0x64>)
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <MX_SPI1_Init+0x64>)
 800444c:	2220      	movs	r2, #32
 800444e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <MX_SPI1_Init+0x64>)
 8004452:	2200      	movs	r2, #0
 8004454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <MX_SPI1_Init+0x64>)
 8004458:	2200      	movs	r2, #0
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <MX_SPI1_Init+0x64>)
 800445e:	2200      	movs	r2, #0
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <MX_SPI1_Init+0x64>)
 8004464:	220a      	movs	r2, #10
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004468:	4804      	ldr	r0, [pc, #16]	; (800447c <MX_SPI1_Init+0x64>)
 800446a:	f001 f8c1 	bl	80055f0 <HAL_SPI_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004474:	f000 f876 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20014384 	.word	0x20014384
 8004480:	40013000 	.word	0x40013000

08004484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448a:	1d3b      	adds	r3, r7, #4
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <MX_GPIO_Init+0x84>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <MX_GPIO_Init+0x84>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6313      	str	r3, [r2, #48]	; 0x30
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <MX_GPIO_Init+0x84>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80044b4:	2200      	movs	r2, #0
 80044b6:	2118      	movs	r1, #24
 80044b8:	4814      	ldr	r0, [pc, #80]	; (800450c <MX_GPIO_Init+0x88>)
 80044ba:	f000 fc5f 	bl	8004d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044be:	2304      	movs	r3, #4
 80044c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <MX_GPIO_Init+0x8c>)
 80044c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044c6:	2301      	movs	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	480f      	ldr	r0, [pc, #60]	; (800450c <MX_GPIO_Init+0x88>)
 80044d0:	f000 faba 	bl	8004a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80044d4:	2318      	movs	r3, #24
 80044d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d8:	2301      	movs	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4808      	ldr	r0, [pc, #32]	; (800450c <MX_GPIO_Init+0x88>)
 80044ea:	f000 faad 	bl	8004a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	2008      	movs	r0, #8
 80044f4:	f000 fa71 	bl	80049da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80044f8:	2008      	movs	r0, #8
 80044fa:	f000 fa8a 	bl	8004a12 <HAL_NVIC_EnableIRQ>

}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40020000 	.word	0x40020000
 8004510:	10110000 	.word	0x10110000

08004514 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_2)
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d114      	bne.n	800454e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		dataReady = true;
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_GPIO_EXTI_Callback+0x48>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
		sampleCount++;
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <HAL_GPIO_EXTI_Callback+0x4c>)
 800452c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004530:	b29b      	uxth	r3, r3
 8004532:	3301      	adds	r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	b21a      	sxth	r2, r3
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_GPIO_EXTI_Callback+0x4c>)
 800453a:	801a      	strh	r2, [r3, #0]
		if(sampleCount > 2048)
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_GPIO_EXTI_Callback+0x4c>)
 800453e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004546:	dd02      	ble.n	800454e <HAL_GPIO_EXTI_Callback+0x3a>
		{
			sampleCount = 0;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_GPIO_EXTI_Callback+0x4c>)
 800454a:	2200      	movs	r2, #0
 800454c:	801a      	strh	r2, [r3, #0]
		}

	}
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	200000de 	.word	0x200000de
 8004560:	200000dc 	.word	0x200000dc

08004564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_MspInit+0x4c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <HAL_MspInit+0x4c>)
 8004584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004588:	6453      	str	r3, [r2, #68]	; 0x44
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_MspInit+0x4c>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_MspInit+0x4c>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <HAL_MspInit+0x4c>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_MspInit+0x4c>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_SPI_MspInit+0x84>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d12b      	bne.n	800463e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_SPI_MspInit+0x88>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	4a17      	ldr	r2, [pc, #92]	; (800464c <HAL_SPI_MspInit+0x88>)
 80045f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045f4:	6453      	str	r3, [r2, #68]	; 0x44
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_SPI_MspInit+0x88>)
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_SPI_MspInit+0x88>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a10      	ldr	r2, [pc, #64]	; (800464c <HAL_SPI_MspInit+0x88>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HAL_SPI_MspInit+0x88>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800461e:	23e0      	movs	r3, #224	; 0xe0
 8004620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004622:	2302      	movs	r3, #2
 8004624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462a:	2303      	movs	r3, #3
 800462c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800462e:	2305      	movs	r3, #5
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	4619      	mov	r1, r3
 8004638:	4805      	ldr	r0, [pc, #20]	; (8004650 <HAL_SPI_MspInit+0x8c>)
 800463a:	f000 fa05 	bl	8004a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800463e:	bf00      	nop
 8004640:	3728      	adds	r7, #40	; 0x28
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40013000 	.word	0x40013000
 800464c:	40023800 	.word	0x40023800
 8004650:	40020000 	.word	0x40020000

08004654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004666:	e7fe      	b.n	8004666 <HardFault_Handler+0x4>

08004668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800466c:	e7fe      	b.n	800466c <MemManage_Handler+0x4>

0800466e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004672:	e7fe      	b.n	8004672 <BusFault_Handler+0x4>

08004674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004678:	e7fe      	b.n	8004678 <UsageFault_Handler+0x4>

0800467a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046a8:	f000 f89c 	bl	80047e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80046b4:	2004      	movs	r0, #4
 80046b6:	f000 fb7b 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <SystemInit+0x28>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <SystemInit+0x28>)
 80046cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <SystemInit+0x28>)
 80046d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046da:	609a      	str	r2, [r3, #8]
#endif
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <Reset_Handler>:
 80046ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004724 <LoopFillZerobss+0x14>
 80046f0:	2100      	movs	r1, #0
 80046f2:	e003      	b.n	80046fc <LoopCopyDataInit>

080046f4 <CopyDataInit>:
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <LoopFillZerobss+0x18>)
 80046f6:	585b      	ldr	r3, [r3, r1]
 80046f8:	5043      	str	r3, [r0, r1]
 80046fa:	3104      	adds	r1, #4

080046fc <LoopCopyDataInit>:
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <LoopFillZerobss+0x1c>)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <LoopFillZerobss+0x20>)
 8004700:	1842      	adds	r2, r0, r1
 8004702:	429a      	cmp	r2, r3
 8004704:	d3f6      	bcc.n	80046f4 <CopyDataInit>
 8004706:	4a0b      	ldr	r2, [pc, #44]	; (8004734 <LoopFillZerobss+0x24>)
 8004708:	e002      	b.n	8004710 <LoopFillZerobss>

0800470a <FillZerobss>:
 800470a:	2300      	movs	r3, #0
 800470c:	f842 3b04 	str.w	r3, [r2], #4

08004710 <LoopFillZerobss>:
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <LoopFillZerobss+0x28>)
 8004712:	429a      	cmp	r2, r3
 8004714:	d3f9      	bcc.n	800470a <FillZerobss>
 8004716:	f7ff ffd3 	bl	80046c0 <SystemInit>
 800471a:	f001 fcc3 	bl	80060a4 <__libc_init_array>
 800471e:	f7ff fc2f 	bl	8003f80 <main>
 8004722:	4770      	bx	lr
 8004724:	20020000 	.word	0x20020000
 8004728:	0800c230 	.word	0x0800c230
 800472c:	20000000 	.word	0x20000000
 8004730:	20000084 	.word	0x20000084
 8004734:	20000084 	.word	0x20000084
 8004738:	200143e0 	.word	0x200143e0

0800473c <ADC_IRQHandler>:
 800473c:	e7fe      	b.n	800473c <ADC_IRQHandler>
	...

08004740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <HAL_Init+0x40>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <HAL_Init+0x40>)
 800474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_Init+0x40>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <HAL_Init+0x40>)
 8004756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_Init+0x40>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a07      	ldr	r2, [pc, #28]	; (8004780 <HAL_Init+0x40>)
 8004762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004768:	2003      	movs	r0, #3
 800476a:	f000 f92b 	bl	80049c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800476e:	2000      	movs	r0, #0
 8004770:	f000 f808 	bl	8004784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004774:	f7ff fefe 	bl	8004574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023c00 	.word	0x40023c00

08004784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_InitTick+0x54>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_InitTick+0x58>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479a:	fbb3 f3f1 	udiv	r3, r3, r1
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f943 	bl	8004a2e <HAL_SYSTICK_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00e      	b.n	80047d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d80a      	bhi.n	80047ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047b8:	2200      	movs	r2, #0
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	f000 f90b 	bl	80049da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c4:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <HAL_InitTick+0x5c>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000010 	.word	0x20000010
 80047dc:	20000018 	.word	0x20000018
 80047e0:	20000014 	.word	0x20000014

080047e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_IncTick+0x20>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_IncTick+0x24>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4413      	add	r3, r2
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <HAL_IncTick+0x24>)
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000018 	.word	0x20000018
 8004808:	200143dc 	.word	0x200143dc

0800480c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return uwTick;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_GetTick+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	200143dc 	.word	0x200143dc

08004824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800484c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004856:	4a04      	ldr	r2, [pc, #16]	; (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	60d3      	str	r3, [r2, #12]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <__NVIC_GetPriorityGrouping+0x18>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	f003 0307 	and.w	r3, r3, #7
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	db0b      	blt.n	80048b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4907      	ldr	r1, [pc, #28]	; (80048c0 <__NVIC_EnableIRQ+0x38>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2001      	movs	r0, #1
 80048aa:	fa00 f202 	lsl.w	r2, r0, r2
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e100 	.word	0xe000e100

080048c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db0a      	blt.n	80048ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	490c      	ldr	r1, [pc, #48]	; (8004910 <__NVIC_SetPriority+0x4c>)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	0112      	lsls	r2, r2, #4
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	440b      	add	r3, r1
 80048e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048ec:	e00a      	b.n	8004904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4908      	ldr	r1, [pc, #32]	; (8004914 <__NVIC_SetPriority+0x50>)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	3b04      	subs	r3, #4
 80048fc:	0112      	lsls	r2, r2, #4
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	440b      	add	r3, r1
 8004902:	761a      	strb	r2, [r3, #24]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000e100 	.word	0xe000e100
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	; 0x24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f1c3 0307 	rsb	r3, r3, #7
 8004932:	2b04      	cmp	r3, #4
 8004934:	bf28      	it	cs
 8004936:	2304      	movcs	r3, #4
 8004938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3304      	adds	r3, #4
 800493e:	2b06      	cmp	r3, #6
 8004940:	d902      	bls.n	8004948 <NVIC_EncodePriority+0x30>
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3b03      	subs	r3, #3
 8004946:	e000      	b.n	800494a <NVIC_EncodePriority+0x32>
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	f04f 32ff 	mov.w	r2, #4294967295
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43da      	mvns	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	401a      	ands	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004960:	f04f 31ff 	mov.w	r1, #4294967295
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	43d9      	mvns	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004970:	4313      	orrs	r3, r2
         );
}
 8004972:	4618      	mov	r0, r3
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3b01      	subs	r3, #1
 800498c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004990:	d301      	bcc.n	8004996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004992:	2301      	movs	r3, #1
 8004994:	e00f      	b.n	80049b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004996:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <SysTick_Config+0x40>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3b01      	subs	r3, #1
 800499c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800499e:	210f      	movs	r1, #15
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	f7ff ff8e 	bl	80048c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <SysTick_Config+0x40>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <SysTick_Config+0x40>)
 80049b0:	2207      	movs	r2, #7
 80049b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	e000e010 	.word	0xe000e010

080049c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff29 	bl	8004824 <__NVIC_SetPriorityGrouping>
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	4603      	mov	r3, r0
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049ec:	f7ff ff3e 	bl	800486c <__NVIC_GetPriorityGrouping>
 80049f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	6978      	ldr	r0, [r7, #20]
 80049f8:	f7ff ff8e 	bl	8004918 <NVIC_EncodePriority>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ff5d 	bl	80048c4 <__NVIC_SetPriority>
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	4603      	mov	r3, r0
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff31 	bl	8004888 <__NVIC_EnableIRQ>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff ffa2 	bl	8004980 <SysTick_Config>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b089      	sub	sp, #36	; 0x24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e16b      	b.n	8004d3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a64:	2201      	movs	r2, #1
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	f040 815a 	bne.w	8004d36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d00b      	beq.n	8004aa2 <HAL_GPIO_Init+0x5a>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d007      	beq.n	8004aa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a96:	2b11      	cmp	r3, #17
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b12      	cmp	r3, #18
 8004aa0:	d130      	bne.n	8004b04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	2203      	movs	r2, #3
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ad8:	2201      	movs	r2, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 0201 	and.w	r2, r3, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	2203      	movs	r2, #3
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0xfc>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b12      	cmp	r3, #18
 8004b42:	d123      	bne.n	8004b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	08da      	lsrs	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	08da      	lsrs	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3208      	adds	r2, #8
 8004b86:	69b9      	ldr	r1, [r7, #24]
 8004b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	2203      	movs	r2, #3
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 0203 	and.w	r2, r3, #3
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80b4 	beq.w	8004d36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	4b5f      	ldr	r3, [pc, #380]	; (8004d50 <HAL_GPIO_Init+0x308>)
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	4a5e      	ldr	r2, [pc, #376]	; (8004d50 <HAL_GPIO_Init+0x308>)
 8004bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bde:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <HAL_GPIO_Init+0x308>)
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bea:	4a5a      	ldr	r2, [pc, #360]	; (8004d54 <HAL_GPIO_Init+0x30c>)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	089b      	lsrs	r3, r3, #2
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	220f      	movs	r2, #15
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a51      	ldr	r2, [pc, #324]	; (8004d58 <HAL_GPIO_Init+0x310>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02b      	beq.n	8004c6e <HAL_GPIO_Init+0x226>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a50      	ldr	r2, [pc, #320]	; (8004d5c <HAL_GPIO_Init+0x314>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d025      	beq.n	8004c6a <HAL_GPIO_Init+0x222>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a4f      	ldr	r2, [pc, #316]	; (8004d60 <HAL_GPIO_Init+0x318>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01f      	beq.n	8004c66 <HAL_GPIO_Init+0x21e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a4e      	ldr	r2, [pc, #312]	; (8004d64 <HAL_GPIO_Init+0x31c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d019      	beq.n	8004c62 <HAL_GPIO_Init+0x21a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a4d      	ldr	r2, [pc, #308]	; (8004d68 <HAL_GPIO_Init+0x320>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_GPIO_Init+0x216>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a4c      	ldr	r2, [pc, #304]	; (8004d6c <HAL_GPIO_Init+0x324>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00d      	beq.n	8004c5a <HAL_GPIO_Init+0x212>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a4b      	ldr	r2, [pc, #300]	; (8004d70 <HAL_GPIO_Init+0x328>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_Init+0x20e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4a      	ldr	r2, [pc, #296]	; (8004d74 <HAL_GPIO_Init+0x32c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_GPIO_Init+0x20a>
 8004c4e:	2307      	movs	r3, #7
 8004c50:	e00e      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c52:	2308      	movs	r3, #8
 8004c54:	e00c      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c56:	2306      	movs	r3, #6
 8004c58:	e00a      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c5a:	2305      	movs	r3, #5
 8004c5c:	e008      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	e006      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c62:	2303      	movs	r3, #3
 8004c64:	e004      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e002      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <HAL_GPIO_Init+0x228>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	f002 0203 	and.w	r2, r2, #3
 8004c76:	0092      	lsls	r2, r2, #2
 8004c78:	4093      	lsls	r3, r2
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c80:	4934      	ldr	r1, [pc, #208]	; (8004d54 <HAL_GPIO_Init+0x30c>)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	089b      	lsrs	r3, r3, #2
 8004c86:	3302      	adds	r3, #2
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c8e:	4b3a      	ldr	r3, [pc, #232]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cb2:	4a31      	ldr	r2, [pc, #196]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cb8:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cdc:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ce2:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d30:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <HAL_GPIO_Init+0x330>)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	f67f ae90 	bls.w	8004a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d44:	bf00      	nop
 8004d46:	3724      	adds	r7, #36	; 0x24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40013800 	.word	0x40013800
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	40020400 	.word	0x40020400
 8004d60:	40020800 	.word	0x40020800
 8004d64:	40020c00 	.word	0x40020c00
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40021400 	.word	0x40021400
 8004d70:	40021800 	.word	0x40021800
 8004d74:	40021c00 	.word	0x40021c00
 8004d78:	40013c00 	.word	0x40013c00

08004d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	807b      	strh	r3, [r7, #2]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d8c:	787b      	ldrb	r3, [r7, #1]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d98:	e003      	b.n	8004da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d9a:	887b      	ldrh	r3, [r7, #2]
 8004d9c:	041a      	lsls	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	619a      	str	r2, [r3, #24]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d006      	beq.n	8004dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fba0 	bl	8004514 <HAL_GPIO_EXTI_Callback>
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40013c00 	.word	0x40013c00

08004de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e25b      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d075      	beq.n	8004eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dfe:	4ba3      	ldr	r3, [pc, #652]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00c      	beq.n	8004e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4ba0      	ldr	r3, [pc, #640]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d112      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4b9d      	ldr	r3, [pc, #628]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	4b99      	ldr	r3, [pc, #612]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d05b      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d157      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e236      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x74>
 8004e46:	4b91      	ldr	r3, [pc, #580]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x98>
 8004e5e:	4b8b      	ldr	r3, [pc, #556]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a8a      	ldr	r2, [pc, #552]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a87      	ldr	r2, [pc, #540]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e78:	4b84      	ldr	r3, [pc, #528]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a83      	ldr	r2, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b81      	ldr	r3, [pc, #516]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a80      	ldr	r2, [pc, #512]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7ff fcb8 	bl	800480c <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7ff fcb4 	bl	800480c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1fb      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b76      	ldr	r3, [pc, #472]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7ff fca4 	bl	800480c <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7ff fca0 	bl	800480c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1e7      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	4b6c      	ldr	r3, [pc, #432]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef6:	4b65      	ldr	r3, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b62      	ldr	r3, [pc, #392]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1bb      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b56      	ldr	r3, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4952      	ldr	r1, [pc, #328]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	e03a      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f50:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <HAL_RCC_OscConfig+0x2b0>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7ff fc59 	bl	800480c <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7ff fc55 	bl	800480c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e19c      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	4b46      	ldr	r3, [pc, #280]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	4b43      	ldr	r3, [pc, #268]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4940      	ldr	r1, [pc, #256]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_RCC_OscConfig+0x2b0>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7ff fc38 	bl	800480c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa0:	f7ff fc34 	bl	800480c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e17b      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d030      	beq.n	800502c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd2:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_OscConfig+0x2b4>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7ff fc18 	bl	800480c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7ff fc14 	bl	800480c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e15b      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x200>
 8004ffe:	e015      	b.n	800502c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCC_OscConfig+0x2b4>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005006:	f7ff fc01 	bl	800480c <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500e:	f7ff fbfd 	bl	800480c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e144      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80a0 	beq.w	800517a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a0e      	ldr	r2, [pc, #56]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7ff fbc3 	bl	800480c <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	e011      	b.n	80050ae <HAL_RCC_OscConfig+0x2ce>
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	42470000 	.word	0x42470000
 8005094:	42470e80 	.word	0x42470e80
 8005098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7ff fbb6 	bl	800480c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0fd      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b81      	ldr	r3, [pc, #516]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2f0>
 80050c2:	4b7d      	ldr	r3, [pc, #500]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4a7c      	ldr	r2, [pc, #496]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6713      	str	r3, [r2, #112]	; 0x70
 80050ce:	e01c      	b.n	800510a <HAL_RCC_OscConfig+0x32a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x312>
 80050d8:	4b77      	ldr	r3, [pc, #476]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a76      	ldr	r2, [pc, #472]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	4b74      	ldr	r3, [pc, #464]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a73      	ldr	r2, [pc, #460]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	e00b      	b.n	800510a <HAL_RCC_OscConfig+0x32a>
 80050f2:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a70      	ldr	r2, [pc, #448]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	4b6e      	ldr	r3, [pc, #440]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a6d      	ldr	r2, [pc, #436]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7ff fb7b 	bl	800480c <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7ff fb77 	bl	800480c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0bc      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCC_OscConfig+0x33a>
 800513c:	e014      	b.n	8005168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7ff fb65 	bl	800480c <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	e00a      	b.n	800515c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7ff fb61 	bl	800480c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e0a6      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ee      	bne.n	8005146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516e:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	4a51      	ldr	r2, [pc, #324]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8092 	beq.w	80052a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005184:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d05c      	beq.n	800524a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d141      	bne.n	800521c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCC_OscConfig+0x4dc>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7ff fb35 	bl	800480c <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a6:	f7ff fb31 	bl	800480c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e078      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b8:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	019b      	lsls	r3, r3, #6
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	3b01      	subs	r3, #1
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	4933      	ldr	r1, [pc, #204]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ee:	4b33      	ldr	r3, [pc, #204]	; (80052bc <HAL_RCC_OscConfig+0x4dc>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7ff fb0a 	bl	800480c <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fc:	f7ff fb06 	bl	800480c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e04d      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x41c>
 800521a:	e045      	b.n	80052a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCC_OscConfig+0x4dc>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7ff faf3 	bl	800480c <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7ff faef 	bl	800480c <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e036      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x44a>
 8005248:	e02e      	b.n	80052a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e029      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	429a      	cmp	r2, r3
 8005268:	d11c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d115      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800527e:	4013      	ands	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005284:	4293      	cmp	r3, r2
 8005286:	d10d      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d106      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40007000 	.word	0x40007000
 80052b8:	40023800 	.word	0x40023800
 80052bc:	42470060 	.word	0x42470060

080052c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0cc      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d4:	4b68      	ldr	r3, [pc, #416]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d90c      	bls.n	80052fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b65      	ldr	r3, [pc, #404]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b63      	ldr	r3, [pc, #396]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0b8      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005314:	4b59      	ldr	r3, [pc, #356]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a58      	ldr	r2, [pc, #352]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800531e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800532c:	4b53      	ldr	r3, [pc, #332]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a52      	ldr	r2, [pc, #328]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005338:	4b50      	ldr	r3, [pc, #320]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	494d      	ldr	r1, [pc, #308]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d044      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d119      	bne.n	800539e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e07f      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d003      	beq.n	800537e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537a:	2b03      	cmp	r3, #3
 800537c:	d107      	bne.n	800538e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537e:	4b3f      	ldr	r3, [pc, #252]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e06f      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538e:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e067      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539e:	4b37      	ldr	r3, [pc, #220]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f023 0203 	bic.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4934      	ldr	r1, [pc, #208]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b0:	f7ff fa2c 	bl	800480c <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b8:	f7ff fa28 	bl	800480c <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e04f      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 020c 	and.w	r2, r3, #12
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	429a      	cmp	r2, r3
 80053de:	d1eb      	bne.n	80053b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d20c      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b22      	ldr	r3, [pc, #136]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e032      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005414:	4b19      	ldr	r3, [pc, #100]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4916      	ldr	r1, [pc, #88]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005432:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	490e      	ldr	r1, [pc, #56]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005446:	f000 f821 	bl	800548c <HAL_RCC_GetSysClockFreq>
 800544a:	4601      	mov	r1, r0
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	fa21 f303 	lsr.w	r3, r1, r3
 800545e:	4a09      	ldr	r2, [pc, #36]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f98c 	bl	8004784 <HAL_InitTick>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023c00 	.word	0x40023c00
 800547c:	40023800 	.word	0x40023800
 8005480:	0800c1a4 	.word	0x0800c1a4
 8005484:	20000010 	.word	0x20000010
 8005488:	20000014 	.word	0x20000014

0800548c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a2:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d007      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0x32>
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d008      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x38>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 808d 	bne.w	80055d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80054ba:	60bb      	str	r3, [r7, #8]
       break;
 80054bc:	e08c      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054be:	4b4b      	ldr	r3, [pc, #300]	; (80055ec <HAL_RCC_GetSysClockFreq+0x160>)
 80054c0:	60bb      	str	r3, [r7, #8]
      break;
 80054c2:	e089      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c4:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ce:	4b45      	ldr	r3, [pc, #276]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d023      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	ea03 0501 	and.w	r5, r3, r1
 80054f0:	ea04 0602 	and.w	r6, r4, r2
 80054f4:	4a3d      	ldr	r2, [pc, #244]	; (80055ec <HAL_RCC_GetSysClockFreq+0x160>)
 80054f6:	fb02 f106 	mul.w	r1, r2, r6
 80054fa:	2200      	movs	r2, #0
 80054fc:	fb02 f205 	mul.w	r2, r2, r5
 8005500:	440a      	add	r2, r1
 8005502:	493a      	ldr	r1, [pc, #232]	; (80055ec <HAL_RCC_GetSysClockFreq+0x160>)
 8005504:	fba5 0101 	umull	r0, r1, r5, r1
 8005508:	1853      	adds	r3, r2, r1
 800550a:	4619      	mov	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	461a      	mov	r2, r3
 8005514:	4623      	mov	r3, r4
 8005516:	f7fb fb73 	bl	8000c00 <__aeabi_uldivmod>
 800551a:	4603      	mov	r3, r0
 800551c:	460c      	mov	r4, r1
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e049      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005522:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	ea03 0501 	and.w	r5, r3, r1
 8005538:	ea04 0602 	and.w	r6, r4, r2
 800553c:	4629      	mov	r1, r5
 800553e:	4632      	mov	r2, r6
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	f04f 0400 	mov.w	r4, #0
 8005548:	0154      	lsls	r4, r2, #5
 800554a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800554e:	014b      	lsls	r3, r1, #5
 8005550:	4619      	mov	r1, r3
 8005552:	4622      	mov	r2, r4
 8005554:	1b49      	subs	r1, r1, r5
 8005556:	eb62 0206 	sbc.w	r2, r2, r6
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	f04f 0400 	mov.w	r4, #0
 8005562:	0194      	lsls	r4, r2, #6
 8005564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005568:	018b      	lsls	r3, r1, #6
 800556a:	1a5b      	subs	r3, r3, r1
 800556c:	eb64 0402 	sbc.w	r4, r4, r2
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	00e2      	lsls	r2, r4, #3
 800557a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800557e:	00d9      	lsls	r1, r3, #3
 8005580:	460b      	mov	r3, r1
 8005582:	4614      	mov	r4, r2
 8005584:	195b      	adds	r3, r3, r5
 8005586:	eb44 0406 	adc.w	r4, r4, r6
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	02a2      	lsls	r2, r4, #10
 8005594:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005598:	0299      	lsls	r1, r3, #10
 800559a:	460b      	mov	r3, r1
 800559c:	4614      	mov	r4, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	4621      	mov	r1, r4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	461a      	mov	r2, r3
 80055aa:	4623      	mov	r3, r4
 80055ac:	f7fb fb28 	bl	8000c00 <__aeabi_uldivmod>
 80055b0:	4603      	mov	r3, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	3301      	adds	r3, #1
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	60bb      	str	r3, [r7, #8]
      break;
 80055d0:	e002      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80055d4:	60bb      	str	r3, [r7, #8]
      break;
 80055d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d8:	68bb      	ldr	r3, [r7, #8]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800
 80055e8:	00f42400 	.word	0x00f42400
 80055ec:	017d7840 	.word	0x017d7840

080055f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e056      	b.n	80056b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fe ffd1 	bl	80045c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005638:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	ea42 0103 	orr.w	r1, r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f003 0104 	and.w	r1, r3, #4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800569e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_SPI_Transmit+0x22>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e11e      	b.n	8005918 <HAL_SPI_Transmit+0x260>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e2:	f7ff f893 	bl	800480c <HAL_GetTick>
 80056e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
 80056fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056fc:	e103      	b.n	8005906 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_Transmit+0x52>
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800570e:	e0fa      	b.n	8005906 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2203      	movs	r2, #3
 8005714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005756:	d107      	bne.n	8005768 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005766:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d007      	beq.n	8005786 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005784:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578e:	d14b      	bne.n	8005828 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_SPI_Transmit+0xe6>
 8005798:	8afb      	ldrh	r3, [r7, #22]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d13e      	bne.n	800581c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057c2:	e02b      	b.n	800581c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d112      	bne.n	80057f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	881a      	ldrh	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80057f6:	e011      	b.n	800581c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f8:	f7ff f808 	bl	800480c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d803      	bhi.n	8005810 <HAL_SPI_Transmit+0x158>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Transmit+0x15e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	77fb      	strb	r3, [r7, #31]
          goto error;
 800581a:	e074      	b.n	8005906 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1ce      	bne.n	80057c4 <HAL_SPI_Transmit+0x10c>
 8005826:	e04c      	b.n	80058c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_SPI_Transmit+0x17e>
 8005830:	8afb      	ldrh	r3, [r7, #22]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d140      	bne.n	80058b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800585c:	e02c      	b.n	80058b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d113      	bne.n	8005894 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	86da      	strh	r2, [r3, #54]	; 0x36
 8005892:	e011      	b.n	80058b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005894:	f7fe ffba 	bl	800480c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d803      	bhi.n	80058ac <HAL_SPI_Transmit+0x1f4>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_Transmit+0x1fa>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058b6:	e026      	b.n	8005906 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1cd      	bne.n	800585e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fba4 	bl	8006014 <SPI_EndRxTxTransaction>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e000      	b.n	8005906 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005916:	7ffb      	ldrb	r3, [r7, #31]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593c:	d112      	bne.n	8005964 <HAL_SPI_Receive+0x44>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10e      	bne.n	8005964 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2204      	movs	r2, #4
 800594a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f8e9 	bl	8005b32 <HAL_SPI_TransmitReceive>
 8005960:	4603      	mov	r3, r0
 8005962:	e0e2      	b.n	8005b2a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_SPI_Receive+0x52>
 800596e:	2302      	movs	r3, #2
 8005970:	e0db      	b.n	8005b2a <HAL_SPI_Receive+0x20a>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800597a:	f7fe ff47 	bl	800480c <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800598c:	2302      	movs	r3, #2
 800598e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005990:	e0c2      	b.n	8005b18 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_SPI_Receive+0x7e>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a2:	e0b9      	b.n	8005b18 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2204      	movs	r2, #4
 80059a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ea:	d107      	bne.n	80059fc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d007      	beq.n	8005a1a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d162      	bne.n	8005ae8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a22:	e02e      	b.n	8005a82 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d115      	bne.n	8005a5e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f103 020c 	add.w	r2, r3, #12
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a5c:	e011      	b.n	8005a82 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5e:	f7fe fed5 	bl	800480c <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d803      	bhi.n	8005a76 <HAL_SPI_Receive+0x156>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Receive+0x15c>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a80:	e04a      	b.n	8005b18 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1cb      	bne.n	8005a24 <HAL_SPI_Receive+0x104>
 8005a8c:	e031      	b.n	8005af2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d113      	bne.n	8005ac4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	b292      	uxth	r2, r2
 8005aa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	1c9a      	adds	r2, r3, #2
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ac2:	e011      	b.n	8005ae8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac4:	f7fe fea2 	bl	800480c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d803      	bhi.n	8005adc <HAL_SPI_Receive+0x1bc>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d102      	bne.n	8005ae2 <HAL_SPI_Receive+0x1c2>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ae6:	e017      	b.n	8005b18 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1cd      	bne.n	8005a8e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fa27 	bl	8005f4a <SPI_EndRxTransaction>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
 8005b14:	e000      	b.n	8005b18 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005b16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b08c      	sub	sp, #48	; 0x30
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b40:	2301      	movs	r3, #1
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x26>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e18a      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x33c>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b60:	f7fe fe54 	bl	800480c <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b76:	887b      	ldrh	r3, [r7, #2]
 8005b78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d00f      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x70>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b88:	d107      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x68>
 8005b92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d003      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ba0:	e15b      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x82>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x82>
 8005bae:	887b      	ldrh	r3, [r7, #2]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bba:	e14e      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d003      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2205      	movs	r2, #5
 8005bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	887a      	ldrh	r2, [r7, #2]
 8005be6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	887a      	ldrh	r2, [r7, #2]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	887a      	ldrh	r2, [r7, #2]
 8005bf8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	d178      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x10a>
 8005c36:	8b7b      	ldrh	r3, [r7, #26]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d166      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c60:	e053      	b.n	8005d0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x176>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x176>
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d113      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d119      	bne.n	8005cea <HAL_SPI_TransmitReceive+0x1b8>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d014      	beq.n	8005cea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	1c9a      	adds	r2, r3, #2
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cea:	f7fe fd8f 	bl	800480c <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d807      	bhi.n	8005d0a <HAL_SPI_TransmitReceive+0x1d8>
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d003      	beq.n	8005d0a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d08:	e0a7      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1a6      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x130>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1a1      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x130>
 8005d1e:	e07c      	b.n	8005e1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x1fc>
 8005d28:	8b7b      	ldrh	r3, [r7, #26]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d16b      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d54:	e057      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11c      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x26c>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <HAL_SPI_TransmitReceive+0x26c>
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d114      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d119      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x2ae>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d014      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005de0:	f7fe fd14 	bl	800480c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d803      	bhi.n	8005df8 <HAL_SPI_TransmitReceive+0x2c6>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_TransmitReceive+0x2cc>
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e04:	e029      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1a2      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x224>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d19d      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f8f8 	bl	8006014 <SPI_EndRxTxTransaction>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e36:	e010      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	e000      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3730      	adds	r7, #48	; 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e86:	e04c      	b.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d048      	beq.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e90:	f7fe fcbc 	bl	800480c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d902      	bls.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d13d      	bne.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebe:	d111      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec8:	d004      	beq.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed2:	d107      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eec:	d10f      	bne.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e00f      	b.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	bf0c      	ite	eq
 8005f32:	2301      	moveq	r3, #1
 8005f34:	2300      	movne	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1a3      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af02      	add	r7, sp, #8
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f5e:	d111      	bne.n	8005f84 <SPI_EndRxTransaction+0x3a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f68:	d004      	beq.n	8005f74 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f72:	d107      	bne.n	8005f84 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8c:	d12a      	bne.n	8005fe4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f96:	d012      	beq.n	8005fbe <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2180      	movs	r1, #128	; 0x80
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff ff67 	bl	8005e76 <SPI_WaitFlagStateUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d02d      	beq.n	800600a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb2:	f043 0220 	orr.w	r2, r3, #32
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e026      	b.n	800600c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ff54 	bl	8005e76 <SPI_WaitFlagStateUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01a      	beq.n	800600a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e013      	b.n	800600c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	2101      	movs	r1, #1
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff ff41 	bl	8005e76 <SPI_WaitFlagStateUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f043 0220 	orr.w	r2, r3, #32
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e000      	b.n	800600c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <SPI_EndRxTxTransaction+0x7c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <SPI_EndRxTxTransaction+0x80>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	0d5b      	lsrs	r3, r3, #21
 800602c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800603e:	d112      	bne.n	8006066 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2200      	movs	r2, #0
 8006048:	2180      	movs	r1, #128	; 0x80
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff ff13 	bl	8005e76 <SPI_WaitFlagStateUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e00f      	b.n	8006086 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	3b01      	subs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	2b80      	cmp	r3, #128	; 0x80
 800607e:	d0f2      	beq.n	8006066 <SPI_EndRxTxTransaction+0x52>
 8006080:	e000      	b.n	8006084 <SPI_EndRxTxTransaction+0x70>
        break;
 8006082:	bf00      	nop
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000010 	.word	0x20000010
 8006094:	165e9f81 	.word	0x165e9f81

08006098 <__errno>:
 8006098:	4b01      	ldr	r3, [pc, #4]	; (80060a0 <__errno+0x8>)
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	2000001c 	.word	0x2000001c

080060a4 <__libc_init_array>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4e0d      	ldr	r6, [pc, #52]	; (80060dc <__libc_init_array+0x38>)
 80060a8:	4c0d      	ldr	r4, [pc, #52]	; (80060e0 <__libc_init_array+0x3c>)
 80060aa:	1ba4      	subs	r4, r4, r6
 80060ac:	10a4      	asrs	r4, r4, #2
 80060ae:	2500      	movs	r5, #0
 80060b0:	42a5      	cmp	r5, r4
 80060b2:	d109      	bne.n	80060c8 <__libc_init_array+0x24>
 80060b4:	4e0b      	ldr	r6, [pc, #44]	; (80060e4 <__libc_init_array+0x40>)
 80060b6:	4c0c      	ldr	r4, [pc, #48]	; (80060e8 <__libc_init_array+0x44>)
 80060b8:	f000 f980 	bl	80063bc <_init>
 80060bc:	1ba4      	subs	r4, r4, r6
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	2500      	movs	r5, #0
 80060c2:	42a5      	cmp	r5, r4
 80060c4:	d105      	bne.n	80060d2 <__libc_init_array+0x2e>
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060cc:	4798      	blx	r3
 80060ce:	3501      	adds	r5, #1
 80060d0:	e7ee      	b.n	80060b0 <__libc_init_array+0xc>
 80060d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d6:	4798      	blx	r3
 80060d8:	3501      	adds	r5, #1
 80060da:	e7f2      	b.n	80060c2 <__libc_init_array+0x1e>
 80060dc:	0800c228 	.word	0x0800c228
 80060e0:	0800c228 	.word	0x0800c228
 80060e4:	0800c228 	.word	0x0800c228
 80060e8:	0800c22c 	.word	0x0800c22c

080060ec <memset>:
 80060ec:	4402      	add	r2, r0
 80060ee:	4603      	mov	r3, r0
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d100      	bne.n	80060f6 <memset+0xa>
 80060f4:	4770      	bx	lr
 80060f6:	f803 1b01 	strb.w	r1, [r3], #1
 80060fa:	e7f9      	b.n	80060f0 <memset+0x4>

080060fc <sqrt>:
 80060fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006100:	ed2d 8b02 	vpush	{d8}
 8006104:	b08b      	sub	sp, #44	; 0x2c
 8006106:	ec55 4b10 	vmov	r4, r5, d0
 800610a:	f000 f8a1 	bl	8006250 <__ieee754_sqrt>
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <sqrt+0xac>)
 8006110:	eeb0 8a40 	vmov.f32	s16, s0
 8006114:	eef0 8a60 	vmov.f32	s17, s1
 8006118:	f993 6000 	ldrsb.w	r6, [r3]
 800611c:	1c73      	adds	r3, r6, #1
 800611e:	d02a      	beq.n	8006176 <sqrt+0x7a>
 8006120:	4622      	mov	r2, r4
 8006122:	462b      	mov	r3, r5
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	f7fa fd04 	bl	8000b34 <__aeabi_dcmpun>
 800612c:	4607      	mov	r7, r0
 800612e:	bb10      	cbnz	r0, 8006176 <sqrt+0x7a>
 8006130:	f04f 0800 	mov.w	r8, #0
 8006134:	f04f 0900 	mov.w	r9, #0
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa fcd0 	bl	8000ae4 <__aeabi_dcmplt>
 8006144:	b1b8      	cbz	r0, 8006176 <sqrt+0x7a>
 8006146:	2301      	movs	r3, #1
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	4b18      	ldr	r3, [pc, #96]	; (80061ac <sqrt+0xb0>)
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	9708      	str	r7, [sp, #32]
 8006150:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006154:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006158:	b9b6      	cbnz	r6, 8006188 <sqrt+0x8c>
 800615a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800615e:	4668      	mov	r0, sp
 8006160:	f000 f929 	bl	80063b6 <matherr>
 8006164:	b1d0      	cbz	r0, 800619c <sqrt+0xa0>
 8006166:	9b08      	ldr	r3, [sp, #32]
 8006168:	b11b      	cbz	r3, 8006172 <sqrt+0x76>
 800616a:	f7ff ff95 	bl	8006098 <__errno>
 800616e:	9b08      	ldr	r3, [sp, #32]
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006176:	eeb0 0a48 	vmov.f32	s0, s16
 800617a:	eef0 0a68 	vmov.f32	s1, s17
 800617e:	b00b      	add	sp, #44	; 0x2c
 8006180:	ecbd 8b02 	vpop	{d8}
 8006184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	4640      	mov	r0, r8
 800618e:	4649      	mov	r1, r9
 8006190:	f7fa fb60 	bl	8000854 <__aeabi_ddiv>
 8006194:	2e02      	cmp	r6, #2
 8006196:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800619a:	d1e0      	bne.n	800615e <sqrt+0x62>
 800619c:	f7ff ff7c 	bl	8006098 <__errno>
 80061a0:	2321      	movs	r3, #33	; 0x21
 80061a2:	6003      	str	r3, [r0, #0]
 80061a4:	e7df      	b.n	8006166 <sqrt+0x6a>
 80061a6:	bf00      	nop
 80061a8:	20000080 	.word	0x20000080
 80061ac:	0800c214 	.word	0x0800c214

080061b0 <sqrtf>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	ed2d 8b02 	vpush	{d8}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	eeb0 8a40 	vmov.f32	s16, s0
 80061bc:	f000 f8f8 	bl	80063b0 <__ieee754_sqrtf>
 80061c0:	4b21      	ldr	r3, [pc, #132]	; (8006248 <sqrtf+0x98>)
 80061c2:	f993 4000 	ldrsb.w	r4, [r3]
 80061c6:	1c63      	adds	r3, r4, #1
 80061c8:	d02c      	beq.n	8006224 <sqrtf+0x74>
 80061ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80061ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d2:	d627      	bvs.n	8006224 <sqrtf+0x74>
 80061d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80061d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061dc:	d522      	bpl.n	8006224 <sqrtf+0x74>
 80061de:	2301      	movs	r3, #1
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4b1a      	ldr	r3, [pc, #104]	; (800624c <sqrtf+0x9c>)
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	ee18 0a10 	vmov	r0, s16
 80061ea:	2300      	movs	r3, #0
 80061ec:	9308      	str	r3, [sp, #32]
 80061ee:	f7fa f9af 	bl	8000550 <__aeabi_f2d>
 80061f2:	2200      	movs	r2, #0
 80061f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061fc:	2300      	movs	r3, #0
 80061fe:	b9ac      	cbnz	r4, 800622c <sqrtf+0x7c>
 8006200:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006204:	4668      	mov	r0, sp
 8006206:	f000 f8d6 	bl	80063b6 <matherr>
 800620a:	b1b8      	cbz	r0, 800623c <sqrtf+0x8c>
 800620c:	9b08      	ldr	r3, [sp, #32]
 800620e:	b11b      	cbz	r3, 8006218 <sqrtf+0x68>
 8006210:	f7ff ff42 	bl	8006098 <__errno>
 8006214:	9b08      	ldr	r3, [sp, #32]
 8006216:	6003      	str	r3, [r0, #0]
 8006218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800621c:	f7fa fca0 	bl	8000b60 <__aeabi_d2f>
 8006220:	ee00 0a10 	vmov	s0, r0
 8006224:	b00a      	add	sp, #40	; 0x28
 8006226:	ecbd 8b02 	vpop	{d8}
 800622a:	bd10      	pop	{r4, pc}
 800622c:	4610      	mov	r0, r2
 800622e:	4619      	mov	r1, r3
 8006230:	f7fa fb10 	bl	8000854 <__aeabi_ddiv>
 8006234:	2c02      	cmp	r4, #2
 8006236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800623a:	d1e3      	bne.n	8006204 <sqrtf+0x54>
 800623c:	f7ff ff2c 	bl	8006098 <__errno>
 8006240:	2321      	movs	r3, #33	; 0x21
 8006242:	6003      	str	r3, [r0, #0]
 8006244:	e7e2      	b.n	800620c <sqrtf+0x5c>
 8006246:	bf00      	nop
 8006248:	20000080 	.word	0x20000080
 800624c:	0800c219 	.word	0x0800c219

08006250 <__ieee754_sqrt>:
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	4955      	ldr	r1, [pc, #340]	; (80063ac <__ieee754_sqrt+0x15c>)
 8006256:	ec55 4b10 	vmov	r4, r5, d0
 800625a:	43a9      	bics	r1, r5
 800625c:	462b      	mov	r3, r5
 800625e:	462a      	mov	r2, r5
 8006260:	d112      	bne.n	8006288 <__ieee754_sqrt+0x38>
 8006262:	ee10 2a10 	vmov	r2, s0
 8006266:	ee10 0a10 	vmov	r0, s0
 800626a:	4629      	mov	r1, r5
 800626c:	f7fa f9c8 	bl	8000600 <__aeabi_dmul>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4620      	mov	r0, r4
 8006276:	4629      	mov	r1, r5
 8006278:	f7fa f80c 	bl	8000294 <__adddf3>
 800627c:	4604      	mov	r4, r0
 800627e:	460d      	mov	r5, r1
 8006280:	ec45 4b10 	vmov	d0, r4, r5
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	2d00      	cmp	r5, #0
 800628a:	ee10 0a10 	vmov	r0, s0
 800628e:	4621      	mov	r1, r4
 8006290:	dc0f      	bgt.n	80062b2 <__ieee754_sqrt+0x62>
 8006292:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006296:	4330      	orrs	r0, r6
 8006298:	d0f2      	beq.n	8006280 <__ieee754_sqrt+0x30>
 800629a:	b155      	cbz	r5, 80062b2 <__ieee754_sqrt+0x62>
 800629c:	ee10 2a10 	vmov	r2, s0
 80062a0:	4620      	mov	r0, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	f7f9 fff4 	bl	8000290 <__aeabi_dsub>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	f7fa fad2 	bl	8000854 <__aeabi_ddiv>
 80062b0:	e7e4      	b.n	800627c <__ieee754_sqrt+0x2c>
 80062b2:	151b      	asrs	r3, r3, #20
 80062b4:	d073      	beq.n	800639e <__ieee754_sqrt+0x14e>
 80062b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062ba:	07dd      	lsls	r5, r3, #31
 80062bc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80062c0:	bf48      	it	mi
 80062c2:	0fc8      	lsrmi	r0, r1, #31
 80062c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062c8:	bf44      	itt	mi
 80062ca:	0049      	lslmi	r1, r1, #1
 80062cc:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80062d0:	2500      	movs	r5, #0
 80062d2:	1058      	asrs	r0, r3, #1
 80062d4:	0fcb      	lsrs	r3, r1, #31
 80062d6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80062da:	0049      	lsls	r1, r1, #1
 80062dc:	2316      	movs	r3, #22
 80062de:	462c      	mov	r4, r5
 80062e0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80062e4:	19a7      	adds	r7, r4, r6
 80062e6:	4297      	cmp	r7, r2
 80062e8:	bfde      	ittt	le
 80062ea:	19bc      	addle	r4, r7, r6
 80062ec:	1bd2      	suble	r2, r2, r7
 80062ee:	19ad      	addle	r5, r5, r6
 80062f0:	0fcf      	lsrs	r7, r1, #31
 80062f2:	3b01      	subs	r3, #1
 80062f4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80062f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80062fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006300:	d1f0      	bne.n	80062e4 <__ieee754_sqrt+0x94>
 8006302:	f04f 0c20 	mov.w	ip, #32
 8006306:	469e      	mov	lr, r3
 8006308:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800630c:	42a2      	cmp	r2, r4
 800630e:	eb06 070e 	add.w	r7, r6, lr
 8006312:	dc02      	bgt.n	800631a <__ieee754_sqrt+0xca>
 8006314:	d112      	bne.n	800633c <__ieee754_sqrt+0xec>
 8006316:	428f      	cmp	r7, r1
 8006318:	d810      	bhi.n	800633c <__ieee754_sqrt+0xec>
 800631a:	2f00      	cmp	r7, #0
 800631c:	eb07 0e06 	add.w	lr, r7, r6
 8006320:	da42      	bge.n	80063a8 <__ieee754_sqrt+0x158>
 8006322:	f1be 0f00 	cmp.w	lr, #0
 8006326:	db3f      	blt.n	80063a8 <__ieee754_sqrt+0x158>
 8006328:	f104 0801 	add.w	r8, r4, #1
 800632c:	1b12      	subs	r2, r2, r4
 800632e:	428f      	cmp	r7, r1
 8006330:	bf88      	it	hi
 8006332:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006336:	1bc9      	subs	r1, r1, r7
 8006338:	4433      	add	r3, r6
 800633a:	4644      	mov	r4, r8
 800633c:	0052      	lsls	r2, r2, #1
 800633e:	f1bc 0c01 	subs.w	ip, ip, #1
 8006342:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006346:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800634a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800634e:	d1dd      	bne.n	800630c <__ieee754_sqrt+0xbc>
 8006350:	430a      	orrs	r2, r1
 8006352:	d006      	beq.n	8006362 <__ieee754_sqrt+0x112>
 8006354:	1c5c      	adds	r4, r3, #1
 8006356:	bf13      	iteet	ne
 8006358:	3301      	addne	r3, #1
 800635a:	3501      	addeq	r5, #1
 800635c:	4663      	moveq	r3, ip
 800635e:	f023 0301 	bicne.w	r3, r3, #1
 8006362:	106a      	asrs	r2, r5, #1
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	07e9      	lsls	r1, r5, #31
 8006368:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800636c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006370:	bf48      	it	mi
 8006372:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006376:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800637a:	461c      	mov	r4, r3
 800637c:	e780      	b.n	8006280 <__ieee754_sqrt+0x30>
 800637e:	0aca      	lsrs	r2, r1, #11
 8006380:	3815      	subs	r0, #21
 8006382:	0549      	lsls	r1, r1, #21
 8006384:	2a00      	cmp	r2, #0
 8006386:	d0fa      	beq.n	800637e <__ieee754_sqrt+0x12e>
 8006388:	02d6      	lsls	r6, r2, #11
 800638a:	d50a      	bpl.n	80063a2 <__ieee754_sqrt+0x152>
 800638c:	f1c3 0420 	rsb	r4, r3, #32
 8006390:	fa21 f404 	lsr.w	r4, r1, r4
 8006394:	1e5d      	subs	r5, r3, #1
 8006396:	4099      	lsls	r1, r3
 8006398:	4322      	orrs	r2, r4
 800639a:	1b43      	subs	r3, r0, r5
 800639c:	e78b      	b.n	80062b6 <__ieee754_sqrt+0x66>
 800639e:	4618      	mov	r0, r3
 80063a0:	e7f0      	b.n	8006384 <__ieee754_sqrt+0x134>
 80063a2:	0052      	lsls	r2, r2, #1
 80063a4:	3301      	adds	r3, #1
 80063a6:	e7ef      	b.n	8006388 <__ieee754_sqrt+0x138>
 80063a8:	46a0      	mov	r8, r4
 80063aa:	e7bf      	b.n	800632c <__ieee754_sqrt+0xdc>
 80063ac:	7ff00000 	.word	0x7ff00000

080063b0 <__ieee754_sqrtf>:
 80063b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80063b4:	4770      	bx	lr

080063b6 <matherr>:
 80063b6:	2000      	movs	r0, #0
 80063b8:	4770      	bx	lr
	...

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
