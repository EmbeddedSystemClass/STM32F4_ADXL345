
STM32F4_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005eec  08008c30  08008c30  00018c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb1c  0800eb1c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb1c  0800eb1c  0001eb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb24  0800eb24  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb24  0800eb24  0001eb24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb28  0800eb28  0001eb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800eb2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014574  200000a0  0800ebb0  000200a0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  20014614  0800ebb0  00024614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001538e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eec  00000000  00000000  00035442  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  00038330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020996  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ccd8  00000000  00000000  0005985e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c6e71  00000000  00000000  00066536  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0012d3a7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000009e0  00000000  00000000  0012d428  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003080  00000000  00000000  0012de08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c18 	.word	0x08008c18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08008c18 	.word	0x08008c18

080001c8 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001c8:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001ca:	2b01      	cmp	r3, #1
	IT       LS
 80001cc:	bf98      	it	ls
	BXLS     lr
 80001ce:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001d4:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e0:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001e6:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001e8:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001ea:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001ec:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001f6:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000200:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000204:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000208:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000212:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000224:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000226:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000228:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
	POP      {r4-r9}
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8000232:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000234:	2b01      	cmp	r3, #1
	IT       LS
 8000236:	bf98      	it	ls
	BXLS     lr
 8000238:	4770      	bxls	lr
	PUSH     {r4-r9}
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800023e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800024a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000268:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800026e:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000272:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000276:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800027a:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 800027c:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 800027e:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000286:	4770      	bx	lr

08000288 <strlen>:
 8000288:	4603      	mov	r3, r0
 800028a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028e:	2a00      	cmp	r2, #0
 8000290:	d1fb      	bne.n	800028a <strlen+0x2>
 8000292:	1a18      	subs	r0, r3, r0
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	; 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d6:	f1a4 0401 	sub.w	r4, r4, #1
 80003da:	d1e9      	bne.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000582:	bf08      	it	eq
 8000584:	4770      	bxeq	lr
 8000586:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058a:	bf04      	itt	eq
 800058c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e71c      	b.n	80003dc <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aed8 	beq.w	800038a <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6bd      	b.n	800038a <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b972 	b.w	8000f9c <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	9e08      	ldr	r6, [sp, #32]
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4688      	mov	r8, r1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d14b      	bne.n	8000d76 <__udivmoddi4+0xa6>
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	4615      	mov	r5, r2
 8000ce2:	d967      	bls.n	8000db4 <__udivmoddi4+0xe4>
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	b14a      	cbz	r2, 8000cfe <__udivmoddi4+0x2e>
 8000cea:	f1c2 0720 	rsb	r7, r2, #32
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf6:	4095      	lsls	r5, r2
 8000cf8:	ea47 0803 	orr.w	r8, r7, r3
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	0c23      	lsrs	r3, r4, #16
 8000d04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d08:	fa1f fc85 	uxth.w	ip, r5
 8000d0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d14:	fb07 f10c 	mul.w	r1, r7, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x60>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d22:	f080 811b 	bcs.w	8000f5c <__udivmoddi4+0x28c>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 8118 	bls.w	8000f5c <__udivmoddi4+0x28c>
 8000d2c:	3f02      	subs	r7, #2
 8000d2e:	442b      	add	r3, r5
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x8c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x290>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x290>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	442c      	add	r4, r5
 8000d5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d60:	eba4 040c 	sub.w	r4, r4, ip
 8000d64:	2700      	movs	r7, #0
 8000d66:	b11e      	cbz	r6, 8000d70 <__udivmoddi4+0xa0>
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0xbe>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	f000 80eb 	beq.w	8000f56 <__udivmoddi4+0x286>
 8000d80:	2700      	movs	r7, #0
 8000d82:	e9c6 0100 	strd	r0, r1, [r6]
 8000d86:	4638      	mov	r0, r7
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f783 	clz	r7, r3
 8000d92:	2f00      	cmp	r7, #0
 8000d94:	d147      	bne.n	8000e26 <__udivmoddi4+0x156>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xd0>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80fa 	bhi.w	8000f94 <__udivmoddi4+0x2c4>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0303 	sbc.w	r3, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4698      	mov	r8, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d0e0      	beq.n	8000d70 <__udivmoddi4+0xa0>
 8000dae:	e9c6 4800 	strd	r4, r8, [r6]
 8000db2:	e7dd      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000db4:	b902      	cbnz	r2, 8000db8 <__udivmoddi4+0xe8>
 8000db6:	deff      	udf	#255	; 0xff
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f040 808f 	bne.w	8000ee0 <__udivmoddi4+0x210>
 8000dc2:	1b49      	subs	r1, r1, r5
 8000dc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc8:	fa1f f885 	uxth.w	r8, r5
 8000dcc:	2701      	movs	r7, #1
 8000dce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dd2:	0c23      	lsrs	r3, r4, #16
 8000dd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ddc:	fb08 f10c 	mul.w	r1, r8, ip
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x124>
 8000de4:	18eb      	adds	r3, r5, r3
 8000de6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x122>
 8000dec:	4299      	cmp	r1, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2bc>
 8000df2:	4684      	mov	ip, r0
 8000df4:	1a59      	subs	r1, r3, r1
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e04:	fb08 f800 	mul.w	r8, r8, r0
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x14c>
 8000e0c:	192c      	adds	r4, r5, r4
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x14a>
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	f200 80b6 	bhi.w	8000f86 <__udivmoddi4+0x2b6>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 0408 	sub.w	r4, r4, r8
 8000e20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e24:	e79f      	b.n	8000d66 <__udivmoddi4+0x96>
 8000e26:	f1c7 0c20 	rsb	ip, r7, #32
 8000e2a:	40bb      	lsls	r3, r7
 8000e2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e34:	fa01 f407 	lsl.w	r4, r1, r7
 8000e38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e44:	4325      	orrs	r5, r4
 8000e46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e4a:	0c2c      	lsrs	r4, r5, #16
 8000e4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000e50:	fa1f fa8e 	uxth.w	sl, lr
 8000e54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e58:	fb09 f40a 	mul.w	r4, r9, sl
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000e62:	fa00 f107 	lsl.w	r1, r0, r7
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b0>
 8000e68:	eb1e 0303 	adds.w	r3, lr, r3
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	f080 8087 	bcs.w	8000f82 <__udivmoddi4+0x2b2>
 8000e74:	429c      	cmp	r4, r3
 8000e76:	f240 8084 	bls.w	8000f82 <__udivmoddi4+0x2b2>
 8000e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7e:	4473      	add	r3, lr
 8000e80:	1b1b      	subs	r3, r3, r4
 8000e82:	b2ad      	uxth	r5, r5
 8000e84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e88:	fb08 3310 	mls	r3, r8, r0, r3
 8000e8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e94:	45a2      	cmp	sl, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1da>
 8000e98:	eb1e 0404 	adds.w	r4, lr, r4
 8000e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea0:	d26b      	bcs.n	8000f7a <__udivmoddi4+0x2aa>
 8000ea2:	45a2      	cmp	sl, r4
 8000ea4:	d969      	bls.n	8000f7a <__udivmoddi4+0x2aa>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4474      	add	r4, lr
 8000eaa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	eba4 040a 	sub.w	r4, r4, sl
 8000eb6:	454c      	cmp	r4, r9
 8000eb8:	46c2      	mov	sl, r8
 8000eba:	464b      	mov	r3, r9
 8000ebc:	d354      	bcc.n	8000f68 <__udivmoddi4+0x298>
 8000ebe:	d051      	beq.n	8000f64 <__udivmoddi4+0x294>
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d069      	beq.n	8000f98 <__udivmoddi4+0x2c8>
 8000ec4:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec8:	eb64 0403 	sbc.w	r4, r4, r3
 8000ecc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed0:	40fd      	lsrs	r5, r7
 8000ed2:	40fc      	lsrs	r4, r7
 8000ed4:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed8:	e9c6 5400 	strd	r5, r4, [r6]
 8000edc:	2700      	movs	r7, #0
 8000ede:	e747      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000ee0:	f1c2 0320 	rsb	r3, r2, #32
 8000ee4:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee8:	4095      	lsls	r5, r2
 8000eea:	fa01 f002 	lsl.w	r0, r1, r2
 8000eee:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef6:	4338      	orrs	r0, r7
 8000ef8:	0c01      	lsrs	r1, r0, #16
 8000efa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000efe:	fa1f f885 	uxth.w	r8, r5
 8000f02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0a:	fb07 f308 	mul.w	r3, r7, r8
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x256>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f1c:	d22f      	bcs.n	8000f7e <__udivmoddi4+0x2ae>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d92d      	bls.n	8000f7e <__udivmoddi4+0x2ae>
 8000f22:	3f02      	subs	r7, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1acb      	subs	r3, r1, r3
 8000f28:	b281      	uxth	r1, r0
 8000f2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f36:	fb00 f308 	mul.w	r3, r0, r8
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x27e>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f44:	d217      	bcs.n	8000f76 <__udivmoddi4+0x2a6>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d915      	bls.n	8000f76 <__udivmoddi4+0x2a6>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1ac9      	subs	r1, r1, r3
 8000f50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f54:	e73b      	b.n	8000dce <__udivmoddi4+0xfe>
 8000f56:	4637      	mov	r7, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e709      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000f5c:	4607      	mov	r7, r0
 8000f5e:	e6e7      	b.n	8000d30 <__udivmoddi4+0x60>
 8000f60:	4618      	mov	r0, r3
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x8c>
 8000f64:	4541      	cmp	r1, r8
 8000f66:	d2ab      	bcs.n	8000ec0 <__udivmoddi4+0x1f0>
 8000f68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000f70:	3801      	subs	r0, #1
 8000f72:	4613      	mov	r3, r2
 8000f74:	e7a4      	b.n	8000ec0 <__udivmoddi4+0x1f0>
 8000f76:	4660      	mov	r0, ip
 8000f78:	e7e9      	b.n	8000f4e <__udivmoddi4+0x27e>
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	e795      	b.n	8000eaa <__udivmoddi4+0x1da>
 8000f7e:	4667      	mov	r7, ip
 8000f80:	e7d1      	b.n	8000f26 <__udivmoddi4+0x256>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e77c      	b.n	8000e80 <__udivmoddi4+0x1b0>
 8000f86:	3802      	subs	r0, #2
 8000f88:	442c      	add	r4, r5
 8000f8a:	e747      	b.n	8000e1c <__udivmoddi4+0x14c>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	442b      	add	r3, r5
 8000f92:	e72f      	b.n	8000df4 <__udivmoddi4+0x124>
 8000f94:	4638      	mov	r0, r7
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xda>
 8000f98:	4637      	mov	r7, r6
 8000f9a:	e6e9      	b.n	8000d70 <__udivmoddi4+0xa0>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000faa:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8000fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	db0a      	blt.n	8000fd0 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000fba:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fbe:	f007 fd25 	bl	8008a0c <sqrtf>
 8000fc2:	eef0 7a40 	vmov.f32	s15, s0
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e005      	b.n	8000fdc <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8000ff6:	e082      	b.n	80010fe <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1d1a      	adds	r2, r3, #4
 8000ffc:	60fa      	str	r2, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1d1a      	adds	r2, r3, #4
 8001006:	60fa      	str	r2, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800100c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001010:	edd7 7a06 	vldr	s15, [r7, #24]
 8001014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001018:	edd7 6a05 	vldr	s13, [r7, #20]
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	60ba      	str	r2, [r7, #8]
 800102e:	4618      	mov	r0, r3
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	f7ff ffb4 	bl	8000fa0 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	1d1a      	adds	r2, r3, #4
 800103c:	60fa      	str	r2, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1d1a      	adds	r2, r3, #4
 8001046:	60fa      	str	r2, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800104c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001050:	edd7 7a06 	vldr	s15, [r7, #24]
 8001054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001058:	edd7 6a05 	vldr	s13, [r7, #20]
 800105c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1d1a      	adds	r2, r3, #4
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	4618      	mov	r0, r3
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	f7ff ff94 	bl	8000fa0 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1d1a      	adds	r2, r3, #4
 800107c:	60fa      	str	r2, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1d1a      	adds	r2, r3, #4
 8001086:	60fa      	str	r2, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800108c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001090:	edd7 7a06 	vldr	s15, [r7, #24]
 8001094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001098:	edd7 6a05 	vldr	s13, [r7, #20]
 800109c:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	4618      	mov	r0, r3
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	f7ff ff74 	bl	8000fa0 <arm_sqrt_f32>

    realIn = *pSrc++;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	60fa      	str	r2, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80010d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80010dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1d1a      	adds	r2, r3, #4
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	f7ff ff54 	bl	8000fa0 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f47f af79 	bne.w	8000ff8 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 800110e:	e022      	b.n	8001156 <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	60fa      	str	r2, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	60fa      	str	r2, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001124:	ed97 7a06 	vldr	s14, [r7, #24]
 8001128:	edd7 7a06 	vldr	s15, [r7, #24]
 800112c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001130:	edd7 6a05 	vldr	s13, [r7, #20]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1d1a      	adds	r2, r3, #4
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	4618      	mov	r0, r3
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	f7ff ff28 	bl	8000fa0 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3b01      	subs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1d9      	bne.n	8001110 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001164:	b480      	push	{r7}
 8001166:	b08b      	sub	sp, #44	; 0x2c
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1d1a      	adds	r2, r3, #4
 800117e:	60fa      	str	r2, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3b01      	subs	r3, #1
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 800118c:	e051      	b.n	8001232 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1d1a      	adds	r2, r3, #4
 8001192:	60fa      	str	r2, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1d1a      	adds	r2, r3, #4
 800119c:	60fa      	str	r2, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80011a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d504      	bpl.n	80011be <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	3301      	adds	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1d1a      	adds	r2, r3, #4
 80011c2:	60fa      	str	r2, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 80011c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d504      	bpl.n	80011e4 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3302      	adds	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1d1a      	adds	r2, r3, #4
 80011e8:	60fa      	str	r2, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80011ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d504      	bpl.n	800120a <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	3303      	adds	r3, #3
 8001208:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800120a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800120e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121a:	d504      	bpl.n	8001226 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	3304      	adds	r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	3304      	adds	r3, #4
 800122a:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3b01      	subs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1aa      	bne.n	800118e <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3b01      	subs	r3, #1
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8001242:	e016      	b.n	8001272 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1d1a      	adds	r2, r3, #4
 8001248:	60fa      	str	r2, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 800124e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001252:	edd7 7a05 	vldr	s15, [r7, #20]
 8001256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	d505      	bpl.n	800126c <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	3b01      	subs	r3, #1
 8001270:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e5      	bne.n	8001244 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	372c      	adds	r7, #44	; 0x2c
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001290:	b480      	push	{r7}
 8001292:	b08b      	sub	sp, #44	; 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1d1a      	adds	r2, r3, #4
 80012aa:	60fa      	str	r2, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 80012b8:	e051      	b.n	800135e <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1d1a      	adds	r2, r3, #4
 80012be:	60fa      	str	r2, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1d1a      	adds	r2, r3, #4
 80012c8:	60fa      	str	r2, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 80012ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	dd04      	ble.n	80012ea <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1d1a      	adds	r2, r3, #4
 80012ee:	60fa      	str	r2, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 80012f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	dd04      	ble.n	8001310 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3302      	adds	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1d1a      	adds	r2, r3, #4
 8001314:	60fa      	str	r2, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 800131a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800131e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	dd04      	ble.n	8001336 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	3303      	adds	r3, #3
 8001334:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8001336:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	dd04      	ble.n	8001352 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3304      	adds	r3, #4
 8001350:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	3304      	adds	r3, #4
 8001356:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	3b01      	subs	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1aa      	bne.n	80012ba <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3b01      	subs	r3, #1
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 800136e:	e016      	b.n	800139e <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1d1a      	adds	r2, r3, #4
 8001374:	60fa      	str	r2, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 800137a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800137e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	dd05      	ble.n	8001398 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	3b01      	subs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e5      	bne.n	8001370 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a8:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	372c      	adds	r7, #44	; 0x2c
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <arm_sqrt_f32>:
  {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013c6:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 80013c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	db0a      	blt.n	80013ec <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 80013d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80013da:	f007 fb17 	bl	8008a0c <sqrtf>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80013e8:	2300      	movs	r3, #0
 80013ea:	e005      	b.n	80013f8 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001418:	e046      	b.n	80014a8 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1d1a      	adds	r2, r3, #4
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001424:	ed97 7a05 	vldr	s14, [r7, #20]
 8001428:	edd7 7a05 	vldr	s15, [r7, #20]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	ed97 7a07 	vldr	s14, [r7, #28]
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1d1a      	adds	r2, r3, #4
 8001440:	60fa      	str	r2, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001446:	ed97 7a05 	vldr	s14, [r7, #20]
 800144a:	edd7 7a05 	vldr	s15, [r7, #20]
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	ed97 7a07 	vldr	s14, [r7, #28]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1d1a      	adds	r2, r3, #4
 8001462:	60fa      	str	r2, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001468:	ed97 7a05 	vldr	s14, [r7, #20]
 800146c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	ed97 7a07 	vldr	s14, [r7, #28]
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147c:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1d1a      	adds	r2, r3, #4
 8001484:	60fa      	str	r2, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800148a:	ed97 7a05 	vldr	s14, [r7, #20]
 800148e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	ed97 7a07 	vldr	s14, [r7, #28]
 800149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1b5      	bne.n	800141a <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80014b6:	e013      	b.n	80014e0 <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	60fa      	str	r2, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3b01      	subs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1e8      	bne.n	80014b8 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80014f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	eeb0 0a66 	vmov.f32	s0, s13
 80014fe:	f7ff ff5d 	bl	80013bc <arm_sqrt_f32>
}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b0a0      	sub	sp, #128	; 0x80
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800151a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	4413      	add	r3, r2
 8001522:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 800152e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001530:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8001532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8001542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001548:	4413      	add	r3, r2
 800154a:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800154c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001552:	e1b6      	b.n	80018c2 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800156c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8001572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8001578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 800157e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8001584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 800158a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8001590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8001596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 800159c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80015a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80015a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80015ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80015b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	603a      	str	r2, [r7, #0]
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c6:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80015ca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80015ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	1d1a      	adds	r2, r3, #4
 80015d6:	603a      	str	r2, [r7, #0]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 80015e0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	1d1a      	adds	r2, r3, #4
 80015ec:	603a      	str	r2, [r7, #0]
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 80015f6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80015fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	1d1a      	adds	r2, r3, #4
 8001602:	603a      	str	r2, [r7, #0]
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800160c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001610:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001618:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800161c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001620:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800162c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001630:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800163c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001640:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001648:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800164c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001650:	edd7 7a02 	vldr	s15, [r7, #8]
 8001654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001656:	1d1a      	adds	r2, r3, #4
 8001658:	67fa      	str	r2, [r7, #124]	; 0x7c
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8001662:	ed97 7a07 	vldr	s14, [r7, #28]
 8001666:	edd7 7a03 	vldr	s15, [r7, #12]
 800166a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800166c:	1d1a      	adds	r2, r3, #4
 800166e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8001678:	ed97 7a08 	vldr	s14, [r7, #32]
 800167c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001682:	1d1a      	adds	r2, r3, #4
 8001684:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800168e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001692:	edd7 7a05 	vldr	s15, [r7, #20]
 8001696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001698:	1d1a      	adds	r2, r3, #4
 800169a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80016a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80016a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80016b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80016c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80016c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80016d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80016d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 80016e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016e6:	1d1a      	adds	r2, r3, #4
 80016e8:	673a      	str	r2, [r7, #112]	; 0x70
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80016ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f0:	1d1a      	adds	r2, r3, #4
 80016f2:	673a      	str	r2, [r7, #112]	; 0x70
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80016f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001708:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800170c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001718:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800171c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8001728:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800172c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001734:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8001738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	677a      	str	r2, [r7, #116]	; 0x74
 800173e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001742:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 800174e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001750:	1d1a      	adds	r2, r3, #4
 8001752:	677a      	str	r2, [r7, #116]	; 0x74
 8001754:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001758:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8001774:	edd7 7a03 	vldr	s15, [r7, #12]
 8001778:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8001784:	edd7 7a03 	vldr	s15, [r7, #12]
 8001788:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8001794:	edd7 7a02 	vldr	s15, [r7, #8]
 8001798:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80017a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a6:	1d1a      	adds	r2, r3, #4
 80017a8:	67ba      	str	r2, [r7, #120]	; 0x78
 80017aa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017ae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b6:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80017ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017bc:	1d1a      	adds	r2, r3, #4
 80017be:	67ba      	str	r2, [r7, #120]	; 0x78
 80017c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80017d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d2:	1d1a      	adds	r2, r3, #4
 80017d4:	673a      	str	r2, [r7, #112]	; 0x70
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80017da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017dc:	1d1a      	adds	r2, r3, #4
 80017de:	673a      	str	r2, [r7, #112]	; 0x70
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 80017e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017e8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80017f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017f8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8001804:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001808:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8001814:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001818:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8001824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	677a      	str	r2, [r7, #116]	; 0x74
 800182a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800182e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800183a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800183c:	1d1a      	adds	r2, r3, #4
 800183e:	677a      	str	r2, [r7, #116]	; 0x74
 8001840:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001844:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184c:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8001850:	edd7 7a04 	vldr	s15, [r7, #16]
 8001854:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001860:	edd7 7a05 	vldr	s15, [r7, #20]
 8001864:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001870:	edd7 7a05 	vldr	s15, [r7, #20]
 8001874:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001880:	edd7 7a04 	vldr	s15, [r7, #16]
 8001884:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	67ba      	str	r2, [r7, #120]	; 0x78
 8001896:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800189a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800189e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a2:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80018a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a8:	1d1a      	adds	r2, r3, #4
 80018aa:	67ba      	str	r2, [r7, #120]	; 0x78
 80018ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80018bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018be:	3b01      	subs	r3, #1
 80018c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f ae45 	bne.w	8001554 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80018ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018cc:	b299      	uxth	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	2302      	movs	r3, #2
 80018d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80018d6:	f000 fedb 	bl	8002690 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80018da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018dc:	b299      	uxth	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2302      	movs	r3, #2
 80018e4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80018e6:	f000 fed3 	bl	8002690 <arm_radix8_butterfly_f32>
}
 80018ea:	bf00      	nop
 80018ec:	3780      	adds	r7, #128	; 0x80
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b0ac      	sub	sp, #176	; 0xb0
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	4413      	add	r3, r2
 8001912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001920:	4413      	add	r3, r2
 8001922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001930:	4413      	add	r3, r2
 8001932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800193a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193e:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001944:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800194a:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800194c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001950:	3b04      	subs	r3, #4
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800195a:	3b04      	subs	r3, #4
 800195c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001964:	3b04      	subs	r3, #4
 8001966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800196a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001974:	4413      	add	r3, r2
 8001976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001986:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800198a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800198e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80019a0:	2304      	movs	r3, #4
 80019a2:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80019a4:	2306      	movs	r3, #6
 80019a6:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	ed93 7a00 	vldr	s14, [r3]
 80019ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	ed93 7a00 	vldr	s14, [r3]
 80019c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3304      	adds	r3, #4
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019e0:	3304      	adds	r3, #4
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3304      	adds	r3, #4
 80019f2:	ed93 7a00 	vldr	s14, [r3]
 80019f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019fa:	3304      	adds	r3, #4
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a1e:	3304      	adds	r3, #4
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a70:	3304      	adds	r3, #4
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a82:	3304      	adds	r3, #4
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8c:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a94:	3304      	adds	r3, #4
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad0:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	1d1a      	adds	r2, r3, #4
 8001af0:	603a      	str	r2, [r7, #0]
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001afe:	3304      	adds	r3, #4
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b10:	3304      	adds	r3, #4
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	1d1a      	adds	r2, r3, #4
 8001b1a:	603a      	str	r2, [r7, #0]
 8001b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b20:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b30:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b36:	1d1a      	adds	r2, r3, #4
 8001b38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b44:	1d1a      	adds	r2, r3, #4
 8001b46:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b60:	1d1a      	adds	r2, r3, #4
 8001b62:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b6e:	1d1a      	adds	r2, r3, #4
 8001b70:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001b80:	4413      	add	r3, r2
 8001b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b8e:	4413      	add	r3, r2
 8001b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ba6:	3b02      	subs	r3, #2
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bae:	e31a      	b.n	80021e6 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3304      	adds	r3, #4
 8001be0:	ed93 7a00 	vldr	s14, [r3]
 8001be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001be8:	3304      	adds	r3, #4
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	ed93 7a00 	vldr	s14, [r3]
 8001bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c02:	3304      	adds	r3, #4
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c14:	3304      	adds	r3, #4
 8001c16:	ed93 7a00 	vldr	s14, [r3]
 8001c1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c26:	3304      	adds	r3, #4
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c78:	3304      	adds	r3, #4
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c94:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cae:	3304      	adds	r3, #4
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb8:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc0:	ed93 7a00 	vldr	s14, [r3]
 8001cc4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	1d1a      	adds	r2, r3, #4
 8001cf8:	603a      	str	r2, [r7, #0]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d06:	3304      	adds	r3, #4
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d18:	3304      	adds	r3, #4
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	1d1a      	adds	r2, r3, #4
 8001d22:	603a      	str	r2, [r7, #0]
 8001d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d28:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d30:	3b04      	subs	r3, #4
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d4c:	3b04      	subs	r3, #4
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d56:	3b04      	subs	r3, #4
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d68:	ed93 7a00 	vldr	s14, [r3]
 8001d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d98:	ed93 7a00 	vldr	s14, [r3]
 8001d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dcc:	3b04      	subs	r3, #4
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dec:	3b04      	subs	r3, #4
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001df6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e40:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e48:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001e4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e50:	3b04      	subs	r3, #4
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e64:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6c:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e74:	ed93 7a00 	vldr	s14, [r3]
 8001e78:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e8c:	1f1a      	subs	r2, r3, #4
 8001e8e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e96:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eb0:	3b04      	subs	r3, #4
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eba:	1f1a      	subs	r2, r3, #4
 8001ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec4:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ecc:	1d1a      	adds	r2, r3, #4
 8001ece:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001ed6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eda:	1d1a      	adds	r2, r3, #4
 8001edc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001ee4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ee8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001ef4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ef8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001f04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001f14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001f2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f42:	1d1a      	adds	r2, r3, #4
 8001f44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001f48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f4c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f54:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8001f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8001f68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f74:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8001f78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8001f88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8001f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f9c:	1f1a      	subs	r2, r3, #4
 8001f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fa2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001fa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fae:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8001fb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fb6:	1f1a      	subs	r2, r3, #4
 8001fb8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc8:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8001fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8001fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8001fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8001fea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8001ffa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ffe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 800200a:	edd7 7a08 	vldr	s15, [r7, #32]
 800200e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002016:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 800201a:	edd7 7a07 	vldr	s15, [r7, #28]
 800201e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002026:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 800202a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002034:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002038:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8002044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002048:	1d1a      	adds	r2, r3, #4
 800204a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800204e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002052:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 800205e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002062:	eef1 7a67 	vneg.f32	s15, s15
 8002066:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8002072:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002076:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8002082:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002086:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8002092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002096:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 80020a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a6:	1f1a      	subs	r2, r3, #4
 80020a8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80020bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020c0:	1f1a      	subs	r2, r3, #4
 80020c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80020ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d2:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 80020d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 80020de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 80020e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020ee:	4413      	add	r3, r2
 80020f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 80020f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80020fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002100:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8002104:	edd7 7a04 	vldr	s15, [r7, #16]
 8002108:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8002114:	edd7 7a04 	vldr	s15, [r7, #16]
 8002118:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8002124:	edd7 7a03 	vldr	s15, [r7, #12]
 8002128:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8002134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002138:	1d1a      	adds	r2, r3, #4
 800213a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800213e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002142:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 800214e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002152:	1d1a      	adds	r2, r3, #4
 8002154:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002158:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800215c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002164:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002168:	edd7 7a06 	vldr	s15, [r7, #24]
 800216c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002174:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8002178:	edd7 7a05 	vldr	s15, [r7, #20]
 800217c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002184:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8002188:	edd7 7a05 	vldr	s15, [r7, #20]
 800218c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8002198:	edd7 7a06 	vldr	s15, [r7, #24]
 800219c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 80021a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021ac:	1f1a      	subs	r2, r3, #4
 80021ae:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80021b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80021c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021c6:	1f1a      	subs	r2, r3, #4
 80021c8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80021cc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80021d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d8:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80021dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e0:	3b01      	subs	r3, #1
 80021e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f47f ace0 	bne.w	8001bb0 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002202:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002218:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	3304      	adds	r3, #4
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002228:	3304      	adds	r3, #4
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	3304      	adds	r3, #4
 800223a:	ed93 7a00 	vldr	s14, [r3]
 800223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002242:	3304      	adds	r3, #4
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002254:	3304      	adds	r3, #4
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800225e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002266:	3304      	adds	r3, #4
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002270:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002280:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80022a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80022b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022b8:	3304      	adds	r3, #4
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80022c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ca:	3304      	adds	r3, #4
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80022d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022dc:	3304      	adds	r3, #4
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80022e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ee:	3304      	adds	r3, #4
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80022fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002300:	ed93 7a00 	vldr	s14, [r3]
 8002304:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800231c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002320:	ed93 7a00 	vldr	s14, [r3]
 8002324:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	1d1a      	adds	r2, r3, #4
 8002338:	603a      	str	r2, [r7, #0]
 800233a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002346:	3304      	adds	r3, #4
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002358:	3304      	adds	r3, #4
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	1d1a      	adds	r2, r3, #4
 8002362:	603a      	str	r2, [r7, #0]
 8002364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002368:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 800236c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8002374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800237c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002380:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800238c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002390:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800239c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80023ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80023bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c0:	1d1a      	adds	r2, r3, #4
 80023c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80023c6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80023d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80023e0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80023e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ec:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 80023f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80023f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002400:	edd7 7a07 	vldr	s15, [r7, #28]
 8002404:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002410:	edd7 7a08 	vldr	s15, [r7, #32]
 8002414:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002420:	edd7 7a08 	vldr	s15, [r7, #32]
 8002424:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002430:	edd7 7a07 	vldr	s15, [r7, #28]
 8002434:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800244a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800244e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800245a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002464:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002468:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800246c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002470:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8002474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800247c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8002484:	edd7 7a03 	vldr	s15, [r7, #12]
 8002488:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8002494:	edd7 7a04 	vldr	s15, [r7, #16]
 8002498:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800249c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80024a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024a8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80024b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80024c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024c8:	1d1a      	adds	r2, r3, #4
 80024ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80024d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80024de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024e8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80024ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80024f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024fc:	b299      	uxth	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	2304      	movs	r3, #4
 8002504:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002506:	f000 f8c3 	bl	8002690 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250e:	b299      	uxth	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	2304      	movs	r3, #4
 8002516:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002518:	f000 f8ba 	bl	8002690 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800251c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002520:	b299      	uxth	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	2304      	movs	r3, #4
 8002528:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800252a:	f000 f8b1 	bl	8002690 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800252e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002532:	b299      	uxth	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	2304      	movs	r3, #4
 800253a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800253c:	f000 f8a8 	bl	8002690 <arm_radix8_butterfly_f32>
}
 8002540:	bf00      	nop
 8002542:	37b0      	adds	r7, #176	; 0xb0
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	460b      	mov	r3, r1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	4613      	mov	r3, r2
 800255c:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d117      	bne.n	800259a <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3304      	adds	r3, #4
 800256e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e00d      	b.n	8002592 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	eef1 7a67 	vneg.f32	s15, s15
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	3308      	adds	r3, #8
 800258a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3ed      	bcc.n	8002576 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a0:	d024      	beq.n	80025ec <arm_cfft_f32+0xa4>
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	d80b      	bhi.n	80025c0 <arm_cfft_f32+0x78>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d01f      	beq.n	80025ec <arm_cfft_f32+0xa4>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d802      	bhi.n	80025b6 <arm_cfft_f32+0x6e>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d016      	beq.n	80025e2 <arm_cfft_f32+0x9a>
 80025b4:	e028      	b.n	8002608 <arm_cfft_f32+0xc0>
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d01d      	beq.n	80025f6 <arm_cfft_f32+0xae>
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d011      	beq.n	80025e2 <arm_cfft_f32+0x9a>
 80025be:	e023      	b.n	8002608 <arm_cfft_f32+0xc0>
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d00d      	beq.n	80025e2 <arm_cfft_f32+0x9a>
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d803      	bhi.n	80025d4 <arm_cfft_f32+0x8c>
 80025cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d0:	d011      	beq.n	80025f6 <arm_cfft_f32+0xae>
 80025d2:	e019      	b.n	8002608 <arm_cfft_f32+0xc0>
 80025d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d8:	d008      	beq.n	80025ec <arm_cfft_f32+0xa4>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	d00a      	beq.n	80025f6 <arm_cfft_f32+0xae>
 80025e0:	e012      	b.n	8002608 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7fe ff90 	bl	800150a <arm_cfft_radix8by2_f32>
        break;
 80025ea:	e00d      	b.n	8002608 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff f97f 	bl	80018f2 <arm_cfft_radix8by4_f32>
        break;
 80025f4:	e008      	b.n	8002608 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	b299      	uxth	r1, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	2301      	movs	r3, #1
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	f000 f845 	bl	8002690 <arm_radix8_butterfly_f32>
        break;
 8002606:	bf00      	nop
    }  

    if( bitReverseFlag )
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8999      	ldrh	r1, [r3, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	461a      	mov	r2, r3
 8002618:	68b8      	ldr	r0, [r7, #8]
 800261a:	f7fd fdd5 	bl	80001c8 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d130      	bne.n	8002686 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800262e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002636:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e01c      	b.n	800267e <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	61ba      	str	r2, [r7, #24]
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002656:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	eeb1 7a67 	vneg.f32	s14, s15
 8002664:	edd7 7a04 	vldr	s15, [r7, #16]
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	3304      	adds	r3, #4
 8002676:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d3de      	bcc.n	8002644 <arm_cfft_f32+0xfc>
        }
    }
}
 8002686:	bf00      	nop
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002690:	b480      	push	{r7}
 8002692:	b0bd      	sub	sp, #244	; 0xf4
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	461a      	mov	r2, r3
 800269c:	460b      	mov	r3, r1
 800269e:	817b      	strh	r3, [r7, #10]
 80026a0:	4613      	mov	r3, r2
 80026a2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <arm_radix8_butterfly_f32+0x3c>)
 80026a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80026b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026c8:	e002      	b.n	80026d0 <arm_radix8_butterfly_f32+0x40>
 80026ca:	bf00      	nop
 80026cc:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 80026d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d8:	4413      	add	r3, r2
 80026da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80026de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80026e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e6:	4413      	add	r3, r2
 80026e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80026ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f4:	4413      	add	r3, r2
 80026f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80026fa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	4413      	add	r3, r2
 8002704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002708:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800270c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002710:	4413      	add	r3, r2
 8002712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002716:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	4413      	add	r3, r2
 8002720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272c:	4413      	add	r3, r2
 800272e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	ed93 7a00 	vldr	s14, [r3]
 8002740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002776:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800277a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	ed93 7a00 	vldr	s14, [r3]
 8002788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800279e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80027c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	ed93 7a00 	vldr	s14, [r3]
 80027d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80027e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002806:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800280a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800282e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002852:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002856:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800285a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002862:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002866:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002872:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002876:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800287a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002882:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002886:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 8002892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028a0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80028ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028ba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80028c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	3304      	adds	r3, #4
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	3304      	adds	r3, #4
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80028ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3304      	adds	r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3304      	adds	r3, #4
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3304      	adds	r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3304      	adds	r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800293e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3304      	adds	r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	ed93 7a00 	vldr	s14, [r3]
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002962:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002966:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	3304      	adds	r3, #4
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3304      	adds	r3, #4
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800298e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	3304      	adds	r3, #4
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	3304      	adds	r3, #4
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80029b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3304      	adds	r3, #4
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	3304      	adds	r3, #4
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80029de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	3304      	adds	r3, #4
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	3304      	adds	r3, #4
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002a06:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a12:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002a16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a1a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a22:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002a26:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002a2a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a32:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002a36:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002a3a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002a46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a56:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	3304      	adds	r3, #4
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a72:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002a7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002a8c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002aa6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002ab2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	3304      	adds	r3, #4
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ac2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ade:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002aea:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002aee:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002b02:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002b06:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b16:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002b1a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b1e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b26:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002b32:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b36:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b46:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002b4a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002b4e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b56:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002b5a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002b5e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002b6a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002b6e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b76:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002b7a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002b7e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b86:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002b8a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002b8e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b96:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002b9a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002b9e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002baa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002bae:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002bba:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002bbe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002bd8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002be4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002bf2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c0c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c26:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	3304      	adds	r3, #4
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c42:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	3304      	adds	r3, #4
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4413      	add	r3, r2
 8002c5a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c5e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c66:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3304      	adds	r3, #4
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002c7a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c82:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002c96:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 8002ca2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002caa:	4413      	add	r3, r2
 8002cac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	f4ff ad0a 	bcc.w	80026d0 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8002cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	f240 84e3 	bls.w	800368c <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002cd2:	893b      	ldrh	r3, [r7, #8]
 8002cd4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002cd8:	4413      	add	r3, r2
 8002cda:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002ce2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002ce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce8:	4413      	add	r3, r2
 8002cea:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002cec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf0:	4413      	add	r3, r2
 8002cf2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002cf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf8:	4413      	add	r3, r2
 8002cfa:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002cfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d00:	4413      	add	r3, r2
 8002d02:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d08:	4413      	add	r3, r2
 8002d0a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002d0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d10:	4413      	add	r3, r2
 8002d12:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002d14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002d52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002d6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3304      	adds	r3, #4
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	3304      	adds	r3, #4
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3304      	adds	r3, #4
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	3304      	adds	r3, #4
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8002dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8002dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002dd6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dde:	4413      	add	r3, r2
 8002de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002de4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	4413      	add	r3, r2
 8002dee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002e00:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e08:	4413      	add	r3, r2
 8002e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e16:	4413      	add	r3, r2
 8002e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002e1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e24:	4413      	add	r3, r2
 8002e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002e2a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	4413      	add	r3, r2
 8002e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002e38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002e5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	ed93 7a00 	vldr	s14, [r3]
 8002eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002ec8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	ed93 7a00 	vldr	s14, [r3]
 8002ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002eec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	ed93 7a00 	vldr	s14, [r3]
 8002f1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002f58:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002f5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002f68:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002f6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f74:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002f78:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002f7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f84:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002f88:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002f8c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fa6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002fb2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fb6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002fc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	3304      	adds	r3, #4
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3304      	adds	r3, #4
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	ed93 7a00 	vldr	s14, [r3]
 8002ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3304      	adds	r3, #4
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3304      	adds	r3, #4
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3304      	adds	r3, #4
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003036:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800303a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3304      	adds	r3, #4
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	ed93 7a00 	vldr	s14, [r3]
 800304a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	3304      	adds	r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003062:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	3304      	adds	r3, #4
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	ed93 7a00 	vldr	s14, [r3]
 8003072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3304      	adds	r3, #4
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003086:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800308a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3304      	adds	r3, #4
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3304      	adds	r3, #4
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ae:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80030b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3304      	adds	r3, #4
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	ed93 7a00 	vldr	s14, [r3]
 80030c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3304      	adds	r3, #4
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80030da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	3304      	adds	r3, #4
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	ed93 7a00 	vldr	s14, [r3]
 80030ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3304      	adds	r3, #4
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8003102:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003106:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800310a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8003112:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003116:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800311a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8003122:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003126:	edd7 7a08 	vldr	s15, [r7, #32]
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8003132:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003136:	edd7 7a08 	vldr	s15, [r7, #32]
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8003142:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003146:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8003152:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003156:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800315a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8003162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3304      	adds	r3, #4
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003172:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800317e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003182:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800318e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003192:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800319e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80031a2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80031a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031aa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 80031ae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031b2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80031be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80031c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 80031ce:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 80031de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80031e2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80031ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80031fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003204:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	3304      	adds	r3, #4
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	ed97 7a05 	vldr	s14, [r7, #20]
 8003218:	edd7 7a04 	vldr	s15, [r7, #16]
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8003224:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003228:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8003234:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003238:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800323c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003240:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8003244:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003248:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800324c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003250:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8003254:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003258:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8003264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003272:	edd7 7a06 	vldr	s15, [r7, #24]
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800327e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3304      	adds	r3, #4
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	ed97 7a05 	vldr	s14, [r7, #20]
 800328e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003296:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800329a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800329e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80032aa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032ae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80032ba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80032be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80032ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032ce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80032da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80032f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	3304      	adds	r3, #4
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	ed97 7a05 	vldr	s14, [r7, #20]
 8003304:	edd7 7a04 	vldr	s15, [r7, #16]
 8003308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003310:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003314:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003324:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003328:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800332c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003334:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003340:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003344:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003354:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003358:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800335c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003370:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003374:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003380:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003384:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003390:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003394:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800339c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80033a0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80033a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80033a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ac:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80033b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80033b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80033c0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80033c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80033d0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80033d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80033e0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80033e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80033f0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80033f4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80033f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003400:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003404:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003410:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003414:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003420:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003424:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003430:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003434:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003440:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003444:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003450:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003454:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003460:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003464:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003470:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003474:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003480:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003484:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003490:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003494:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80034a0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80034a4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80034a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ac:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80034b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80034be:	edd7 7a06 	vldr	s15, [r7, #24]
 80034c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80034ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	3304      	adds	r3, #4
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4413      	add	r3, r2
 80034d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80034da:	edd7 7a04 	vldr	s15, [r7, #16]
 80034de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80034e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80034ea:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80034f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003506:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800350a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003512:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003516:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800351a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	ed97 7a07 	vldr	s14, [r7, #28]
 8003534:	edd7 7a06 	vldr	s15, [r7, #24]
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	3304      	adds	r3, #4
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003550:	edd7 7a04 	vldr	s15, [r7, #16]
 8003554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003558:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800355c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003560:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003568:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800356c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003570:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800357c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003580:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003588:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800358c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003590:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003598:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800359c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4413      	add	r3, r2
 80035a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80035aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80035b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	3304      	adds	r3, #4
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80035c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ce:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80035d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80035d6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80035e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80035ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ee:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80035f2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80035f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003602:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003606:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003620:	edd7 7a06 	vldr	s15, [r7, #24]
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800362c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	3304      	adds	r3, #4
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	ed97 7a05 	vldr	s14, [r7, #20]
 800363c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003644:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 8003648:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800364c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003650:	4413      	add	r3, r2
 8003652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800365c:	429a      	cmp	r2, r3
 800365e:	f4ff abba 	bcc.w	8002dd6 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	3301      	adds	r3, #1
 8003668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800366c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	429a      	cmp	r2, r3
 8003676:	f4ff ab2c 	bcc.w	8002cd2 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800367a:	893b      	ldrh	r3, [r7, #8]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	2b07      	cmp	r3, #7
 8003686:	f63f a813 	bhi.w	80026b0 <arm_radix8_butterfly_f32+0x20>
}
 800368a:	e000      	b.n	800368e <arm_radix8_butterfly_f32+0xffe>
         break;
 800368c:	bf00      	nop
}
 800368e:	bf00      	nop
 8003690:	37f4      	adds	r7, #244	; 0xf4
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop

0800369c <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	460a      	mov	r2, r1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	2b3f      	cmp	r3, #63	; 0x3f
 80036b0:	d901      	bls.n	80036b6 <writeRegister+0x1a>
		address = 63;
 80036b2:	233f      	movs	r3, #63	; 0x3f
 80036b4:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2110      	movs	r1, #16
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <writeRegister+0x58>)
 80036c6:	f003 fa5d 	bl	8006b84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 80036ca:	1df9      	adds	r1, r7, #7
 80036cc:	2364      	movs	r3, #100	; 0x64
 80036ce:	2201      	movs	r2, #1
 80036d0:	4809      	ldr	r0, [pc, #36]	; (80036f8 <writeRegister+0x5c>)
 80036d2:	f003 ff73 	bl	80075bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,100);
 80036d6:	1db9      	adds	r1, r7, #6
 80036d8:	2364      	movs	r3, #100	; 0x64
 80036da:	2201      	movs	r2, #1
 80036dc:	4806      	ldr	r0, [pc, #24]	; (80036f8 <writeRegister+0x5c>)
 80036de:	f003 ff6d 	bl	80075bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80036e2:	2201      	movs	r2, #1
 80036e4:	2110      	movs	r1, #16
 80036e6:	4803      	ldr	r0, [pc, #12]	; (80036f4 <writeRegister+0x58>)
 80036e8:	f003 fa4c 	bl	8006b84 <HAL_GPIO_WritePin>
	

}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40020000 	.word	0x40020000
 80036f8:	2000e5ac 	.word	0x2000e5ac

080036fc <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	71fb      	strb	r3, [r7, #7]
 8003708:	4613      	mov	r3, r2
 800370a:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	2b3f      	cmp	r3, #63	; 0x3f
 8003710:	d901      	bls.n	8003716 <readRegister+0x1a>
		address = 63;
 8003712:	233f      	movs	r3, #63	; 0x3f
 8003714:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 8003716:	79bb      	ldrb	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d905      	bls.n	8003728 <readRegister+0x2c>
		address |= 0x40;
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003722:	b2db      	uxtb	r3, r3
 8003724:	71fb      	strb	r3, [r7, #7]
 8003726:	e004      	b.n	8003732 <readRegister+0x36>
		else	
		address &= ~(0x40);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372e:	b2db      	uxtb	r3, r3
 8003730:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003738:	b2db      	uxtb	r3, r3
 800373a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800373c:	2200      	movs	r2, #0
 800373e:	2110      	movs	r1, #16
 8003740:	480c      	ldr	r0, [pc, #48]	; (8003774 <readRegister+0x78>)
 8003742:	f003 fa1f 	bl	8006b84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 8003746:	1df9      	adds	r1, r7, #7
 8003748:	2364      	movs	r3, #100	; 0x64
 800374a:	2201      	movs	r2, #1
 800374c:	480a      	ldr	r0, [pc, #40]	; (8003778 <readRegister+0x7c>)
 800374e:	f003 ff35 	bl	80075bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,100);
 8003752:	79bb      	ldrb	r3, [r7, #6]
 8003754:	b29a      	uxth	r2, r3
 8003756:	2364      	movs	r3, #100	; 0x64
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	4807      	ldr	r0, [pc, #28]	; (8003778 <readRegister+0x7c>)
 800375c:	f004 f862 	bl	8007824 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8003760:	2201      	movs	r2, #1
 8003762:	2110      	movs	r1, #16
 8003764:	4803      	ldr	r0, [pc, #12]	; (8003774 <readRegister+0x78>)
 8003766:	f003 fa0d 	bl	8006b84 <HAL_GPIO_WritePin>
	
	
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40020000 	.word	0x40020000
 8003778:	2000e5ac 	.word	0x2000e5ac

0800377c <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
void adxlBW(ADXL_InitTypeDef * adxl)
		{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	4619      	mov	r1, r3
 800378c:	202c      	movs	r0, #44	; 0x2c
 800378e:	f7ff ff85 	bl	800369c <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	789b      	ldrb	r3, [r3, #2]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d11a      	bne.n	80037d0 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	f043 0310 	orr.w	r3, r3, #16
 80037a0:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	78db      	ldrb	r3, [r3, #3]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d807      	bhi.n	80037ba <adxlBW+0x3e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	78db      	ldrb	r3, [r3, #3]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d903      	bls.n	80037ba <adxlBW+0x3e>
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	3307      	adds	r3, #7
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e004      	b.n	80037c4 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	78da      	ldrb	r2, [r3, #3]
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	4413      	add	r3, r2
 80037c2:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	4619      	mov	r1, r3
 80037c8:	202c      	movs	r0, #44	; 0x2c
 80037ca:	f7ff ff67 	bl	800369c <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 80037ce:	e015      	b.n	80037fc <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	78db      	ldrb	r3, [r3, #3]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d807      	bhi.n	80037e8 <adxlBW+0x6c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	78db      	ldrb	r3, [r3, #3]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d903      	bls.n	80037e8 <adxlBW+0x6c>
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	3306      	adds	r3, #6
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e004      	b.n	80037f2 <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	78da      	ldrb	r2, [r3, #3]
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	4413      	add	r3, r2
 80037f0:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	4619      	mov	r1, r3
 80037f6:	202c      	movs	r0, #44	; 0x2c
 80037f8:	f7ff ff50 	bl	800369c <writeRegister>
		}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	4619      	mov	r1, r3
 8003814:	2031      	movs	r0, #49	; 0x31
 8003816:	f7ff ff41 	bl	800369c <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	019b      	lsls	r3, r3, #6
 8003820:	b25a      	sxtb	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	b25b      	sxtb	r3, r3
 800382a:	4313      	orrs	r3, r2
 800382c:	b25a      	sxtb	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	799b      	ldrb	r3, [r3, #6]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	b25b      	sxtb	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b25a      	sxtb	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	795b      	ldrb	r3, [r3, #5]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	b25b      	sxtb	r3, r3
 8003842:	4313      	orrs	r3, r2
 8003844:	b25b      	sxtb	r3, r3
 8003846:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	791a      	ldrb	r2, [r3, #4]
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	4413      	add	r3, r2
 8003850:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	4619      	mov	r1, r3
 8003856:	2031      	movs	r0, #49	; 0x31
 8003858:	f7ff ff20 	bl	800369c <writeRegister>
			}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl, uint8_t * id)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	delay_init(16);
 800386e:	2010      	movs	r0, #16
 8003870:	f000 fcc2 	bl	80041f8 <delay_init>
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8003874:	2201      	movs	r2, #1
 8003876:	2110      	movs	r1, #16
 8003878:	4849      	ldr	r0, [pc, #292]	; (80039a0 <ADXL_Init+0x13c>)
 800387a:	f003 f983 	bl	8006b84 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	delay_us(10);
 800387e:	200a      	movs	r0, #10
 8003880:	f000 fce2 	bl	8004248 <delay_us>
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID, id,1);
 8003884:	2201      	movs	r2, #1
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	2000      	movs	r0, #0
 800388a:	f7ff ff37 	bl	80036fc <readRegister>
	delay_us(10);
 800388e:	200a      	movs	r0, #10
 8003890:	f000 fcda 	bl	8004248 <delay_us>

	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff71 	bl	800377c <adxlBW>
	adxlFormat(adxl);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ffb2 	bl	8003804 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	795b      	ldrb	r3, [r3, #5]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d140      	bne.n	800392a <ADXL_Init+0xc6>
			{
			switch (adxl->Range) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	791b      	ldrb	r3, [r3, #4]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d847      	bhi.n	8003940 <ADXL_Init+0xdc>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <ADXL_Init+0x54>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	08003911 	.word	0x08003911
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <ADXL_Init+0x140>)
 80038ca:	4a37      	ldr	r2, [pc, #220]	; (80039a8 <ADXL_Init+0x144>)
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <ADXL_Init+0x140>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a36      	ldr	r2, [pc, #216]	; (80039ac <ADXL_Init+0x148>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b35      	ldr	r3, [pc, #212]	; (80039ac <ADXL_Init+0x148>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a35      	ldr	r2, [pc, #212]	; (80039b0 <ADXL_Init+0x14c>)
 80038dc:	6013      	str	r3, [r2, #0]
								break;
 80038de:	e02f      	b.n	8003940 <ADXL_Init+0xdc>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 80038e0:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <ADXL_Init+0x140>)
 80038e2:	4a34      	ldr	r2, [pc, #208]	; (80039b4 <ADXL_Init+0x150>)
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <ADXL_Init+0x140>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a30      	ldr	r2, [pc, #192]	; (80039ac <ADXL_Init+0x148>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <ADXL_Init+0x148>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <ADXL_Init+0x14c>)
 80038f4:	6013      	str	r3, [r2, #0]
								break;
 80038f6:	e023      	b.n	8003940 <ADXL_Init+0xdc>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <ADXL_Init+0x140>)
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <ADXL_Init+0x154>)
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <ADXL_Init+0x140>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <ADXL_Init+0x148>)
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <ADXL_Init+0x148>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <ADXL_Init+0x14c>)
 800390c:	6013      	str	r3, [r2, #0]
								break;
 800390e:	e017      	b.n	8003940 <ADXL_Init+0xdc>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <ADXL_Init+0x140>)
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <ADXL_Init+0x158>)
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <ADXL_Init+0x140>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a24      	ldr	r2, [pc, #144]	; (80039ac <ADXL_Init+0x148>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <ADXL_Init+0x148>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <ADXL_Init+0x14c>)
 8003924:	6013      	str	r3, [r2, #0]
								break;
 8003926:	bf00      	nop
 8003928:	e00a      	b.n	8003940 <ADXL_Init+0xdc>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <ADXL_Init+0x140>)
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <ADXL_Init+0x144>)
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <ADXL_Init+0x140>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <ADXL_Init+0x148>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <ADXL_Init+0x148>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <ADXL_Init+0x14c>)
 800393e:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8003940:	f107 030f 	add.w	r3, r7, #15
 8003944:	2201      	movs	r2, #1
 8003946:	4619      	mov	r1, r3
 8003948:	202d      	movs	r0, #45	; 0x2d
 800394a:	f7ff fed7 	bl	80036fc <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	79db      	ldrb	r3, [r3, #7]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <ADXL_Init+0xfe>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	f043 0310 	orr.w	r3, r3, #16
 800395c:	b2db      	uxtb	r3, r3
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	e004      	b.n	800396c <ADXL_Init+0x108>
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	f023 0310 	bic.w	r3, r3, #16
 8003968:	b2db      	uxtb	r3, r3
 800396a:	73fb      	strb	r3, [r7, #15]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7a1b      	ldrb	r3, [r3, #8]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <ADXL_Init+0x11c>
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	f043 0320 	orr.w	r3, r3, #32
 800397a:	b2db      	uxtb	r3, r3
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e004      	b.n	800398a <ADXL_Init+0x126>
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	f023 0320 	bic.w	r3, r3, #32
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73fb      	strb	r3, [r7, #15]
			writeRegister(POWER_CTL,reg);
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	4619      	mov	r1, r3
 800398e:	202d      	movs	r0, #45	; 0x2d
 8003990:	f7ff fe84 	bl	800369c <writeRegister>
			

			//writeRegister(INT_ENABLE, 0x80);

	return ADXL_OK;
 8003994:	2300      	movs	r3, #0
	
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40020000 	.word	0x40020000
 80039a4:	200000c4 	.word	0x200000c4
 80039a8:	3b808081 	.word	0x3b808081
 80039ac:	200000c0 	.word	0x200000c0
 80039b0:	200000bc 	.word	0x200000bc
 80039b4:	3c010204 	.word	0x3c010204
 80039b8:	3c820821 	.word	0x3c820821
 80039bc:	3d042108 	.word	0x3d042108

080039c0 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80039ca:	f107 030f 	add.w	r3, r7, #15
 80039ce:	2201      	movs	r2, #1
 80039d0:	4619      	mov	r1, r3
 80039d2:	202d      	movs	r0, #45	; 0x2d
 80039d4:	f7ff fe92 	bl	80036fc <readRegister>
			switch (s) {
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <ADXL_Measure+0x24>
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d010      	beq.n	8003a04 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 80039e2:	e01a      	b.n	8003a1a <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	f023 0304 	bic.w	r3, r3, #4
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	f043 0308 	orr.w	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	4619      	mov	r1, r3
 80039fc:	202d      	movs	r0, #45	; 0x2d
 80039fe:	f7ff fe4d 	bl	800369c <writeRegister>
				break;
 8003a02:	e00a      	b.n	8003a1a <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	f023 0308 	bic.w	r3, r3, #8
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4619      	mov	r1, r3
 8003a12:	202d      	movs	r0, #45	; 0x2d
 8003a14:	f7ff fe42 	bl	800369c <writeRegister>
				break;				
 8003a18:	bf00      	nop
		}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <ADXL_IntProto>:
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/

void ADXL_IntProto(void)
	
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
			uint8_t reg=0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	71fb      	strb	r3, [r7, #7]
			readRegister(INT_SOURCE,&reg,1);
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4619      	mov	r1, r3
 8003a32:	2030      	movs	r0, #48	; 0x30
 8003a34:	f7ff fe62 	bl	80036fc <readRegister>
	
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <BLE_USART>:
extern Sv Zstatistic_value;
/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	b0a1      	sub	sp, #132	; 0x84
 8003a46:	af12      	add	r7, sp, #72	; 0x48
 8003a48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a4a:	62b9      	str	r1, [r7, #40]	; 0x28
	if(USARTBLE.sendflag ==1)
 8003a4c:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <BLE_USART+0x19c>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80be 	beq.w	8003bd2 <BLE_USART+0x192>
	{


		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
		Xstatistic_value.Statistic_FreqOvall * 1000, Xstatistic_value.Statistic_SpeedOvall * 1000, Xstatistic_value.Statistic_p2p * 1000
 8003a56:	4b62      	ldr	r3, [pc, #392]	; (8003be0 <BLE_USART+0x1a0>)
 8003a58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003a5c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003be4 <BLE_USART+0x1a4>
 8003a60:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003a64:	ee17 0a90 	vmov	r0, s15
 8003a68:	f7fc fd7a 	bl	8000560 <__aeabi_f2d>
 8003a6c:	e9c7 0108 	strd	r0, r1, [r7, #32]
		Xstatistic_value.Statistic_FreqOvall * 1000, Xstatistic_value.Statistic_SpeedOvall * 1000, Xstatistic_value.Statistic_p2p * 1000
 8003a70:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <BLE_USART+0x1a0>)
 8003a72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a76:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003be4 <BLE_USART+0x1a4>
 8003a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003a7e:	ee17 0a90 	vmov	r0, s15
 8003a82:	f7fc fd6d 	bl	8000560 <__aeabi_f2d>
 8003a86:	e9c7 0106 	strd	r0, r1, [r7, #24]
		Xstatistic_value.Statistic_FreqOvall * 1000, Xstatistic_value.Statistic_SpeedOvall * 1000, Xstatistic_value.Statistic_p2p * 1000
 8003a8a:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <BLE_USART+0x1a0>)
 8003a8c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003a90:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003be4 <BLE_USART+0x1a4>
 8003a94:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003a98:	ee17 0a90 	vmov	r0, s15
 8003a9c:	f7fc fd60 	bl	8000560 <__aeabi_f2d>
 8003aa0:	e9c7 0104 	strd	r0, r1, [r7, #16]
		, Ystatistic_value.Statistic_FreqOvall * 1000, Ystatistic_value.Statistic_SpeedOvall * 1000, Ystatistic_value.Statistic_p2p * 1000
 8003aa4:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <BLE_USART+0x1a8>)
 8003aa6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003aaa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003be4 <BLE_USART+0x1a4>
 8003aae:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003ab2:	ee17 0a90 	vmov	r0, s15
 8003ab6:	f7fc fd53 	bl	8000560 <__aeabi_f2d>
 8003aba:	e9c7 0102 	strd	r0, r1, [r7, #8]
		, Ystatistic_value.Statistic_FreqOvall * 1000, Ystatistic_value.Statistic_SpeedOvall * 1000, Ystatistic_value.Statistic_p2p * 1000
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <BLE_USART+0x1a8>)
 8003ac0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ac4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003be4 <BLE_USART+0x1a4>
 8003ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003acc:	ee17 0a90 	vmov	r0, s15
 8003ad0:	f7fc fd46 	bl	8000560 <__aeabi_f2d>
 8003ad4:	e9c7 0100 	strd	r0, r1, [r7]
		, Ystatistic_value.Statistic_FreqOvall * 1000, Ystatistic_value.Statistic_SpeedOvall * 1000, Ystatistic_value.Statistic_p2p * 1000
 8003ad8:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <BLE_USART+0x1a8>)
 8003ada:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003ade:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003be4 <BLE_USART+0x1a4>
 8003ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003ae6:	ee17 0a90 	vmov	r0, s15
 8003aea:	f7fc fd39 	bl	8000560 <__aeabi_f2d>
 8003aee:	4682      	mov	sl, r0
 8003af0:	468b      	mov	fp, r1
		, Zstatistic_value.Statistic_FreqOvall * 1000, Zstatistic_value.Statistic_SpeedOvall * 1000, Zstatistic_value.Statistic_p2p * 1000);
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <BLE_USART+0x1ac>)
 8003af4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003af8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003be4 <BLE_USART+0x1a4>
 8003afc:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003b00:	ee17 0a90 	vmov	r0, s15
 8003b04:	f7fc fd2c 	bl	8000560 <__aeabi_f2d>
 8003b08:	4680      	mov	r8, r0
 8003b0a:	4689      	mov	r9, r1
		, Zstatistic_value.Statistic_FreqOvall * 1000, Zstatistic_value.Statistic_SpeedOvall * 1000, Zstatistic_value.Statistic_p2p * 1000);
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <BLE_USART+0x1ac>)
 8003b0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003b12:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003be4 <BLE_USART+0x1a4>
 8003b16:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003b1a:	ee17 0a90 	vmov	r0, s15
 8003b1e:	f7fc fd1f 	bl	8000560 <__aeabi_f2d>
 8003b22:	4605      	mov	r5, r0
 8003b24:	460e      	mov	r6, r1
		, Zstatistic_value.Statistic_FreqOvall * 1000, Zstatistic_value.Statistic_SpeedOvall * 1000, Zstatistic_value.Statistic_p2p * 1000);
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <BLE_USART+0x1ac>)
 8003b28:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003b2c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003be4 <BLE_USART+0x1a4>
 8003b30:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf_(USARTBLE.buffer, 128 , "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
 8003b34:	ee17 0a90 	vmov	r0, s15
 8003b38:	f7fc fd12 	bl	8000560 <__aeabi_f2d>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003b44:	e9cd 560e 	strd	r5, r6, [sp, #56]	; 0x38
 8003b48:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003b4c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003b50:	ed97 7b00 	vldr	d7, [r7]
 8003b54:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003b58:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b60:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003b68:	ed97 7b06 	vldr	d7, [r7, #24]
 8003b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b70:	ed97 7b08 	vldr	d7, [r7, #32]
 8003b74:	ed8d 7b00 	vstr	d7, [sp]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <BLE_USART+0x1b0>)
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	481d      	ldr	r0, [pc, #116]	; (8003bf4 <BLE_USART+0x1b4>)
 8003b7e:	f002 fb99 	bl	80062b4 <snprintf_>

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 8003b82:	481c      	ldr	r0, [pc, #112]	; (8003bf4 <BLE_USART+0x1b4>)
 8003b84:	f7fc fb80 	bl	8000288 <strlen>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d804      	bhi.n	8003b98 <BLE_USART+0x158>
 8003b8e:	4819      	ldr	r0, [pc, #100]	; (8003bf4 <BLE_USART+0x1b4>)
 8003b90:	f7fc fb7a 	bl	8000288 <strlen>
 8003b94:	4603      	mov	r3, r0
 8003b96:	e000      	b.n	8003b9a <BLE_USART+0x15a>
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <BLE_USART+0x19c>)
 8003b9c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4

		USARTBLE.sendTimeout = 100 ;
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <BLE_USART+0x19c>)
 8003ba2:	2264      	movs	r2, #100	; 0x64
 8003ba4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		HAL_StatusTypeDef BLE_transfer_status = HAL_UART_Transmit(huart, USARTBLE.buffer, USARTBLE.bufferSize,USARTBLE.sendTimeout);
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <BLE_USART+0x19c>)
 8003baa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <BLE_USART+0x19c>)
 8003bb2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003bb6:	490f      	ldr	r1, [pc, #60]	; (8003bf4 <BLE_USART+0x1b4>)
 8003bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bba:	f004 fa3c 	bl	8008036 <HAL_UART_Transmit>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//HAL_StatusTypeDef BLE_transfer_status = HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize);
		if(BLE_transfer_status == HAL_OK)
 8003bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <BLE_USART+0x192>
		{
			float a = 1;
 8003bcc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
		 char C[20];
		 strcpy(C,  USARTBLE.Rbuffer );
		 */
		 //0x1;
	}
}
 8003bd2:	bf00      	nop
 8003bd4:	373c      	adds	r7, #60	; 0x3c
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	200083a0 	.word	0x200083a0
 8003be0:	200000dc 	.word	0x200000dc
 8003be4:	447a0000 	.word	0x447a0000
 8003be8:	20000184 	.word	0x20000184
 8003bec:	200002d4 	.word	0x200002d4
 8003bf0:	08008c30 	.word	0x08008c30
 8003bf4:	20008440 	.word	0x20008440

08003bf8 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
	float ans = 0;
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<n; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e016      	b.n	8003c42 <Calculate_FreqOverAll+0x4a>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	ed93 7a00 	vldr	s14, [r3]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c30:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c38:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i<n; i++)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	dbe4      	blt.n	8003c14 <Calculate_FreqOverAll+0x1c>
	}

	ans = sqrt(ParsevalFftPower)/n;
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7fc fc88 	bl	8000560 <__aeabi_f2d>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	ec44 3b10 	vmov	d0, r3, r4
 8003c58:	f004 fe7e 	bl	8008958 <sqrt>
 8003c5c:	ec56 5b10 	vmov	r5, r6, d0
 8003c60:	6838      	ldr	r0, [r7, #0]
 8003c62:	f7fc fc6b 	bl	800053c <__aeabi_i2d>
 8003c66:	4603      	mov	r3, r0
 8003c68:	460c      	mov	r4, r1
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	4628      	mov	r0, r5
 8003c70:	4631      	mov	r1, r6
 8003c72:	f7fc fdf7 	bl	8000864 <__aeabi_ddiv>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	f7fc ffbf 	bl	8000c00 <__aeabi_d2f>
 8003c82:	4603      	mov	r3, r0
 8003c84:	60fb      	str	r3, [r7, #12]


	return ans;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	ee07 3a90 	vmov	s15, r3
}
 8003c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c98 <Calculate_All_statisitc>:

void Calculate_All_statisitc(float32_t *statisticDataSet, uint16_t dataLength, Sv *staticInstance)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	817b      	strh	r3, [r7, #10]
	uint32_t maxtestIndex = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
	uint32_t mintestIndex = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]

	arm_max_f32(statisticDataSet, dataLength, &staticInstance->Statistic_max, &maxtestIndex);
 8003cae:	8979      	ldrh	r1, [r7, #10]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7fd fa54 	bl	8001164 <arm_max_f32>
	arm_min_f32(statisticDataSet, dataLength, &staticInstance->Statistic_min, &mintestIndex);
 8003cbc:	8979      	ldrh	r1, [r7, #10]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1d1a      	adds	r2, r3, #4
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7fd fae2 	bl	8001290 <arm_min_f32>
	arm_rms_f32(statisticDataSet, dataLength, &staticInstance->Statistic_rms);
 8003ccc:	8979      	ldrh	r1, [r7, #10]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fd fb93 	bl	8001400 <arm_rms_f32>
	staticInstance->Statistic_p2p = 0.85 * (staticInstance->Statistic_max - staticInstance->Statistic_min);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	ed93 7a00 	vldr	s14, [r3]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cea:	ee17 0a90 	vmov	r0, s15
 8003cee:	f7fc fc37 	bl	8000560 <__aeabi_f2d>
 8003cf2:	a309      	add	r3, pc, #36	; (adr r3, 8003d18 <Calculate_All_statisitc+0x80>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fc8a 	bl	8000610 <__aeabi_dmul>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4618      	mov	r0, r3
 8003d02:	4621      	mov	r1, r4
 8003d04:	f7fc ff7c 	bl	8000c00 <__aeabi_d2f>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	33333333 	.word	0x33333333
 8003d1c:	3feb3333 	.word	0x3feb3333

08003d20 <Calculate_FFT_RMS>:

void Calculate_FFT_RMS(float32_t * bufferforFFT, float32_t * OutputFFTbuffer, int32_t fftSize, Sv *staticInstance)
{
 8003d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d24:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8003d28:	b08c      	sub	sp, #48	; 0x30
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003d30:	3c24      	subs	r4, #36	; 0x24
 8003d32:	6020      	str	r0, [r4, #0]
 8003d34:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003d38:	3828      	subs	r0, #40	; 0x28
 8003d3a:	6001      	str	r1, [r0, #0]
 8003d3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003d40:	392c      	subs	r1, #44	; 0x2c
 8003d42:	600a      	str	r2, [r1, #0]
 8003d44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d48:	3a30      	subs	r2, #48	; 0x30
 8003d4a:	6013      	str	r3, [r2, #0]
	float32_t maxValue = 0;
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003d54:	f102 0214 	add.w	r2, r2, #20
 8003d58:	6013      	str	r3, [r2, #0]
	float32_t Speeddatabuffer[2048];
	uint32_t testIndex = 0;
 8003d5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d5e:	3b20      	subs	r3, #32
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
	uint32_t ifftFlag = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003d6a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8003d6e:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003d76:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8003d7a:	6013      	str	r3, [r2, #0]

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, bufferforFFT, ifftFlag, doBitReverse);
 8003d7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003d80:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003d8c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003d98:	3924      	subs	r1, #36	; 0x24
 8003d9a:	6809      	ldr	r1, [r1, #0]
 8003d9c:	4892      	ldr	r0, [pc, #584]	; (8003fe8 <Calculate_FFT_RMS+0x2c8>)
 8003d9e:	f7fe fbd3 	bl	8002548 <arm_cfft_f32>

	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(bufferforFFT, OutputFFTbuffer, fftSize);
 8003da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003da6:	3b2c      	subs	r3, #44	; 0x2c
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003dae:	3928      	subs	r1, #40	; 0x28
 8003db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003db4:	3b24      	subs	r3, #36	; 0x24
 8003db6:	6809      	ldr	r1, [r1, #0]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f7fd f913 	bl	8000fe4 <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(OutputFFTbuffer, fftSize, &maxValue, &testIndex);
 8003dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dc2:	3b2c      	subs	r3, #44	; 0x2c
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dca:	3b20      	subs	r3, #32
 8003dcc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003dd0:	f102 0214 	add.w	r2, r2, #20
 8003dd4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003dd8:	3828      	subs	r0, #40	; 0x28
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	f7fd f9c2 	bl	8001164 <arm_max_f32>


	for(uint16_t i = 0; i < fftSize; i++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003de6:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003dea:	8013      	strh	r3, [r2, #0]
 8003dec:	e021      	b.n	8003e32 <Calculate_FFT_RMS+0x112>
	{
		Speeddatabuffer[i] = OutputFFTbuffer[i];
 8003dee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003df2:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	009a      	lsls	r2, r3, #2
 8003dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dfe:	3b28      	subs	r3, #40	; 0x28
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003e08:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003e0c:	8811      	ldrh	r1, [r2, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e14:	3b1c      	subs	r3, #28
 8003e16:	0089      	lsls	r1, r1, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < fftSize; i++)
 8003e1c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003e20:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003e2c:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003e30:	8013      	strh	r3, [r2, #0]
 8003e32:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003e36:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e40:	3b2c      	subs	r3, #44	; 0x2c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	dcd2      	bgt.n	8003dee <Calculate_FFT_RMS+0xce>
	}

	//TODO: remove low frequency noise (DC component)
	OutputFFTbuffer[0] = 0;
 8003e48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e4c:	3b28      	subs	r3, #40	; 0x28
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[1] = 0;
 8003e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e5a:	3b28      	subs	r3, #40	; 0x28
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[2] = 0;
 8003e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e6a:	3b28      	subs	r3, #40	; 0x28
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

	staticInstance->Statistic_FreqOvall = Calculate_FreqOverAll(OutputFFTbuffer,2048);
 8003e76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e7a:	3b28      	subs	r3, #40	; 0x28
 8003e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	f7ff feb9 	bl	8003bf8 <Calculate_FreqOverAll>
 8003e86:	eef0 7a40 	vmov.f32	s15, s0
 8003e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e8e:	3b30      	subs	r3, #48	; 0x30
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 2048;
 8003e96:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8003e9a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003e9e:	f102 0220 	add.w	r2, r2, #32
 8003ea2:	6013      	str	r3, [r2, #0]
	float32_t samplingRate = 3200;
 8003ea4:	4b51      	ldr	r3, [pc, #324]	; (8003fec <Calculate_FFT_RMS+0x2cc>)
 8003ea6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003eaa:	f102 021c 	add.w	r2, r2, #28
 8003eae:	6013      	str	r3, [r2, #0]
	float32_t frequencyScale = samplingRate/sampleCount;
 8003eb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003eb4:	f103 031c 	add.w	r3, r3, #28
 8003eb8:	edd3 6a00 	vldr	s13, [r3]
 8003ebc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003ec0:	f103 0320 	add.w	r3, r3, #32
 8003ec4:	ed93 7a00 	vldr	s14, [r3]
 8003ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ecc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003ed0:	f103 0318 	add.w	r3, r3, #24
 8003ed4:	edc3 7a00 	vstr	s15, [r3]

	for(uint16_t i = 1; i < fftSize; i++)
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003ede:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8003ee2:	8013      	strh	r3, [r2, #0]
 8003ee4:	e0f5      	b.n	80040d2 <Calculate_FFT_RMS+0x3b2>
	{
		if(i < fftSize/2)
 8003ee6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003eea:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ef4:	3b2c      	subs	r3, #44	; 0x2c
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0fd9      	lsrs	r1, r3, #31
 8003efa:	440b      	add	r3, r1
 8003efc:	105b      	asrs	r3, r3, #1
 8003efe:	429a      	cmp	r2, r3
 8003f00:	da78      	bge.n	8003ff4 <Calculate_FFT_RMS+0x2d4>
		{
			if(i ==0)
 8003f02:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f06:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <Calculate_FFT_RMS+0x21e>
			{
				Speeddatabuffer[i] = Speeddatabuffer[i];
 8003f10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f14:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f1e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003f22:	8819      	ldrh	r1, [r3, #0]
 8003f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f28:	3b1c      	subs	r3, #28
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f34:	3b1c      	subs	r3, #28
 8003f36:	0089      	lsls	r1, r1, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e0be      	b.n	80040bc <Calculate_FFT_RMS+0x39c>
			}
			else
			{
				Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 8003f3e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f42:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003f46:	881a      	ldrh	r2, [r3, #0]
 8003f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f4c:	3b1c      	subs	r3, #28
 8003f4e:	0092      	lsls	r2, r2, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003ff0 <Calculate_FFT_RMS+0x2d0>
 8003f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f5e:	ee17 0a90 	vmov	r0, s15
 8003f62:	f7fc fafd 	bl	8000560 <__aeabi_f2d>
 8003f66:	4604      	mov	r4, r0
 8003f68:	460d      	mov	r5, r1
 8003f6a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f6e:	f103 0318 	add.w	r3, r3, #24
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	f7fc faf4 	bl	8000560 <__aeabi_f2d>
 8003f78:	a319      	add	r3, pc, #100	; (adr r3, 8003fe0 <Calculate_FFT_RMS+0x2c0>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc fb47 	bl	8000610 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
 8003f8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f8e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc fad1 	bl	800053c <__aeabi_i2d>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	f7fc fb35 	bl	8000610 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4620      	mov	r0, r4
 8003fac:	4629      	mov	r1, r5
 8003fae:	f7fc fc59 	bl	8000864 <__aeabi_ddiv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4623      	mov	r3, r4
 8003fba:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8003fbe:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8003fc2:	880c      	ldrh	r4, [r1, #0]
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7fc fe1a 	bl	8000c00 <__aeabi_d2f>
 8003fcc:	4601      	mov	r1, r0
 8003fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fd2:	3b1c      	subs	r3, #28
 8003fd4:	00a2      	lsls	r2, r4, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	6019      	str	r1, [r3, #0]
 8003fda:	e06f      	b.n	80040bc <Calculate_FFT_RMS+0x39c>
 8003fdc:	f3af 8000 	nop.w
 8003fe0:	4d12d84a 	.word	0x4d12d84a
 8003fe4:	401921fb 	.word	0x401921fb
 8003fe8:	0800ea38 	.word	0x0800ea38
 8003fec:	45480000 	.word	0x45480000
 8003ff0:	46193c00 	.word	0x46193c00
			}

		}
		else if(i > fftSize/2)
 8003ff4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003ff8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003ffc:	881a      	ldrh	r2, [r3, #0]
 8003ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004002:	3b2c      	subs	r3, #44	; 0x2c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0fd9      	lsrs	r1, r3, #31
 8004008:	440b      	add	r3, r1
 800400a:	105b      	asrs	r3, r3, #1
 800400c:	429a      	cmp	r2, r3
 800400e:	dd55      	ble.n	80040bc <Calculate_FFT_RMS+0x39c>
		{
			Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * abs(fftSize-i));
 8004010:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004014:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800401e:	3b1c      	subs	r3, #28
 8004020:	0092      	lsls	r2, r2, #2
 8004022:	4413      	add	r3, r2
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8003ff0 <Calculate_FFT_RMS+0x2d0>
 800402c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004030:	ee17 0a90 	vmov	r0, s15
 8004034:	f7fc fa94 	bl	8000560 <__aeabi_f2d>
 8004038:	4604      	mov	r4, r0
 800403a:	460d      	mov	r5, r1
 800403c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004040:	f103 0318 	add.w	r3, r3, #24
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	f7fc fa8b 	bl	8000560 <__aeabi_f2d>
 800404a:	a369      	add	r3, pc, #420	; (adr r3, 80041f0 <Calculate_FFT_RMS+0x4d0>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fade 	bl	8000610 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4690      	mov	r8, r2
 800405a:	4699      	mov	r9, r3
 800405c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004060:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800406a:	3b2c      	subs	r3, #44	; 0x2c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	bfb8      	it	lt
 8004074:	425b      	neglt	r3, r3
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fa60 	bl	800053c <__aeabi_i2d>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	f7fc fac4 	bl	8000610 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc fbe8 	bl	8000864 <__aeabi_ddiv>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4623      	mov	r3, r4
 800409c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80040a0:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 80040a4:	880c      	ldrh	r4, [r1, #0]
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fc fda9 	bl	8000c00 <__aeabi_d2f>
 80040ae:	4601      	mov	r1, r0
 80040b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b4:	3b1c      	subs	r3, #28
 80040b6:	00a2      	lsls	r2, r4, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize; i++)
 80040bc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80040c0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80040cc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80040d0:	8013      	strh	r3, [r2, #0]
 80040d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80040d6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e0:	3b2c      	subs	r3, #44	; 0x2c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	f73f aefe 	bgt.w	8003ee6 <Calculate_FFT_RMS+0x1c6>
		}

	}

	Speeddatabuffer[0] = 0;
 80040ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ee:	3b1c      	subs	r3, #28
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[1] = 0;
 80040f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040fa:	3b1c      	subs	r3, #28
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	605a      	str	r2, [r3, #4]
	Speeddatabuffer[2] = 0;
 8004102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004106:	3b1c      	subs	r3, #28
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
	Speeddatabuffer[3] = 0;
 800410e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004112:	3b1c      	subs	r3, #28
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	60da      	str	r2, [r3, #12]
	Speeddatabuffer[4] = 0;
 800411a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800411e:	3b1c      	subs	r3, #28
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
	Speeddatabuffer[5] = 0;
 8004126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800412a:	3b1c      	subs	r3, #28
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
	Speeddatabuffer[6] = 0;
 8004132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004136:	3b1c      	subs	r3, #28
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	619a      	str	r2, [r3, #24]

	Speeddatabuffer[2041] = 0;
 800413e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004142:	3b1c      	subs	r3, #28
 8004144:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8004148:	3304      	adds	r3, #4
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2042] = 0;
 8004150:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004154:	3b1c      	subs	r3, #28
 8004156:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800415a:	3308      	adds	r3, #8
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2043] = 0;
 8004162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004166:	3b1c      	subs	r3, #28
 8004168:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800416c:	330c      	adds	r3, #12
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2044] = 0;
 8004174:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004178:	3b1c      	subs	r3, #28
 800417a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800417e:	3310      	adds	r3, #16
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2045] = 0;
 8004186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800418a:	3b1c      	subs	r3, #28
 800418c:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8004190:	3314      	adds	r3, #20
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2046] = 0;
 8004198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800419c:	3b1c      	subs	r3, #28
 800419e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80041a2:	3318      	adds	r3, #24
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2047] = 0;
 80041aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041ae:	3b1c      	subs	r3, #28
 80041b0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80041b4:	331c      	adds	r3, #28
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]


	staticInstance->Statistic_SpeedOvall = Calculate_FreqOverAll(Speeddatabuffer,2048);
 80041bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041c0:	3b1c      	subs	r3, #28
 80041c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fd16 	bl	8003bf8 <Calculate_FreqOverAll>
 80041cc:	eef0 7a40 	vmov.f32	s15, s0
 80041d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041d4:	3b30      	subs	r3, #48	; 0x30
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

}
 80041dc:	bf00      	nop
 80041de:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80041e2:	3730      	adds	r7, #48	; 0x30
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041ea:	bf00      	nop
 80041ec:	f3af 8000 	nop.w
 80041f0:	4d12d84a 	.word	0x4d12d84a
 80041f4:	401921fb 	.word	0x401921fb

080041f8 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <delay_init+0x44>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0d      	ldr	r2, [pc, #52]	; (800423c <delay_init+0x44>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <delay_init+0x48>)
 8004216:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <delay_init+0x48>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	0152      	lsls	r2, r2, #5
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	b29a      	uxth	r2, r3
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <delay_init+0x4c>)
 800422e:	801a      	strh	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000e010 	.word	0xe000e010
 8004240:	200000c8 	.word	0x200000c8
 8004244:	200000ca 	.word	0x200000ca

08004248 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <delay_us+0x5c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4619      	mov	r1, r3
 8004256:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <delay_us+0x60>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	fb03 f301 	mul.w	r3, r3, r1
 800425e:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <delay_us+0x60>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <delay_us+0x60>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a0f      	ldr	r2, [pc, #60]	; (80042a8 <delay_us+0x60>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <delay_us+0x60>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <delay_us+0x44>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f2      	beq.n	8004272 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <delay_us+0x60>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <delay_us+0x60>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	200000c8 	.word	0x200000c8
 80042a8:	e000e010 	.word	0xe000e010
 80042ac:	00000000 	.word	0x00000000

080042b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042b6:	f002 f947 	bl	8006548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ba:	f000 fa2f 	bl	800471c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042be:	f000 fb13 	bl	80048e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80042c2:	f000 fab1 	bl	8004828 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80042c6:	f000 fae5 	bl	8004894 <MX_USART6_UART_Init>
  MX_IWDG_Init();
 80042ca:	f000 fa93 	bl	80047f4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  delay_init(168);
 80042ce:	20a8      	movs	r0, #168	; 0xa8
 80042d0:	f7ff ff92 	bl	80041f8 <delay_init>


  ADXL_InitTypeDef adxl_config;
  adxl_config.Range = RANGE_16G;
 80042d4:	2303      	movs	r3, #3
 80042d6:	723b      	strb	r3, [r7, #8]
  adxl_config.Resolution = RESOLUTION_FULL;
 80042d8:	2301      	movs	r3, #1
 80042da:	727b      	strb	r3, [r7, #9]
  adxl_config.AutoSleep = AUTOSLEEPOFF;
 80042dc:	2300      	movs	r3, #0
 80042de:	72fb      	strb	r3, [r7, #11]
  adxl_config.LPMode = LPMODE_LOWPOWER;
 80042e0:	2301      	movs	r3, #1
 80042e2:	71bb      	strb	r3, [r7, #6]
  adxl_config.Rate = BWRATE_3200;
 80042e4:	230f      	movs	r3, #15
 80042e6:	71fb      	strb	r3, [r7, #7]
  adxl_config.SPIMode = SPIMODE_4WIRE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	713b      	strb	r3, [r7, #4]
  adxl_config.IntMode = INT_ACTIVEHIGH;
 80042ec:	2300      	movs	r3, #0
 80042ee:	717b      	strb	r3, [r7, #5]

  adxlStatus InitStatus = ADXL_Init(&adxl_config, &ADXLid);
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	49bd      	ldr	r1, [pc, #756]	; (80045e8 <main+0x338>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fab5 	bl	8003864 <ADXL_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]
  if(ADXLid == 0xE5)InitStatus = ADXL_OK;
 80042fe:	4bba      	ldr	r3, [pc, #744]	; (80045e8 <main+0x338>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2be5      	cmp	r3, #229	; 0xe5
 8004304:	d101      	bne.n	800430a <main+0x5a>
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  if(InitStatus == ADXL_OK)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d100      	bne.n	8004312 <main+0x62>
  {
	  __NOP();
 8004310:	bf00      	nop

  }

  ADXL_Measure(ON);
 8004312:	2000      	movs	r0, #0
 8004314:	f7ff fb54 	bl	80039c0 <ADXL_Measure>
  writeRegister(INT_MAP, 0x10);
 8004318:	2110      	movs	r1, #16
 800431a:	202f      	movs	r0, #47	; 0x2f
 800431c:	f7ff f9be 	bl	800369c <writeRegister>
  writeRegister(INT_ENABLE, 0x80);
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	202e      	movs	r0, #46	; 0x2e
 8004324:	f7ff f9ba 	bl	800369c <writeRegister>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ADXL_IntProto();
 8004328:	f7ff fb7b 	bl	8003a22 <ADXL_IntProto>
    readRegister(DATA0,data,6);
 800432c:	2206      	movs	r2, #6
 800432e:	49af      	ldr	r1, [pc, #700]	; (80045ec <main+0x33c>)
 8004330:	2032      	movs	r0, #50	; 0x32
 8004332:	f7ff f9e3 	bl	80036fc <readRegister>
    if(dataReady == true)
 8004336:	4bae      	ldr	r3, [pc, #696]	; (80045f0 <main+0x340>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f4      	bne.n	8004328 <main+0x78>
    {

    	readRegister(DATA0,data,6);
 800433e:	2206      	movs	r2, #6
 8004340:	49aa      	ldr	r1, [pc, #680]	; (80045ec <main+0x33c>)
 8004342:	2032      	movs	r0, #50	; 0x32
 8004344:	f7ff f9da 	bl	80036fc <readRegister>
    	XfftInstance.data0 = data[0];
 8004348:	4ba8      	ldr	r3, [pc, #672]	; (80045ec <main+0x33c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b29a      	uxth	r2, r3
 800434e:	4ba9      	ldr	r3, [pc, #676]	; (80045f4 <main+0x344>)
 8004350:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004354:	801a      	strh	r2, [r3, #0]
    	XfftInstance.data1 = data[1];
 8004356:	4ba5      	ldr	r3, [pc, #660]	; (80045ec <main+0x33c>)
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	b29a      	uxth	r2, r3
 800435c:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <main+0x344>)
 800435e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004362:	3302      	adds	r3, #2
 8004364:	801a      	strh	r2, [r3, #0]
    	YfftInstance.data0 = data[2];
 8004366:	4ba1      	ldr	r3, [pc, #644]	; (80045ec <main+0x33c>)
 8004368:	789b      	ldrb	r3, [r3, #2]
 800436a:	b29a      	uxth	r2, r3
 800436c:	4ba2      	ldr	r3, [pc, #648]	; (80045f8 <main+0x348>)
 800436e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004372:	801a      	strh	r2, [r3, #0]
    	YfftInstance.data1 = data[3];
 8004374:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <main+0x33c>)
 8004376:	78db      	ldrb	r3, [r3, #3]
 8004378:	b29a      	uxth	r2, r3
 800437a:	4b9f      	ldr	r3, [pc, #636]	; (80045f8 <main+0x348>)
 800437c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004380:	3302      	adds	r3, #2
 8004382:	801a      	strh	r2, [r3, #0]
    	ZfftInstance.data0 = data[4];
 8004384:	4b99      	ldr	r3, [pc, #612]	; (80045ec <main+0x33c>)
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	b29a      	uxth	r2, r3
 800438a:	4b9c      	ldr	r3, [pc, #624]	; (80045fc <main+0x34c>)
 800438c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004390:	801a      	strh	r2, [r3, #0]
    	ZfftInstance.data1 = data[5];
 8004392:	4b96      	ldr	r3, [pc, #600]	; (80045ec <main+0x33c>)
 8004394:	795b      	ldrb	r3, [r3, #5]
 8004396:	b29a      	uxth	r2, r3
 8004398:	4b98      	ldr	r3, [pc, #608]	; (80045fc <main+0x34c>)
 800439a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800439e:	3302      	adds	r3, #2
 80043a0:	801a      	strh	r2, [r3, #0]
    	XfftInstance.acceleration = ((uint8_t)XfftInstance.data1<<8)|(uint8_t)XfftInstance.data0;
 80043a2:	4b94      	ldr	r3, [pc, #592]	; (80045f4 <main+0x344>)
 80043a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043a8:	3302      	adds	r3, #2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	b21a      	sxth	r2, r3
 80043b2:	4b90      	ldr	r3, [pc, #576]	; (80045f4 <main+0x344>)
 80043b4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	b21b      	sxth	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b21a      	sxth	r2, r3
 80043c2:	4b8c      	ldr	r3, [pc, #560]	; (80045f4 <main+0x344>)
 80043c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043c8:	3304      	adds	r3, #4
 80043ca:	801a      	strh	r2, [r3, #0]
    	YfftInstance.acceleration = ((uint8_t)YfftInstance.data1<<8)|(uint8_t)YfftInstance.data0;
 80043cc:	4b8a      	ldr	r3, [pc, #552]	; (80045f8 <main+0x348>)
 80043ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043d2:	3302      	adds	r3, #2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	b21a      	sxth	r2, r3
 80043dc:	4b86      	ldr	r3, [pc, #536]	; (80045f8 <main+0x348>)
 80043de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	b21b      	sxth	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b21a      	sxth	r2, r3
 80043ec:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <main+0x348>)
 80043ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043f2:	3304      	adds	r3, #4
 80043f4:	801a      	strh	r2, [r3, #0]
    	ZfftInstance.acceleration = ((uint8_t)ZfftInstance.data1<<8)|(uint8_t)ZfftInstance.data0;
 80043f6:	4b81      	ldr	r3, [pc, #516]	; (80045fc <main+0x34c>)
 80043f8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80043fc:	3302      	adds	r3, #2
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	b21a      	sxth	r2, r3
 8004406:	4b7d      	ldr	r3, [pc, #500]	; (80045fc <main+0x34c>)
 8004408:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b21b      	sxth	r3, r3
 8004412:	4313      	orrs	r3, r2
 8004414:	b21a      	sxth	r2, r3
 8004416:	4b79      	ldr	r3, [pc, #484]	; (80045fc <main+0x34c>)
 8004418:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800441c:	3304      	adds	r3, #4
 800441e:	801a      	strh	r2, [r3, #0]

    	//3.9 is scale of LSB(one bit) mg, 1000 is scale to g
    	XfftInstance.accelerationfloat = (float)XfftInstance.acceleration * 3.9 / 1000;
 8004420:	4b74      	ldr	r3, [pc, #464]	; (80045f4 <main+0x344>)
 8004422:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004426:	3304      	adds	r3, #4
 8004428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004434:	ee17 0a90 	vmov	r0, s15
 8004438:	f7fc f892 	bl	8000560 <__aeabi_f2d>
 800443c:	a368      	add	r3, pc, #416	; (adr r3, 80045e0 <main+0x330>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fc f8e5 	bl	8000610 <__aeabi_dmul>
 8004446:	4603      	mov	r3, r0
 8004448:	460c      	mov	r4, r1
 800444a:	4618      	mov	r0, r3
 800444c:	4621      	mov	r1, r4
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	4b6b      	ldr	r3, [pc, #428]	; (8004600 <main+0x350>)
 8004454:	f7fc fa06 	bl	8000864 <__aeabi_ddiv>
 8004458:	4603      	mov	r3, r0
 800445a:	460c      	mov	r4, r1
 800445c:	4618      	mov	r0, r3
 800445e:	4621      	mov	r1, r4
 8004460:	f7fc fbce 	bl	8000c00 <__aeabi_d2f>
 8004464:	4602      	mov	r2, r0
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <main+0x344>)
 8004468:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800446c:	3308      	adds	r3, #8
 800446e:	601a      	str	r2, [r3, #0]
    	YfftInstance.accelerationfloat = (float)YfftInstance.acceleration  * 3.9 / 1000;
 8004470:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <main+0x348>)
 8004472:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004476:	3304      	adds	r3, #4
 8004478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004484:	ee17 0a90 	vmov	r0, s15
 8004488:	f7fc f86a 	bl	8000560 <__aeabi_f2d>
 800448c:	a354      	add	r3, pc, #336	; (adr r3, 80045e0 <main+0x330>)
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f7fc f8bd 	bl	8000610 <__aeabi_dmul>
 8004496:	4603      	mov	r3, r0
 8004498:	460c      	mov	r4, r1
 800449a:	4618      	mov	r0, r3
 800449c:	4621      	mov	r1, r4
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	4b57      	ldr	r3, [pc, #348]	; (8004600 <main+0x350>)
 80044a4:	f7fc f9de 	bl	8000864 <__aeabi_ddiv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	4618      	mov	r0, r3
 80044ae:	4621      	mov	r1, r4
 80044b0:	f7fc fba6 	bl	8000c00 <__aeabi_d2f>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <main+0x348>)
 80044b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80044bc:	3308      	adds	r3, #8
 80044be:	601a      	str	r2, [r3, #0]
    	ZfftInstance.accelerationfloat = (float)ZfftInstance.acceleration  * 3.9 / 1000;
 80044c0:	4b4e      	ldr	r3, [pc, #312]	; (80045fc <main+0x34c>)
 80044c2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80044c6:	3304      	adds	r3, #4
 80044c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d4:	ee17 0a90 	vmov	r0, s15
 80044d8:	f7fc f842 	bl	8000560 <__aeabi_f2d>
 80044dc:	a340      	add	r3, pc, #256	; (adr r3, 80045e0 <main+0x330>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fc f895 	bl	8000610 <__aeabi_dmul>
 80044e6:	4603      	mov	r3, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	4618      	mov	r0, r3
 80044ec:	4621      	mov	r1, r4
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b43      	ldr	r3, [pc, #268]	; (8004600 <main+0x350>)
 80044f4:	f7fc f9b6 	bl	8000864 <__aeabi_ddiv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	4618      	mov	r0, r3
 80044fe:	4621      	mov	r1, r4
 8004500:	f7fc fb7e 	bl	8000c00 <__aeabi_d2f>
 8004504:	4602      	mov	r2, r0
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <main+0x34c>)
 8004508:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800450c:	3308      	adds	r3, #8
 800450e:	601a      	str	r2, [r3, #0]

    	// move X axis data to buffer
    	XfftInstance.bufferforFFT[sampleIndex * 2] = XfftInstance.accelerationfloat;
 8004510:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <main+0x354>)
 8004512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004516:	0059      	lsls	r1, r3, #1
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <main+0x344>)
 800451a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800451e:	3308      	adds	r3, #8
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4834      	ldr	r0, [pc, #208]	; (80045f4 <main+0x344>)
 8004524:	008b      	lsls	r3, r1, #2
 8004526:	4403      	add	r3, r0
 8004528:	601a      	str	r2, [r3, #0]
    	XfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <main+0x354>)
 800452c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	3301      	adds	r3, #1
 8004534:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <main+0x344>)
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
    	XfftInstance.bufferforTimeSV[sampleIndex] = XfftInstance.accelerationfloat;
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <main+0x354>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	4618      	mov	r0, r3
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <main+0x344>)
 800454a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800454e:	3308      	adds	r3, #8
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4928      	ldr	r1, [pc, #160]	; (80045f4 <main+0x344>)
 8004554:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	601a      	str	r2, [r3, #0]

    	// move Y axis data to buffer
    	YfftInstance.bufferforFFT[sampleIndex * 2] = YfftInstance.accelerationfloat;
 800455e:	4b29      	ldr	r3, [pc, #164]	; (8004604 <main+0x354>)
 8004560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004564:	0059      	lsls	r1, r3, #1
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <main+0x348>)
 8004568:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800456c:	3308      	adds	r3, #8
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4821      	ldr	r0, [pc, #132]	; (80045f8 <main+0x348>)
 8004572:	008b      	lsls	r3, r1, #2
 8004574:	4403      	add	r3, r0
 8004576:	601a      	str	r2, [r3, #0]
    	YfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <main+0x354>)
 800457a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	3301      	adds	r3, #1
 8004582:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <main+0x348>)
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    	YfftInstance.bufferforTimeSV[sampleIndex] = YfftInstance.accelerationfloat;
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <main+0x354>)
 8004590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004594:	4618      	mov	r0, r3
 8004596:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <main+0x348>)
 8004598:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800459c:	3308      	adds	r3, #8
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4915      	ldr	r1, [pc, #84]	; (80045f8 <main+0x348>)
 80045a2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	601a      	str	r2, [r3, #0]

    	// move Z axis data to buffer
    	ZfftInstance.bufferforFFT[sampleIndex * 2] = ZfftInstance.accelerationfloat;
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <main+0x354>)
 80045ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b2:	0059      	lsls	r1, r3, #1
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <main+0x34c>)
 80045b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80045ba:	3308      	adds	r3, #8
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	480f      	ldr	r0, [pc, #60]	; (80045fc <main+0x34c>)
 80045c0:	008b      	lsls	r3, r1, #2
 80045c2:	4403      	add	r3, r0
 80045c4:	601a      	str	r2, [r3, #0]
    	ZfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <main+0x354>)
 80045c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	3301      	adds	r3, #1
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <main+0x34c>)
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e014      	b.n	8004608 <main+0x358>
 80045de:	bf00      	nop
 80045e0:	33333333 	.word	0x33333333
 80045e4:	400f3333 	.word	0x400f3333
 80045e8:	200000cc 	.word	0x200000cc
 80045ec:	200000d0 	.word	0x200000d0
 80045f0:	200000da 	.word	0x200000da
 80045f4:	20008560 	.word	0x20008560
 80045f8:	2000e604 	.word	0x2000e604
 80045fc:	2000038c 	.word	0x2000038c
 8004600:	408f4000 	.word	0x408f4000
 8004604:	200000d6 	.word	0x200000d6
    	ZfftInstance.bufferforTimeSV[sampleIndex] = ZfftInstance.accelerationfloat;
 8004608:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <main+0x428>)
 800460a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800460e:	4618      	mov	r0, r3
 8004610:	4b32      	ldr	r3, [pc, #200]	; (80046dc <main+0x42c>)
 8004612:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004616:	3308      	adds	r3, #8
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4930      	ldr	r1, [pc, #192]	; (80046dc <main+0x42c>)
 800461c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	601a      	str	r2, [r3, #0]


		sampleIndex++;
 8004626:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <main+0x428>)
 8004628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800462c:	b29b      	uxth	r3, r3
 800462e:	3301      	adds	r3, #1
 8004630:	b29b      	uxth	r3, r3
 8004632:	b21a      	sxth	r2, r3
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <main+0x428>)
 8004636:	801a      	strh	r2, [r3, #0]
    	if(sampleIndex == dataLength/2)
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <main+0x428>)
 800463a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004642:	d145      	bne.n	80046d0 <main+0x420>
		{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8004644:	2201      	movs	r2, #1
 8004646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800464a:	4825      	ldr	r0, [pc, #148]	; (80046e0 <main+0x430>)
 800464c:	f002 fa9a 	bl	8006b84 <HAL_GPIO_WritePin>
    		//Calculate Z axis statistic
    		Calculate_FFT_RMS(ZfftInstance.bufferforFFT, testOutput, fftSize, &Zstatistic_value);
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <main+0x434>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <main+0x438>)
 8004656:	4925      	ldr	r1, [pc, #148]	; (80046ec <main+0x43c>)
 8004658:	4820      	ldr	r0, [pc, #128]	; (80046dc <main+0x42c>)
 800465a:	f7ff fb61 	bl	8003d20 <Calculate_FFT_RMS>
			Calculate_All_statisitc(ZstatisticDataSet, dataLength/2, &Zstatistic_value);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <main+0x440>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <main+0x438>)
 8004664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fb15 	bl	8003c98 <Calculate_All_statisitc>

			//Calculate X axis statistic
    		Calculate_FFT_RMS(XfftInstance.bufferforFFT, testOutput, fftSize, &Xstatistic_value);
 800466e:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <main+0x434>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <main+0x444>)
 8004674:	491d      	ldr	r1, [pc, #116]	; (80046ec <main+0x43c>)
 8004676:	4820      	ldr	r0, [pc, #128]	; (80046f8 <main+0x448>)
 8004678:	f7ff fb52 	bl	8003d20 <Calculate_FFT_RMS>
			Calculate_All_statisitc(XstatisticDataSet, dataLength/2, &Xstatistic_value);
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <main+0x44c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <main+0x444>)
 8004682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fb06 	bl	8003c98 <Calculate_All_statisitc>

			//Calculate Y axis statistic
    		Calculate_FFT_RMS(YfftInstance.bufferforFFT , testOutput, fftSize, &Ystatistic_value);
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <main+0x434>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <main+0x450>)
 8004692:	4916      	ldr	r1, [pc, #88]	; (80046ec <main+0x43c>)
 8004694:	481b      	ldr	r0, [pc, #108]	; (8004704 <main+0x454>)
 8004696:	f7ff fb43 	bl	8003d20 <Calculate_FFT_RMS>
			Calculate_All_statisitc(YstatisticDataSet, dataLength/2, &Ystatistic_value);
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <main+0x458>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <main+0x450>)
 80046a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff faf7 	bl	8003c98 <Calculate_All_statisitc>

			//Data transmission by uart
    		sampleIndex = 0;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <main+0x428>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	801a      	strh	r2, [r3, #0]
    		USARTBLE.sendflag =1;
 80046b0:	4b16      	ldr	r3, [pc, #88]	; (800470c <main+0x45c>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
    		BLE_USART(&huart6, &Zstatistic_value);
 80046b6:	490c      	ldr	r1, [pc, #48]	; (80046e8 <main+0x438>)
 80046b8:	4815      	ldr	r0, [pc, #84]	; (8004710 <main+0x460>)
 80046ba:	f7ff f9c1 	bl	8003a40 <BLE_USART>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80046be:	2200      	movs	r2, #0
 80046c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046c4:	4806      	ldr	r0, [pc, #24]	; (80046e0 <main+0x430>)
 80046c6:	f002 fa5d 	bl	8006b84 <HAL_GPIO_WritePin>
    		HAL_IWDG_Refresh(&hiwdg);
 80046ca:	4812      	ldr	r0, [pc, #72]	; (8004714 <main+0x464>)
 80046cc:	f002 fac5 	bl	8006c5a <HAL_IWDG_Refresh>
		}
    	dataReady = false;
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <main+0x468>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
    ADXL_IntProto();
 80046d6:	e627      	b.n	8004328 <main+0x78>
 80046d8:	200000d6 	.word	0x200000d6
 80046dc:	2000038c 	.word	0x2000038c
 80046e0:	40020c00 	.word	0x40020c00
 80046e4:	20000000 	.word	0x20000000
 80046e8:	200002d4 	.word	0x200002d4
 80046ec:	20006398 	.word	0x20006398
 80046f0:	20000004 	.word	0x20000004
 80046f4:	200000dc 	.word	0x200000dc
 80046f8:	20008560 	.word	0x20008560
 80046fc:	20000008 	.word	0x20000008
 8004700:	20000184 	.word	0x20000184
 8004704:	2000e604 	.word	0x2000e604
 8004708:	2000000c 	.word	0x2000000c
 800470c:	200083a0 	.word	0x200083a0
 8004710:	2000e56c 	.word	0x2000e56c
 8004714:	20000380 	.word	0x20000380
 8004718:	200000da 	.word	0x200000da

0800471c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b094      	sub	sp, #80	; 0x50
 8004720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004722:	f107 0320 	add.w	r3, r7, #32
 8004726:	2230      	movs	r2, #48	; 0x30
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f004 f90c 	bl	8008948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	4b29      	ldr	r3, [pc, #164]	; (80047ec <SystemClock_Config+0xd0>)
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	4a28      	ldr	r2, [pc, #160]	; (80047ec <SystemClock_Config+0xd0>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6413      	str	r3, [r2, #64]	; 0x40
 8004750:	4b26      	ldr	r3, [pc, #152]	; (80047ec <SystemClock_Config+0xd0>)
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800475c:	2300      	movs	r3, #0
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <SystemClock_Config+0xd4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <SystemClock_Config+0xd4>)
 8004766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <SystemClock_Config+0xd4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004778:	230a      	movs	r3, #10
 800477a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800477c:	2301      	movs	r3, #1
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004780:	2310      	movs	r3, #16
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004784:	2301      	movs	r3, #1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004788:	2302      	movs	r3, #2
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800478c:	2300      	movs	r3, #0
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004790:	2308      	movs	r3, #8
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004794:	23a8      	movs	r3, #168	; 0xa8
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004798:	2302      	movs	r3, #2
 800479a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800479c:	2304      	movs	r3, #4
 800479e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047a0:	f107 0320 	add.w	r3, r7, #32
 80047a4:	4618      	mov	r0, r3
 80047a6:	f002 fa69 	bl	8006c7c <HAL_RCC_OscConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80047b0:	f000 f940 	bl	8004a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047b4:	230f      	movs	r3, #15
 80047b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047b8:	2302      	movs	r3, #2
 80047ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	2105      	movs	r1, #5
 80047d2:	4618      	mov	r0, r3
 80047d4:	f002 fcc2 	bl	800715c <HAL_RCC_ClockConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80047de:	f000 f929 	bl	8004a34 <Error_Handler>
  }
}
 80047e2:	bf00      	nop
 80047e4:	3750      	adds	r7, #80	; 0x50
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000

080047f4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <MX_IWDG_Init+0x2c>)
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <MX_IWDG_Init+0x30>)
 80047fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <MX_IWDG_Init+0x2c>)
 8004800:	2205      	movs	r2, #5
 8004802:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <MX_IWDG_Init+0x2c>)
 8004806:	f640 72ff 	movw	r2, #4095	; 0xfff
 800480a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800480c:	4804      	ldr	r0, [pc, #16]	; (8004820 <MX_IWDG_Init+0x2c>)
 800480e:	f002 f9eb 	bl	8006be8 <HAL_IWDG_Init>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8004818:	f000 f90c 	bl	8004a34 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000380 	.word	0x20000380
 8004824:	40003000 	.word	0x40003000

08004828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800482c:	4b17      	ldr	r3, [pc, #92]	; (800488c <MX_SPI1_Init+0x64>)
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <MX_SPI1_Init+0x68>)
 8004830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <MX_SPI1_Init+0x64>)
 8004834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <MX_SPI1_Init+0x64>)
 800483c:	2200      	movs	r2, #0
 800483e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004840:	4b12      	ldr	r3, [pc, #72]	; (800488c <MX_SPI1_Init+0x64>)
 8004842:	2200      	movs	r2, #0
 8004844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <MX_SPI1_Init+0x64>)
 8004848:	2202      	movs	r2, #2
 800484a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <MX_SPI1_Init+0x64>)
 800484e:	2201      	movs	r2, #1
 8004850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <MX_SPI1_Init+0x64>)
 8004854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <MX_SPI1_Init+0x64>)
 800485c:	2220      	movs	r2, #32
 800485e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <MX_SPI1_Init+0x64>)
 8004862:	2200      	movs	r2, #0
 8004864:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <MX_SPI1_Init+0x64>)
 8004868:	2200      	movs	r2, #0
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <MX_SPI1_Init+0x64>)
 800486e:	2200      	movs	r2, #0
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <MX_SPI1_Init+0x64>)
 8004874:	220a      	movs	r2, #10
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004878:	4804      	ldr	r0, [pc, #16]	; (800488c <MX_SPI1_Init+0x64>)
 800487a:	f002 fe3b 	bl	80074f4 <HAL_SPI_Init>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004884:	f000 f8d6 	bl	8004a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004888:	bf00      	nop
 800488a:	bd80      	pop	{r7, pc}
 800488c:	2000e5ac 	.word	0x2000e5ac
 8004890:	40013000 	.word	0x40013000

08004894 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <MX_USART6_UART_Init+0x50>)
 800489c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048ba:	220c      	movs	r2, #12
 80048bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80048ca:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_USART6_UART_Init+0x4c>)
 80048cc:	f003 fb66 	bl	8007f9c <HAL_UART_Init>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80048d6:	f000 f8ad 	bl	8004a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000e56c 	.word	0x2000e56c
 80048e4:	40011400 	.word	0x40011400

080048e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ee:	f107 030c 	add.w	r3, r7, #12
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	609a      	str	r2, [r3, #8]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004924:	f043 0308 	orr.w	r3, r3, #8
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <MX_GPIO_Init+0xec>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <MX_GPIO_Init+0xec>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	6313      	str	r3, [r2, #48]	; 0x30
 8004946:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <MX_GPIO_Init+0xec>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8004952:	2200      	movs	r2, #0
 8004954:	2118      	movs	r1, #24
 8004956:	4820      	ldr	r0, [pc, #128]	; (80049d8 <MX_GPIO_Init+0xf0>)
 8004958:	f002 f914 	bl	8006b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800495c:	2200      	movs	r2, #0
 800495e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004962:	481e      	ldr	r0, [pc, #120]	; (80049dc <MX_GPIO_Init+0xf4>)
 8004964:	f002 f90e 	bl	8006b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004968:	2304      	movs	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <MX_GPIO_Init+0xf8>)
 800496e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4619      	mov	r1, r3
 800497a:	4817      	ldr	r0, [pc, #92]	; (80049d8 <MX_GPIO_Init+0xf0>)
 800497c:	f001 ff68 	bl	8006850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004980:	2318      	movs	r3, #24
 8004982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004984:	2301      	movs	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004990:	f107 030c 	add.w	r3, r7, #12
 8004994:	4619      	mov	r1, r3
 8004996:	4810      	ldr	r0, [pc, #64]	; (80049d8 <MX_GPIO_Init+0xf0>)
 8004998:	f001 ff5a 	bl	8006850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800499c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a2:	2301      	movs	r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a6:	2301      	movs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ae:	f107 030c 	add.w	r3, r7, #12
 80049b2:	4619      	mov	r1, r3
 80049b4:	4809      	ldr	r0, [pc, #36]	; (80049dc <MX_GPIO_Init+0xf4>)
 80049b6:	f001 ff4b 	bl	8006850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80049ba:	2200      	movs	r2, #0
 80049bc:	2100      	movs	r1, #0
 80049be:	2008      	movs	r0, #8
 80049c0:	f001 ff0f 	bl	80067e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80049c4:	2008      	movs	r0, #8
 80049c6:	f001 ff28 	bl	800681a <HAL_NVIC_EnableIRQ>

}
 80049ca:	bf00      	nop
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020c00 	.word	0x40020c00
 80049e0:	10110000 	.word	0x10110000

080049e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_2)
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d114      	bne.n	8004a1e <HAL_GPIO_EXTI_Callback+0x3a>
	{

		dataReady = true;
 80049f4:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x48>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
		sampleCount++;
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x4c>)
 80049fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	b21a      	sxth	r2, r3
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004a0a:	801a      	strh	r2, [r3, #0]
		if(sampleCount > 2048)
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a16:	dd02      	ble.n	8004a1e <HAL_GPIO_EXTI_Callback+0x3a>
		{
			sampleCount = 0;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
		}


	}
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	200000da 	.word	0x200000da
 8004a30:	200000d8 	.word	0x200000d8

08004a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d204      	bcs.n	8004a64 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	701a      	strb	r2, [r3, #0]
  }
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e002      	b.n	8004aa2 <_strnlen_s+0x16>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <_strnlen_s+0x28>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	603a      	str	r2, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f3      	bne.n	8004a9c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	2b2f      	cmp	r3, #47	; 0x2f
 8004ad4:	d904      	bls.n	8004ae0 <_is_digit+0x1a>
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b39      	cmp	r3, #57	; 0x39
 8004ada:	d801      	bhi.n	8004ae0 <_is_digit+0x1a>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <_is_digit+0x1c>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004b00:	e00e      	b.n	8004b20 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1c59      	adds	r1, r3, #1
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6011      	str	r1, [r2, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	4403      	add	r3, r0
 8004b1c:	3b30      	subs	r3, #48	; 0x30
 8004b1e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ffcd 	bl	8004ac6 <_is_digit>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e7      	bne.n	8004b02 <_atoi+0xe>
  }
  return i;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d125      	bne.n	8004ba4 <_out_rev+0x68>
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d120      	bne.n	8004ba4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e00a      	b.n	8004b7e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	1c53      	adds	r3, r2, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	68fc      	ldr	r4, [r7, #12]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	2020      	movs	r0, #32
 8004b76:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3f0      	bcc.n	8004b68 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004b86:	e00d      	b.n	8004ba4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	4413      	add	r3, r2
 8004b94:	7818      	ldrb	r0, [r3, #0]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	1c53      	adds	r3, r2, #1
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	68fc      	ldr	r4, [r7, #12]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	47a0      	blx	r4
  while (len) {
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1ee      	bne.n	8004b88 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004bb4:	e007      	b.n	8004bc6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	1c53      	adds	r3, r2, #1
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	68fc      	ldr	r4, [r7, #12]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	2020      	movs	r0, #32
 8004bc4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d8f1      	bhi.n	8004bb6 <_out_rev+0x7a>
    }
  }

  return idx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af04      	add	r7, sp, #16
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d136      	bne.n	8004c62 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <_ntoa_format+0x50>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <_ntoa_format+0x50>
 8004c04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <_ntoa_format+0x3a>
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <_ntoa_format+0x50>
      width--;
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c1c:	e006      	b.n	8004c2c <_ntoa_format+0x50>
      buf[len++] = '0';
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	61fa      	str	r2, [r7, #28]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4413      	add	r3, r2
 8004c28:	2230      	movs	r2, #48	; 0x30
 8004c2a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d20a      	bcs.n	8004c4a <_ntoa_format+0x6e>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b1f      	cmp	r3, #31
 8004c38:	d9f1      	bls.n	8004c1e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c3a:	e006      	b.n	8004c4a <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	2230      	movs	r2, #48	; 0x30
 8004c48:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d006      	beq.n	8004c62 <_ntoa_format+0x86>
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d202      	bcs.n	8004c62 <_ntoa_format+0x86>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b1f      	cmp	r3, #31
 8004c60:	d9ec      	bls.n	8004c3c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d058      	beq.n	8004d1e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d116      	bne.n	8004ca4 <_ntoa_format+0xc8>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d013      	beq.n	8004ca4 <_ntoa_format+0xc8>
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d003      	beq.n	8004c8c <_ntoa_format+0xb0>
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d10b      	bne.n	8004ca4 <_ntoa_format+0xc8>
      len--;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <_ntoa_format+0xc8>
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d102      	bne.n	8004ca4 <_ntoa_format+0xc8>
        len--;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d10f      	bne.n	8004cca <_ntoa_format+0xee>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <_ntoa_format+0xee>
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b1f      	cmp	r3, #31
 8004cb8:	d807      	bhi.n	8004cca <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	61fa      	str	r2, [r7, #28]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	2278      	movs	r2, #120	; 0x78
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e01f      	b.n	8004d0a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d10f      	bne.n	8004cf0 <_ntoa_format+0x114>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <_ntoa_format+0x114>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b1f      	cmp	r3, #31
 8004cde:	d807      	bhi.n	8004cf0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	61fa      	str	r2, [r7, #28]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4413      	add	r3, r2
 8004cea:	2258      	movs	r2, #88	; 0x58
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e00c      	b.n	8004d0a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d109      	bne.n	8004d0a <_ntoa_format+0x12e>
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b1f      	cmp	r3, #31
 8004cfa:	d806      	bhi.n	8004d0a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	61fa      	str	r2, [r7, #28]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4413      	add	r3, r2
 8004d06:	2262      	movs	r2, #98	; 0x62
 8004d08:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b1f      	cmp	r3, #31
 8004d0e:	d806      	bhi.n	8004d1e <_ntoa_format+0x142>
      buf[len++] = '0';
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	61fa      	str	r2, [r7, #28]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4413      	add	r3, r2
 8004d1a:	2230      	movs	r2, #48	; 0x30
 8004d1c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	2b1f      	cmp	r3, #31
 8004d22:	d824      	bhi.n	8004d6e <_ntoa_format+0x192>
    if (negative) {
 8004d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <_ntoa_format+0x160>
      buf[len++] = '-';
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	222d      	movs	r2, #45	; 0x2d
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e018      	b.n	8004d6e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	61fa      	str	r2, [r7, #28]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4413      	add	r3, r2
 8004d50:	222b      	movs	r2, #43	; 0x2b
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e00b      	b.n	8004d6e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	61fa      	str	r2, [r7, #28]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	9303      	str	r3, [sp, #12]
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fed9 	bl	8004b3c <_out_rev>
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b096      	sub	sp, #88	; 0x58
 8004d98:	af08      	add	r7, sp, #32
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dae:	f023 0310 	bic.w	r3, r3, #16
 8004db2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <_ntoa_long+0x30>
 8004dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d033      	beq.n	8004e2c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8004dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dce:	fb01 f202 	mul.w	r2, r1, r2
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d804      	bhi.n	8004dea <_ntoa_long+0x56>
 8004de0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004de4:	3330      	adds	r3, #48	; 0x30
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	e00d      	b.n	8004e06 <_ntoa_long+0x72>
 8004dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <_ntoa_long+0x64>
 8004df4:	2241      	movs	r2, #65	; 0x41
 8004df6:	e000      	b.n	8004dfa <_ntoa_long+0x66>
 8004df8:	2261      	movs	r2, #97	; 0x61
 8004dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dfe:	4413      	add	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b0a      	subs	r3, #10
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	6379      	str	r1, [r7, #52]	; 0x34
 8004e0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004e10:	440b      	add	r3, r1
 8004e12:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <_ntoa_long+0x98>
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	2b1f      	cmp	r3, #31
 8004e2a:	d9cb      	bls.n	8004dc4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2e:	9306      	str	r3, [sp, #24]
 8004e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e32:	9305      	str	r3, [sp, #20]
 8004e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004e40:	9302      	str	r3, [sp, #8]
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	f107 0310 	add.w	r3, r7, #16
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff fec2 	bl	8004bdc <_ntoa_format>
 8004e58:	4603      	mov	r3, r0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3738      	adds	r7, #56	; 0x38
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004e62:	b590      	push	{r4, r7, lr}
 8004e64:	b097      	sub	sp, #92	; 0x5c
 8004e66:	af08      	add	r7, sp, #32
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004e74:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004e78:	4323      	orrs	r3, r4
 8004e7a:	d103      	bne.n	8004e84 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e7e:	f023 0310 	bic.w	r3, r3, #16
 8004e82:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <_ntoa_long_long+0x34>
 8004e8e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004e92:	4323      	orrs	r3, r4
 8004e94:	d039      	beq.n	8004f0a <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8004e96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e9e:	f7fb feff 	bl	8000ca0 <__aeabi_uldivmod>
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004eaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eae:	2b09      	cmp	r3, #9
 8004eb0:	d804      	bhi.n	8004ebc <_ntoa_long_long+0x5a>
 8004eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eb6:	3330      	adds	r3, #48	; 0x30
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	e00d      	b.n	8004ed8 <_ntoa_long_long+0x76>
 8004ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <_ntoa_long_long+0x68>
 8004ec6:	2241      	movs	r2, #65	; 0x41
 8004ec8:	e000      	b.n	8004ecc <_ntoa_long_long+0x6a>
 8004eca:	2261      	movs	r2, #97	; 0x61
 8004ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ed0:	4413      	add	r3, r2
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3b0a      	subs	r3, #10
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	6379      	str	r1, [r7, #52]	; 0x34
 8004ede:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004ee8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ef0:	f7fb fed6 	bl	8000ca0 <__aeabi_uldivmod>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004efc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004f00:	4323      	orrs	r3, r4
 8004f02:	d002      	beq.n	8004f0a <_ntoa_long_long+0xa8>
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	2b1f      	cmp	r3, #31
 8004f08:	d9c5      	bls.n	8004e96 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f0e:	9206      	str	r2, [sp, #24]
 8004f10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f12:	9205      	str	r2, [sp, #20]
 8004f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f16:	9204      	str	r2, [sp, #16]
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fe53 	bl	8004bdc <_ntoa_format>
 8004f36:	4603      	mov	r3, r0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	373c      	adds	r7, #60	; 0x3c
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}

08004f40 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b09d      	sub	sp, #116	; 0x74
 8004f44:	af04      	add	r7, sp, #16
 8004f46:	6178      	str	r0, [r7, #20]
 8004f48:	6139      	str	r1, [r7, #16]
 8004f4a:	60fa      	str	r2, [r7, #12]
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	f04f 0400 	mov.w	r4, #0
 8004f5e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f6a:	f7fb fdb9 	bl	8000ae0 <__aeabi_dcmpeq>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10f      	bne.n	8004f94 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f76:	9303      	str	r3, [sp, #12]
 8004f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7a:	9302      	str	r3, [sp, #8]
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	4baf      	ldr	r3, [pc, #700]	; (8005240 <_ftoa+0x300>)
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6939      	ldr	r1, [r7, #16]
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f7ff fdd6 	bl	8004b3c <_out_rev>
 8004f90:	4603      	mov	r3, r0
 8004f92:	e237      	b.n	8005404 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa0:	f7fb fda8 	bl	8000af4 <__aeabi_dcmplt>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00f      	beq.n	8004fca <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fac:	9303      	str	r3, [sp, #12]
 8004fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb0:	9302      	str	r3, [sp, #8]
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	4ba3      	ldr	r3, [pc, #652]	; (8005244 <_ftoa+0x304>)
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	6939      	ldr	r1, [r7, #16]
 8004fc0:	6978      	ldr	r0, [r7, #20]
 8004fc2:	f7ff fdbb 	bl	8004b3c <_out_rev>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	e21c      	b.n	8005404 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	4b9e      	ldr	r3, [pc, #632]	; (8005248 <_ftoa+0x308>)
 8004fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fd4:	f7fb fdac 	bl	8000b30 <__aeabi_dcmpgt>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01d      	beq.n	800501a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <_ftoa+0xac>
 8004fe8:	4b98      	ldr	r3, [pc, #608]	; (800524c <_ftoa+0x30c>)
 8004fea:	e000      	b.n	8004fee <_ftoa+0xae>
 8004fec:	4b98      	ldr	r3, [pc, #608]	; (8005250 <_ftoa+0x310>)
 8004fee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ff0:	f002 0204 	and.w	r2, r2, #4
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d001      	beq.n	8004ffc <_ftoa+0xbc>
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	e000      	b.n	8004ffe <_ftoa+0xbe>
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005000:	9103      	str	r1, [sp, #12]
 8005002:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005004:	9102      	str	r1, [sp, #8]
 8005006:	9201      	str	r2, [sp, #4]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	6939      	ldr	r1, [r7, #16]
 8005010:	6978      	ldr	r0, [r7, #20]
 8005012:	f7ff fd93 	bl	8004b3c <_out_rev>
 8005016:	4603      	mov	r3, r0
 8005018:	e1f4      	b.n	8005404 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800501a:	a385      	add	r3, pc, #532	; (adr r3, 8005230 <_ftoa+0x2f0>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005024:	f7fb fd84 	bl	8000b30 <__aeabi_dcmpgt>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <_ftoa+0x102>
 800502e:	a382      	add	r3, pc, #520	; (adr r3, 8005238 <_ftoa+0x2f8>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005038:	f7fb fd5c 	bl	8000af4 <__aeabi_dcmplt>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00f      	beq.n	8005062 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005044:	9302      	str	r3, [sp, #8]
 8005046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	ed97 0b00 	vldr	d0, [r7]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	f000 f9dd 	bl	8005418 <_etoa>
 800505e:	4603      	mov	r3, r0
 8005060:	e1d0      	b.n	8005404 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005074:	f7fb fd3e 	bl	8000af4 <__aeabi_dcmplt>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <_ftoa+0x15c>
    negative = true;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8005084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005088:	f04f 0000 	mov.w	r0, #0
 800508c:	f04f 0100 	mov.w	r1, #0
 8005090:	f7fb f906 	bl	80002a0 <__aeabi_dsub>
 8005094:	4603      	mov	r3, r0
 8005096:	460c      	mov	r4, r1
 8005098:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800509c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10e      	bne.n	80050c4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80050a6:	2306      	movs	r3, #6
 80050a8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80050aa:	e00b      	b.n	80050c4 <_ftoa+0x184>
    buf[len++] = '0';
 80050ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050b6:	4413      	add	r3, r2
 80050b8:	2230      	movs	r2, #48	; 0x30
 80050ba:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80050be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050c0:	3b01      	subs	r3, #1
 80050c2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80050c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c6:	2b1f      	cmp	r3, #31
 80050c8:	d802      	bhi.n	80050d0 <_ftoa+0x190>
 80050ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	d8ed      	bhi.n	80050ac <_ftoa+0x16c>
  }

  int whole = (int)value;
 80050d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050d4:	f7fb fd4c 	bl	8000b70 <__aeabi_d2iz>
 80050d8:	4603      	mov	r3, r0
 80050da:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80050dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80050de:	f7fb fa2d 	bl	800053c <__aeabi_i2d>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	461a      	mov	r2, r3
 80050e8:	4623      	mov	r3, r4
 80050ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ee:	f7fb f8d7 	bl	80002a0 <__aeabi_dsub>
 80050f2:	4603      	mov	r3, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	4618      	mov	r0, r3
 80050f8:	4621      	mov	r1, r4
 80050fa:	4a56      	ldr	r2, [pc, #344]	; (8005254 <_ftoa+0x314>)
 80050fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005106:	461a      	mov	r2, r3
 8005108:	4623      	mov	r3, r4
 800510a:	f7fb fa81 	bl	8000610 <__aeabi_dmul>
 800510e:	4603      	mov	r3, r0
 8005110:	460c      	mov	r4, r1
 8005112:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8005116:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800511a:	f7fb fd51 	bl	8000bc0 <__aeabi_d2uiz>
 800511e:	4603      	mov	r3, r0
 8005120:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8005122:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005124:	f7fb f9fa 	bl	800051c <__aeabi_ui2d>
 8005128:	4603      	mov	r3, r0
 800512a:	460c      	mov	r4, r1
 800512c:	461a      	mov	r2, r3
 800512e:	4623      	mov	r3, r4
 8005130:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005134:	f7fb f8b4 	bl	80002a0 <__aeabi_dsub>
 8005138:	4603      	mov	r3, r0
 800513a:	460c      	mov	r4, r1
 800513c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	4b44      	ldr	r3, [pc, #272]	; (8005258 <_ftoa+0x318>)
 8005146:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800514a:	f7fb fcf1 	bl	8000b30 <__aeabi_dcmpgt>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d018      	beq.n	8005186 <_ftoa+0x246>
    ++frac;
 8005154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005156:	3301      	adds	r3, #1
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800515a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800515c:	f7fb f9de 	bl	800051c <__aeabi_ui2d>
 8005160:	4a3c      	ldr	r2, [pc, #240]	; (8005254 <_ftoa+0x314>)
 8005162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800516c:	461a      	mov	r2, r3
 800516e:	4623      	mov	r3, r4
 8005170:	f7fb fcd4 	bl	8000b1c <__aeabi_dcmpge>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01a      	beq.n	80051b0 <_ftoa+0x270>
      frac = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800517e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005180:	3301      	adds	r3, #1
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
 8005184:	e014      	b.n	80051b0 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	4b33      	ldr	r3, [pc, #204]	; (8005258 <_ftoa+0x318>)
 800518c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005190:	f7fb fcb0 	bl	8000af4 <__aeabi_dcmplt>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <_ftoa+0x26a>
 80051a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80051aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ac:	3301      	adds	r3, #1
 80051ae:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80051b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d136      	bne.n	8005224 <_ftoa+0x2e4>
    diff = value - (double)whole;
 80051b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80051b8:	f7fb f9c0 	bl	800053c <__aeabi_i2d>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	461a      	mov	r2, r3
 80051c2:	4623      	mov	r3, r4
 80051c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051c8:	f7fb f86a 	bl	80002a0 <__aeabi_dsub>
 80051cc:	4603      	mov	r3, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80051d4:	2301      	movs	r3, #1
 80051d6:	461c      	mov	r4, r3
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <_ftoa+0x318>)
 80051de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80051e2:	f7fb fc87 	bl	8000af4 <__aeabi_dcmplt>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <_ftoa+0x2b0>
 80051ec:	2300      	movs	r3, #0
 80051ee:	461c      	mov	r4, r3
 80051f0:	b2e3      	uxtb	r3, r4
 80051f2:	f083 0301 	eor.w	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <_ftoa+0x2d0>
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	4b15      	ldr	r3, [pc, #84]	; (8005258 <_ftoa+0x318>)
 8005202:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005206:	f7fb fc93 	bl	8000b30 <__aeabi_dcmpgt>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d069      	beq.n	80052e4 <_ftoa+0x3a4>
 8005210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8087 	beq.w	800532a <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800521c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521e:	3301      	adds	r3, #1
 8005220:	657b      	str	r3, [r7, #84]	; 0x54
 8005222:	e082      	b.n	800532a <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 8005224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005228:	e039      	b.n	800529e <_ftoa+0x35e>
 800522a:	bf00      	nop
 800522c:	f3af 8000 	nop.w
 8005230:	00000000 	.word	0x00000000
 8005234:	41cdcd65 	.word	0x41cdcd65
 8005238:	00000000 	.word	0x00000000
 800523c:	c1cdcd65 	.word	0xc1cdcd65
 8005240:	08008c60 	.word	0x08008c60
 8005244:	08008c64 	.word	0x08008c64
 8005248:	7fefffff 	.word	0x7fefffff
 800524c:	08008c6c 	.word	0x08008c6c
 8005250:	08008c74 	.word	0x08008c74
 8005254:	0800ea48 	.word	0x0800ea48
 8005258:	3fe00000 	.word	0x3fe00000
      --count;
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	3b01      	subs	r3, #1
 8005260:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8005262:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005264:	4b69      	ldr	r3, [pc, #420]	; (800540c <_ftoa+0x4cc>)
 8005266:	fba3 2301 	umull	r2, r3, r3, r1
 800526a:	08da      	lsrs	r2, r3, #3
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	1aca      	subs	r2, r1, r3
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800527e:	3230      	adds	r2, #48	; 0x30
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005286:	440b      	add	r3, r1
 8005288:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800528c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528e:	4a5f      	ldr	r2, [pc, #380]	; (800540c <_ftoa+0x4cc>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	08db      	lsrs	r3, r3, #3
 8005296:	653b      	str	r3, [r7, #80]	; 0x50
 8005298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a0:	2b1f      	cmp	r3, #31
 80052a2:	d9db      	bls.n	800525c <_ftoa+0x31c>
 80052a4:	e00a      	b.n	80052bc <_ftoa+0x37c>
        break;
 80052a6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80052a8:	e008      	b.n	80052bc <_ftoa+0x37c>
      buf[len++] = '0';
 80052aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80052b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052b4:	4413      	add	r3, r2
 80052b6:	2230      	movs	r2, #48	; 0x30
 80052b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80052bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052be:	2b1f      	cmp	r3, #31
 80052c0:	d804      	bhi.n	80052cc <_ftoa+0x38c>
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	1e5a      	subs	r2, r3, #1
 80052c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ee      	bne.n	80052aa <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80052cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ce:	2b1f      	cmp	r3, #31
 80052d0:	d82b      	bhi.n	800532a <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 80052d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80052d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052dc:	4413      	add	r3, r2
 80052de:	222e      	movs	r2, #46	; 0x2e
 80052e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80052e4:	e021      	b.n	800532a <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 80052e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052e8:	4b49      	ldr	r3, [pc, #292]	; (8005410 <_ftoa+0x4d0>)
 80052ea:	fb83 1302 	smull	r1, r3, r3, r2
 80052ee:	1099      	asrs	r1, r3, #2
 80052f0:	17d3      	asrs	r3, r2, #31
 80052f2:	1ac9      	subs	r1, r1, r3
 80052f4:	460b      	mov	r3, r1
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	1ad1      	subs	r1, r2, r3
 80052fe:	b2ca      	uxtb	r2, r1
 8005300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	65f9      	str	r1, [r7, #92]	; 0x5c
 8005306:	3230      	adds	r2, #48	; 0x30
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800530e:	440b      	add	r3, r1
 8005310:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8005314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005316:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <_ftoa+0x4d0>)
 8005318:	fb82 1203 	smull	r1, r2, r2, r3
 800531c:	1092      	asrs	r2, r2, #2
 800531e:	17db      	asrs	r3, r3, #31
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	657b      	str	r3, [r7, #84]	; 0x54
 8005324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800532a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800532c:	2b1f      	cmp	r3, #31
 800532e:	d9da      	bls.n	80052e6 <_ftoa+0x3a6>
 8005330:	e000      	b.n	8005334 <_ftoa+0x3f4>
      break;
 8005332:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d124      	bne.n	8005388 <_ftoa+0x448>
 800533e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01f      	beq.n	8005388 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800534a:	2b00      	cmp	r3, #0
 800534c:	d015      	beq.n	800537a <_ftoa+0x43a>
 800534e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005352:	2b00      	cmp	r3, #0
 8005354:	d104      	bne.n	8005360 <_ftoa+0x420>
 8005356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <_ftoa+0x43a>
      width--;
 8005360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005362:	3b01      	subs	r3, #1
 8005364:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005366:	e008      	b.n	800537a <_ftoa+0x43a>
      buf[len++] = '0';
 8005368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800536e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005372:	4413      	add	r3, r2
 8005374:	2230      	movs	r2, #48	; 0x30
 8005376:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800537a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800537c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537e:	429a      	cmp	r2, r3
 8005380:	d202      	bcs.n	8005388 <_ftoa+0x448>
 8005382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005384:	2b1f      	cmp	r3, #31
 8005386:	d9ef      	bls.n	8005368 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800538a:	2b1f      	cmp	r3, #31
 800538c:	d82a      	bhi.n	80053e4 <_ftoa+0x4a4>
    if (negative) {
 800538e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <_ftoa+0x46a>
      buf[len++] = '-';
 8005396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800539c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053a0:	4413      	add	r3, r2
 80053a2:	222d      	movs	r2, #45	; 0x2d
 80053a4:	f803 2c48 	strb.w	r2, [r3, #-72]
 80053a8:	e01c      	b.n	80053e4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80053aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80053b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80053ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053be:	4413      	add	r3, r2
 80053c0:	222b      	movs	r2, #43	; 0x2b
 80053c2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80053c6:	e00d      	b.n	80053e4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 80053c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <_ftoa+0x4a4>
      buf[len++] = ' ';
 80053d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80053d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053dc:	4413      	add	r3, r2
 80053de:	2220      	movs	r2, #32
 80053e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80053e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	6939      	ldr	r1, [r7, #16]
 80053fc:	6978      	ldr	r0, [r7, #20]
 80053fe:	f7ff fb9d 	bl	8004b3c <_out_rev>
 8005402:	4603      	mov	r3, r0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3764      	adds	r7, #100	; 0x64
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}
 800540c:	cccccccd 	.word	0xcccccccd
 8005410:	66666667 	.word	0x66666667
 8005414:	00000000 	.word	0x00000000

08005418 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	b09d      	sub	sp, #116	; 0x74
 800541e:	af06      	add	r7, sp, #24
 8005420:	61f8      	str	r0, [r7, #28]
 8005422:	61b9      	str	r1, [r7, #24]
 8005424:	617a      	str	r2, [r7, #20]
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800542c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005434:	f7fb fb54 	bl	8000ae0 <__aeabi_dcmpeq>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d014      	beq.n	8005468 <_etoa+0x50>
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	4bc9      	ldr	r3, [pc, #804]	; (8005768 <_etoa+0x350>)
 8005444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005448:	f7fb fb72 	bl	8000b30 <__aeabi_dcmpgt>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <_etoa+0x50>
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800545a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800545e:	f7fb fb49 	bl	8000af4 <__aeabi_dcmplt>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800546c:	9302      	str	r3, [sp, #8]
 800546e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	ed97 0b02 	vldr	d0, [r7, #8]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	69f8      	ldr	r0, [r7, #28]
 8005486:	f7ff fd5b 	bl	8004f40 <_ftoa>
 800548a:	4603      	mov	r3, r0
 800548c:	e24f      	b.n	800592e <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800548e:	2301      	movs	r3, #1
 8005490:	461c      	mov	r4, r3
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800549e:	f7fb fb29 	bl	8000af4 <__aeabi_dcmplt>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <_etoa+0x94>
 80054a8:	2300      	movs	r3, #0
 80054aa:	461c      	mov	r4, r3
 80054ac:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80054b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <_etoa+0xac>
    value = -value;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80054c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80054d0:	2306      	movs	r3, #6
 80054d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80054d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80054da:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80054de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	f04f 0400 	mov.w	r4, #0
 80054ea:	0d13      	lsrs	r3, r2, #20
 80054ec:	2400      	movs	r4, #0
 80054ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054f6:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80054f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80054fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005500:	4a9a      	ldr	r2, [pc, #616]	; (800576c <_etoa+0x354>)
 8005502:	ea03 0801 	and.w	r8, r3, r1
 8005506:	ea04 0902 	and.w	r9, r4, r2
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	4a98      	ldr	r2, [pc, #608]	; (8005770 <_etoa+0x358>)
 8005510:	ea48 0301 	orr.w	r3, r8, r1
 8005514:	ea49 0402 	orr.w	r4, r9, r2
 8005518:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800551c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800551e:	f7fb f80d 	bl	800053c <__aeabi_i2d>
 8005522:	a385      	add	r3, pc, #532	; (adr r3, 8005738 <_etoa+0x320>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fb f872 	bl	8000610 <__aeabi_dmul>
 800552c:	4603      	mov	r3, r0
 800552e:	460c      	mov	r4, r1
 8005530:	4618      	mov	r0, r3
 8005532:	4621      	mov	r1, r4
 8005534:	a382      	add	r3, pc, #520	; (adr r3, 8005740 <_etoa+0x328>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fa feb3 	bl	80002a4 <__adddf3>
 800553e:	4603      	mov	r3, r0
 8005540:	460c      	mov	r4, r1
 8005542:	4698      	mov	r8, r3
 8005544:	46a1      	mov	r9, r4
 8005546:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	4b89      	ldr	r3, [pc, #548]	; (8005774 <_etoa+0x35c>)
 8005550:	f7fa fea6 	bl	80002a0 <__aeabi_dsub>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4618      	mov	r0, r3
 800555a:	4621      	mov	r1, r4
 800555c:	a37a      	add	r3, pc, #488	; (adr r3, 8005748 <_etoa+0x330>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fb f855 	bl	8000610 <__aeabi_dmul>
 8005566:	4603      	mov	r3, r0
 8005568:	460c      	mov	r4, r1
 800556a:	461a      	mov	r2, r3
 800556c:	4623      	mov	r3, r4
 800556e:	4640      	mov	r0, r8
 8005570:	4649      	mov	r1, r9
 8005572:	f7fa fe97 	bl	80002a4 <__adddf3>
 8005576:	4603      	mov	r3, r0
 8005578:	460c      	mov	r4, r1
 800557a:	4618      	mov	r0, r3
 800557c:	4621      	mov	r1, r4
 800557e:	f7fb faf7 	bl	8000b70 <__aeabi_d2iz>
 8005582:	4603      	mov	r3, r0
 8005584:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005586:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005588:	f7fa ffd8 	bl	800053c <__aeabi_i2d>
 800558c:	a370      	add	r3, pc, #448	; (adr r3, 8005750 <_etoa+0x338>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fb f83d 	bl	8000610 <__aeabi_dmul>
 8005596:	4603      	mov	r3, r0
 8005598:	460c      	mov	r4, r1
 800559a:	4618      	mov	r0, r3
 800559c:	4621      	mov	r1, r4
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b75      	ldr	r3, [pc, #468]	; (8005778 <_etoa+0x360>)
 80055a4:	f7fa fe7e 	bl	80002a4 <__adddf3>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	4618      	mov	r0, r3
 80055ae:	4621      	mov	r1, r4
 80055b0:	f7fb fade 	bl	8000b70 <__aeabi_d2iz>
 80055b4:	4603      	mov	r3, r0
 80055b6:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80055b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80055ba:	f7fa ffbf 	bl	800053c <__aeabi_i2d>
 80055be:	a366      	add	r3, pc, #408	; (adr r3, 8005758 <_etoa+0x340>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f7fb f824 	bl	8000610 <__aeabi_dmul>
 80055c8:	4603      	mov	r3, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	4698      	mov	r8, r3
 80055ce:	46a1      	mov	r9, r4
 80055d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80055d2:	f7fa ffb3 	bl	800053c <__aeabi_i2d>
 80055d6:	a362      	add	r3, pc, #392	; (adr r3, 8005760 <_etoa+0x348>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f818 	bl	8000610 <__aeabi_dmul>
 80055e0:	4603      	mov	r3, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	461a      	mov	r2, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fa fe58 	bl	80002a0 <__aeabi_dsub>
 80055f0:	4603      	mov	r3, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 80055f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005600:	f7fb f806 	bl	8000610 <__aeabi_dmul>
 8005604:	4603      	mov	r3, r0
 8005606:	460c      	mov	r4, r1
 8005608:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800560c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005612:	4619      	mov	r1, r3
 8005614:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	f04f 0400 	mov.w	r4, #0
 8005620:	050c      	lsls	r4, r1, #20
 8005622:	2300      	movs	r3, #0
 8005624:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005628:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800562c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	f7fa fe36 	bl	80002a4 <__adddf3>
 8005638:	4603      	mov	r3, r0
 800563a:	460c      	mov	r4, r1
 800563c:	469a      	mov	sl, r3
 800563e:	46a3      	mov	fp, r4
 8005640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800564c:	f7fa fe28 	bl	80002a0 <__aeabi_dsub>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	e9c7 3400 	strd	r3, r4, [r7]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	4b47      	ldr	r3, [pc, #284]	; (800577c <_etoa+0x364>)
 800565e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005662:	f7fb f8ff 	bl	8000864 <__aeabi_ddiv>
 8005666:	4603      	mov	r3, r0
 8005668:	460c      	mov	r4, r1
 800566a:	4618      	mov	r0, r3
 800566c:	4621      	mov	r1, r4
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	4b43      	ldr	r3, [pc, #268]	; (8005780 <_etoa+0x368>)
 8005674:	f7fa fe16 	bl	80002a4 <__adddf3>
 8005678:	4603      	mov	r3, r0
 800567a:	460c      	mov	r4, r1
 800567c:	461a      	mov	r2, r3
 800567e:	4623      	mov	r3, r4
 8005680:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005684:	f7fb f8ee 	bl	8000864 <__aeabi_ddiv>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	4618      	mov	r0, r3
 800568e:	4621      	mov	r1, r4
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <_etoa+0x36c>)
 8005696:	f7fa fe05 	bl	80002a4 <__adddf3>
 800569a:	4603      	mov	r3, r0
 800569c:	460c      	mov	r4, r1
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80056a6:	f7fb f8dd 	bl	8000864 <__aeabi_ddiv>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	461a      	mov	r2, r3
 80056b0:	4623      	mov	r3, r4
 80056b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b6:	f7fa fdf5 	bl	80002a4 <__adddf3>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	461a      	mov	r2, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	4650      	mov	r0, sl
 80056c4:	4659      	mov	r1, fp
 80056c6:	f7fb f8cd 	bl	8000864 <__aeabi_ddiv>
 80056ca:	4603      	mov	r3, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	4618      	mov	r0, r3
 80056d0:	4621      	mov	r1, r4
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	4b26      	ldr	r3, [pc, #152]	; (8005770 <_etoa+0x358>)
 80056d8:	f7fa fde4 	bl	80002a4 <__adddf3>
 80056dc:	4603      	mov	r3, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	461a      	mov	r2, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	4640      	mov	r0, r8
 80056e6:	4649      	mov	r1, r9
 80056e8:	f7fa ff92 	bl	8000610 <__aeabi_dmul>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80056f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80056f8:	461a      	mov	r2, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005700:	f7fb f9f8 	bl	8000af4 <__aeabi_dcmplt>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00d      	beq.n	8005726 <_etoa+0x30e>
    expval--;
 800570a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570c:	3b01      	subs	r3, #1
 800570e:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8005710:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	4b19      	ldr	r3, [pc, #100]	; (8005780 <_etoa+0x368>)
 800571a:	f7fb f8a3 	bl	8000864 <__aeabi_ddiv>
 800571e:	4603      	mov	r3, r0
 8005720:	460c      	mov	r4, r1
 8005722:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005728:	2b63      	cmp	r3, #99	; 0x63
 800572a:	dc2d      	bgt.n	8005788 <_etoa+0x370>
 800572c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800572e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005732:	db29      	blt.n	8005788 <_etoa+0x370>
 8005734:	2304      	movs	r3, #4
 8005736:	e028      	b.n	800578a <_etoa+0x372>
 8005738:	509f79fb 	.word	0x509f79fb
 800573c:	3fd34413 	.word	0x3fd34413
 8005740:	8b60c8b3 	.word	0x8b60c8b3
 8005744:	3fc68a28 	.word	0x3fc68a28
 8005748:	636f4361 	.word	0x636f4361
 800574c:	3fd287a7 	.word	0x3fd287a7
 8005750:	0979a371 	.word	0x0979a371
 8005754:	400a934f 	.word	0x400a934f
 8005758:	bbb55516 	.word	0xbbb55516
 800575c:	40026bb1 	.word	0x40026bb1
 8005760:	fefa39ef 	.word	0xfefa39ef
 8005764:	3fe62e42 	.word	0x3fe62e42
 8005768:	7fefffff 	.word	0x7fefffff
 800576c:	000fffff 	.word	0x000fffff
 8005770:	3ff00000 	.word	0x3ff00000
 8005774:	3ff80000 	.word	0x3ff80000
 8005778:	3fe00000 	.word	0x3fe00000
 800577c:	402c0000 	.word	0x402c0000
 8005780:	40240000 	.word	0x40240000
 8005784:	40180000 	.word	0x40180000
 8005788:	2305      	movs	r3, #5
 800578a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800578c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005794:	2b00      	cmp	r3, #0
 8005796:	d03d      	beq.n	8005814 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005798:	a367      	add	r3, pc, #412	; (adr r3, 8005938 <_etoa+0x520>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057a2:	f7fb f9bb 	bl	8000b1c <__aeabi_dcmpge>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d024      	beq.n	80057f6 <_etoa+0x3de>
 80057ac:	a364      	add	r3, pc, #400	; (adr r3, 8005940 <_etoa+0x528>)
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057b6:	f7fb f99d 	bl	8000af4 <__aeabi_dcmplt>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01a      	beq.n	80057f6 <_etoa+0x3de>
      if ((int)prec > expval) {
 80057c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057c6:	429a      	cmp	r2, r3
 80057c8:	da07      	bge.n	80057da <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 80057ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d8:	e002      	b.n	80057e0 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80057e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	657b      	str	r3, [r7, #84]	; 0x54
 80057f4:	e00e      	b.n	8005814 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80057f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <_etoa+0x3fc>
 80057fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <_etoa+0x3fc>
        --prec;
 800580a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800580e:	3b01      	subs	r3, #1
 8005810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005818:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800581a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	429a      	cmp	r2, r3
 8005822:	d904      	bls.n	800582e <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	e001      	b.n	8005832 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <_etoa+0x430>
 800583e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8005848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <_etoa+0x44e>
    value /= conv.F;
 800584e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005852:	461a      	mov	r2, r3
 8005854:	4623      	mov	r3, r4
 8005856:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800585a:	f7fb f803 	bl	8000864 <__aeabi_ddiv>
 800585e:	4603      	mov	r3, r0
 8005860:	460c      	mov	r4, r1
 8005862:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800586a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <_etoa+0x464>
 8005872:	68bd      	ldr	r5, [r7, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800587a:	e001      	b.n	8005880 <_etoa+0x468>
 800587c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8005880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	ec46 5b10 	vmov	d0, r5, r6
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	69b9      	ldr	r1, [r7, #24]
 800589e:	69f8      	ldr	r0, [r7, #28]
 80058a0:	f7ff fb4e 	bl	8004f40 <_ftoa>
 80058a4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80058a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d03f      	beq.n	800592c <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80058ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <_etoa+0x4a4>
 80058b8:	2045      	movs	r0, #69	; 0x45
 80058ba:	e000      	b.n	80058be <_etoa+0x4a6>
 80058bc:	2065      	movs	r0, #101	; 0x65
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	1c53      	adds	r3, r2, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	69fc      	ldr	r4, [r7, #28]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80058cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	425b      	neglt	r3, r3
 80058d4:	4618      	mov	r0, r3
 80058d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058d8:	0fdb      	lsrs	r3, r3, #31
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058de:	3a01      	subs	r2, #1
 80058e0:	2105      	movs	r1, #5
 80058e2:	9105      	str	r1, [sp, #20]
 80058e4:	9204      	str	r2, [sp, #16]
 80058e6:	2200      	movs	r2, #0
 80058e8:	9203      	str	r2, [sp, #12]
 80058ea:	220a      	movs	r2, #10
 80058ec:	9202      	str	r2, [sp, #8]
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	9000      	str	r0, [sp, #0]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	69f8      	ldr	r0, [r7, #28]
 80058fa:	f7ff fa4b 	bl	8004d94 <_ntoa_long>
 80058fe:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00f      	beq.n	800592c <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800590c:	e007      	b.n	800591e <_etoa+0x506>
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	1c53      	adds	r3, r2, #1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	69fc      	ldr	r4, [r7, #28]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	69b9      	ldr	r1, [r7, #24]
 800591a:	2020      	movs	r0, #32
 800591c:	47a0      	blx	r4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005928:	429a      	cmp	r2, r3
 800592a:	d8f0      	bhi.n	800590e <_etoa+0x4f6>
    }
  }
  return idx;
 800592c:	697b      	ldr	r3, [r7, #20]
}
 800592e:	4618      	mov	r0, r3
 8005930:	375c      	adds	r7, #92	; 0x5c
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	eb1c432d 	.word	0xeb1c432d
 800593c:	3f1a36e2 	.word	0x3f1a36e2
 8005940:	00000000 	.word	0x00000000
 8005944:	412e8480 	.word	0x412e8480

08005948 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b0a0      	sub	sp, #128	; 0x80
 800594c:	af0a      	add	r7, sp, #40	; 0x28
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 8492 	bne.w	8006286 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 8005962:	4ba0      	ldr	r3, [pc, #640]	; (8005be4 <_vsnprintf+0x29c>)
 8005964:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8005966:	f000 bc8e 	b.w	8006286 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b25      	cmp	r3, #37	; 0x25
 8005970:	d00d      	beq.n	800598e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	7818      	ldrb	r0, [r3, #0]
 8005976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005978:	1c53      	adds	r3, r2, #1
 800597a:	647b      	str	r3, [r7, #68]	; 0x44
 800597c:	68fc      	ldr	r4, [r7, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	47a0      	blx	r4
      format++;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	603b      	str	r3, [r7, #0]
      continue;
 800598a:	f000 bc7c 	b.w	8006286 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	3b20      	subs	r3, #32
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d856      	bhi.n	8005a50 <_vsnprintf+0x108>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <_vsnprintf+0x60>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	08005a29 	.word	0x08005a29
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a51 	.word	0x08005a51
 80059b4:	08005a3d 	.word	0x08005a3d
 80059b8:	08005a51 	.word	0x08005a51
 80059bc:	08005a51 	.word	0x08005a51
 80059c0:	08005a51 	.word	0x08005a51
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a51 	.word	0x08005a51
 80059cc:	08005a51 	.word	0x08005a51
 80059d0:	08005a51 	.word	0x08005a51
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a51 	.word	0x08005a51
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a51 	.word	0x08005a51
 80059e4:	08005a51 	.word	0x08005a51
 80059e8:	080059ed 	.word	0x080059ed
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80059ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	2301      	movs	r3, #1
 80059fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80059fe:	e02a      	b.n	8005a56 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a02:	f043 0302 	orr.w	r3, r3, #2
 8005a06:	657b      	str	r3, [r7, #84]	; 0x54
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a12:	e020      	b.n	8005a56 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a16:	f043 0304 	orr.w	r3, r3, #4
 8005a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	2301      	movs	r3, #1
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a26:	e016      	b.n	8005a56 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a2a:	f043 0308 	orr.w	r3, r3, #8
 8005a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	2301      	movs	r3, #1
 8005a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3a:	e00c      	b.n	8005a56 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3e:	f043 0310 	orr.w	r3, r3, #16
 8005a42:	657b      	str	r3, [r7, #84]	; 0x54
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4e:	e002      	b.n	8005a56 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005a50:	2300      	movs	r3, #0
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a54:	bf00      	nop
      }
    } while (n);
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d19d      	bne.n	8005998 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff f82e 	bl	8004ac6 <_is_digit>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <_vsnprintf+0x134>
      width = _atoi(&format);
 8005a70:	463b      	mov	r3, r7
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f83e 	bl	8004af4 <_atoi>
 8005a78:	6538      	str	r0, [r7, #80]	; 0x50
 8005a7a:	e018      	b.n	8005aae <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b2a      	cmp	r3, #42	; 0x2a
 8005a82:	d114      	bne.n	8005aae <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8005a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	66ba      	str	r2, [r7, #104]	; 0x68
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da07      	bge.n	8005aa4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8005a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a96:	f043 0302 	orr.w	r3, r3, #2
 8005a9a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa2:	e001      	b.n	8005aa8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab8:	d124      	bne.n	8005b04 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ac0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fffa 	bl	8004ac6 <_is_digit>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff f80a 	bl	8004af4 <_atoi>
 8005ae0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005ae2:	e00f      	b.n	8005b04 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d10b      	bne.n	8005b04 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8005aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	66ba      	str	r2, [r7, #104]	; 0x68
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	3b68      	subs	r3, #104	; 0x68
 8005b0a:	2b12      	cmp	r3, #18
 8005b0c:	d866      	bhi.n	8005bdc <_vsnprintf+0x294>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <_vsnprintf+0x1cc>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b87 	.word	0x08005b87
 8005b18:	08005bdd 	.word	0x08005bdd
 8005b1c:	08005bbd 	.word	0x08005bbd
 8005b20:	08005bdd 	.word	0x08005bdd
 8005b24:	08005b61 	.word	0x08005b61
 8005b28:	08005bdd 	.word	0x08005bdd
 8005b2c:	08005bdd 	.word	0x08005bdd
 8005b30:	08005bdd 	.word	0x08005bdd
 8005b34:	08005bdd 	.word	0x08005bdd
 8005b38:	08005bdd 	.word	0x08005bdd
 8005b3c:	08005bdd 	.word	0x08005bdd
 8005b40:	08005bdd 	.word	0x08005bdd
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005bdd 	.word	0x08005bdd
 8005b4c:	08005bdd 	.word	0x08005bdd
 8005b50:	08005bdd 	.word	0x08005bdd
 8005b54:	08005bdd 	.word	0x08005bdd
 8005b58:	08005bdd 	.word	0x08005bdd
 8005b5c:	08005bcd 	.word	0x08005bcd
      case 'l' :
        flags |= FLAGS_LONG;
 8005b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b66:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b6c      	cmp	r3, #108	; 0x6c
 8005b74:	d134      	bne.n	8005be0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8005b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	603b      	str	r3, [r7, #0]
        }
        break;
 8005b84:	e02c      	b.n	8005be0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b68      	cmp	r3, #104	; 0x68
 8005b9a:	d125      	bne.n	8005be8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8005b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	603b      	str	r3, [r7, #0]
        }
        break;
 8005baa:	e01d      	b.n	8005be8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	603b      	str	r3, [r7, #0]
        break;
 8005bba:	e016      	b.n	8005bea <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	603b      	str	r3, [r7, #0]
        break;
 8005bca:	e00e      	b.n	8005bea <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	603b      	str	r3, [r7, #0]
        break;
 8005bda:	e006      	b.n	8005bea <_vsnprintf+0x2a2>
      default :
        break;
 8005bdc:	bf00      	nop
 8005bde:	e004      	b.n	8005bea <_vsnprintf+0x2a2>
        break;
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <_vsnprintf+0x2a2>
 8005be4:	08004a71 	.word	0x08004a71
        break;
 8005be8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	3b25      	subs	r3, #37	; 0x25
 8005bf0:	2b53      	cmp	r3, #83	; 0x53
 8005bf2:	f200 833b 	bhi.w	800626c <_vsnprintf+0x924>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <_vsnprintf+0x2b4>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08006255 	.word	0x08006255
 8005c00:	0800626d 	.word	0x0800626d
 8005c04:	0800626d 	.word	0x0800626d
 8005c08:	0800626d 	.word	0x0800626d
 8005c0c:	0800626d 	.word	0x0800626d
 8005c10:	0800626d 	.word	0x0800626d
 8005c14:	0800626d 	.word	0x0800626d
 8005c18:	0800626d 	.word	0x0800626d
 8005c1c:	0800626d 	.word	0x0800626d
 8005c20:	0800626d 	.word	0x0800626d
 8005c24:	0800626d 	.word	0x0800626d
 8005c28:	0800626d 	.word	0x0800626d
 8005c2c:	0800626d 	.word	0x0800626d
 8005c30:	0800626d 	.word	0x0800626d
 8005c34:	0800626d 	.word	0x0800626d
 8005c38:	0800626d 	.word	0x0800626d
 8005c3c:	0800626d 	.word	0x0800626d
 8005c40:	0800626d 	.word	0x0800626d
 8005c44:	0800626d 	.word	0x0800626d
 8005c48:	0800626d 	.word	0x0800626d
 8005c4c:	0800626d 	.word	0x0800626d
 8005c50:	0800626d 	.word	0x0800626d
 8005c54:	0800626d 	.word	0x0800626d
 8005c58:	0800626d 	.word	0x0800626d
 8005c5c:	0800626d 	.word	0x0800626d
 8005c60:	0800626d 	.word	0x0800626d
 8005c64:	0800626d 	.word	0x0800626d
 8005c68:	0800626d 	.word	0x0800626d
 8005c6c:	0800626d 	.word	0x0800626d
 8005c70:	0800626d 	.word	0x0800626d
 8005c74:	0800626d 	.word	0x0800626d
 8005c78:	0800626d 	.word	0x0800626d
 8005c7c:	08006025 	.word	0x08006025
 8005c80:	08005fd9 	.word	0x08005fd9
 8005c84:	08006025 	.word	0x08006025
 8005c88:	0800626d 	.word	0x0800626d
 8005c8c:	0800626d 	.word	0x0800626d
 8005c90:	0800626d 	.word	0x0800626d
 8005c94:	0800626d 	.word	0x0800626d
 8005c98:	0800626d 	.word	0x0800626d
 8005c9c:	0800626d 	.word	0x0800626d
 8005ca0:	0800626d 	.word	0x0800626d
 8005ca4:	0800626d 	.word	0x0800626d
 8005ca8:	0800626d 	.word	0x0800626d
 8005cac:	0800626d 	.word	0x0800626d
 8005cb0:	0800626d 	.word	0x0800626d
 8005cb4:	0800626d 	.word	0x0800626d
 8005cb8:	0800626d 	.word	0x0800626d
 8005cbc:	0800626d 	.word	0x0800626d
 8005cc0:	0800626d 	.word	0x0800626d
 8005cc4:	0800626d 	.word	0x0800626d
 8005cc8:	08005d4d 	.word	0x08005d4d
 8005ccc:	0800626d 	.word	0x0800626d
 8005cd0:	0800626d 	.word	0x0800626d
 8005cd4:	0800626d 	.word	0x0800626d
 8005cd8:	0800626d 	.word	0x0800626d
 8005cdc:	0800626d 	.word	0x0800626d
 8005ce0:	0800626d 	.word	0x0800626d
 8005ce4:	0800626d 	.word	0x0800626d
 8005ce8:	0800626d 	.word	0x0800626d
 8005cec:	0800626d 	.word	0x0800626d
 8005cf0:	08005d4d 	.word	0x08005d4d
 8005cf4:	08006091 	.word	0x08006091
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08006025 	.word	0x08006025
 8005d00:	08005fd9 	.word	0x08005fd9
 8005d04:	08006025 	.word	0x08006025
 8005d08:	0800626d 	.word	0x0800626d
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	0800626d 	.word	0x0800626d
 8005d14:	0800626d 	.word	0x0800626d
 8005d18:	0800626d 	.word	0x0800626d
 8005d1c:	0800626d 	.word	0x0800626d
 8005d20:	0800626d 	.word	0x0800626d
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	080061c9 	.word	0x080061c9
 8005d2c:	0800626d 	.word	0x0800626d
 8005d30:	0800626d 	.word	0x0800626d
 8005d34:	08006105 	.word	0x08006105
 8005d38:	0800626d 	.word	0x0800626d
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	0800626d 	.word	0x0800626d
 8005d44:	0800626d 	.word	0x0800626d
 8005d48:	08005d4d 	.word	0x08005d4d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b78      	cmp	r3, #120	; 0x78
 8005d52:	d003      	beq.n	8005d5c <_vsnprintf+0x414>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b58      	cmp	r3, #88	; 0x58
 8005d5a:	d102      	bne.n	8005d62 <_vsnprintf+0x41a>
          base = 16U;
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d60:	e013      	b.n	8005d8a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b6f      	cmp	r3, #111	; 0x6f
 8005d68:	d102      	bne.n	8005d70 <_vsnprintf+0x428>
          base =  8U;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d6e:	e00c      	b.n	8005d8a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b62      	cmp	r3, #98	; 0x62
 8005d76:	d102      	bne.n	8005d7e <_vsnprintf+0x436>
          base =  2U;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7c:	e005      	b.n	8005d8a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8005d7e:	230a      	movs	r3, #10
 8005d80:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d84:	f023 0310 	bic.w	r3, r3, #16
 8005d88:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b58      	cmp	r3, #88	; 0x58
 8005d90:	d103      	bne.n	8005d9a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8005d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d94:	f043 0320 	orr.w	r3, r3, #32
 8005d98:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b69      	cmp	r3, #105	; 0x69
 8005da0:	d007      	beq.n	8005db2 <_vsnprintf+0x46a>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d003      	beq.n	8005db2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dac:	f023 030c 	bic.w	r3, r3, #12
 8005db0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8005dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b69      	cmp	r3, #105	; 0x69
 8005dca:	d004      	beq.n	8005dd6 <_vsnprintf+0x48e>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b64      	cmp	r3, #100	; 0x64
 8005dd2:	f040 808d 	bne.w	8005ef0 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02e      	beq.n	8005e3e <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de2:	3307      	adds	r3, #7
 8005de4:	f023 0307 	bic.w	r3, r3, #7
 8005de8:	f103 0208 	add.w	r2, r3, #8
 8005dec:	66ba      	str	r2, [r7, #104]	; 0x68
 8005dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005df2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005df6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f174 0200 	sbcs.w	r2, r4, #0
 8005e00:	da02      	bge.n	8005e08 <_vsnprintf+0x4c0>
 8005e02:	425b      	negs	r3, r3
 8005e04:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	0fdb      	lsrs	r3, r3, #31
 8005e10:	b2d8      	uxtb	r0, r3
 8005e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e14:	f04f 0400 	mov.w	r4, #0
 8005e18:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8005e1a:	9508      	str	r5, [sp, #32]
 8005e1c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8005e1e:	9507      	str	r5, [sp, #28]
 8005e20:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8005e22:	9506      	str	r5, [sp, #24]
 8005e24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e28:	9002      	str	r0, [sp, #8]
 8005e2a:	e9cd 1200 	strd	r1, r2, [sp]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff f814 	bl	8004e62 <_ntoa_long_long>
 8005e3a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005e3c:	e0c8      	b.n	8005fd0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01e      	beq.n	8005e86 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8005e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	66ba      	str	r2, [r7, #104]	; 0x68
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bfb8      	it	lt
 8005e58:	425b      	neglt	r3, r3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	0fdb      	lsrs	r3, r3, #31
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e64:	9205      	str	r2, [sp, #20]
 8005e66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e68:	9204      	str	r2, [sp, #16]
 8005e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e6c:	9203      	str	r2, [sp, #12]
 8005e6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e70:	9202      	str	r2, [sp, #8]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	9100      	str	r1, [sp, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f7fe ff89 	bl	8004d94 <_ntoa_long>
 8005e82:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005e84:	e0a4      	b.n	8005fd0 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <_vsnprintf+0x554>
 8005e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	66ba      	str	r2, [r7, #104]	; 0x68
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e00e      	b.n	8005eba <_vsnprintf+0x572>
 8005e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <_vsnprintf+0x56a>
 8005ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	66ba      	str	r2, [r7, #104]	; 0x68
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	b21b      	sxth	r3, r3
 8005eb0:	e003      	b.n	8005eba <_vsnprintf+0x572>
 8005eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eb4:	1d1a      	adds	r2, r3, #4
 8005eb6:	66ba      	str	r2, [r7, #104]	; 0x68
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bfb8      	it	lt
 8005ec2:	425b      	neglt	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	0fdb      	lsrs	r3, r3, #31
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ece:	9205      	str	r2, [sp, #20]
 8005ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ed2:	9204      	str	r2, [sp, #16]
 8005ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed6:	9203      	str	r2, [sp, #12]
 8005ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eda:	9202      	str	r2, [sp, #8]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	9100      	str	r1, [sp, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7fe ff54 	bl	8004d94 <_ntoa_long>
 8005eec:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005eee:	e06f      	b.n	8005fd0 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d020      	beq.n	8005f3c <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efc:	3307      	adds	r3, #7
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	f103 0208 	add.w	r2, r3, #8
 8005f06:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f0e:	4611      	mov	r1, r2
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f16:	9008      	str	r0, [sp, #32]
 8005f18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f1a:	9007      	str	r0, [sp, #28]
 8005f1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005f1e:	9006      	str	r0, [sp, #24]
 8005f20:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005f24:	2200      	movs	r2, #0
 8005f26:	9202      	str	r2, [sp, #8]
 8005f28:	e9cd 3400 	strd	r3, r4, [sp]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7fe ff95 	bl	8004e62 <_ntoa_long_long>
 8005f38:	6478      	str	r0, [r7, #68]	; 0x44
 8005f3a:	e049      	b.n	8005fd0 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f50:	9205      	str	r2, [sp, #20]
 8005f52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f54:	9204      	str	r2, [sp, #16]
 8005f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f58:	9203      	str	r2, [sp, #12]
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	9202      	str	r2, [sp, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	9201      	str	r2, [sp, #4]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7fe ff12 	bl	8004d94 <_ntoa_long>
 8005f70:	6478      	str	r0, [r7, #68]	; 0x44
 8005f72:	e02d      	b.n	8005fd0 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <_vsnprintf+0x642>
 8005f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f80:	1d1a      	adds	r2, r3, #4
 8005f82:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	e00e      	b.n	8005fa8 <_vsnprintf+0x660>
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <_vsnprintf+0x658>
 8005f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	e003      	b.n	8005fa8 <_vsnprintf+0x660>
 8005fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa2:	1d1a      	adds	r2, r3, #4
 8005fa4:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb0:	9304      	str	r3, [sp, #16]
 8005fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb4:	9303      	str	r3, [sp, #12]
 8005fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb8:	9302      	str	r3, [sp, #8]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7fe fee3 	bl	8004d94 <_ntoa_long>
 8005fce:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	603b      	str	r3, [r7, #0]
        break;
 8005fd6:	e156      	b.n	8006286 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b46      	cmp	r3, #70	; 0x46
 8005fde:	d103      	bne.n	8005fe8 <_vsnprintf+0x6a0>
 8005fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe2:	f043 0320 	orr.w	r3, r3, #32
 8005fe6:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fea:	3307      	adds	r3, #7
 8005fec:	f023 0307 	bic.w	r3, r3, #7
 8005ff0:	f103 0208 	add.w	r2, r3, #8
 8005ff4:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ff6:	ed93 7b00 	vldr	d7, [r3]
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffc:	9302      	str	r3, [sp, #8]
 8005ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	eeb0 0a47 	vmov.f32	s0, s14
 800600a:	eef0 0a67 	vmov.f32	s1, s15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7fe ff93 	bl	8004f40 <_ftoa>
 800601a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	603b      	str	r3, [r7, #0]
        break;
 8006022:	e130      	b.n	8006286 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b67      	cmp	r3, #103	; 0x67
 800602a:	d003      	beq.n	8006034 <_vsnprintf+0x6ec>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b47      	cmp	r3, #71	; 0x47
 8006032:	d103      	bne.n	800603c <_vsnprintf+0x6f4>
 8006034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800603a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b45      	cmp	r3, #69	; 0x45
 8006042:	d003      	beq.n	800604c <_vsnprintf+0x704>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b47      	cmp	r3, #71	; 0x47
 800604a:	d103      	bne.n	8006054 <_vsnprintf+0x70c>
 800604c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604e:	f043 0320 	orr.w	r3, r3, #32
 8006052:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006056:	3307      	adds	r3, #7
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	f103 0208 	add.w	r2, r3, #8
 8006060:	66ba      	str	r2, [r7, #104]	; 0x68
 8006062:	ed93 7b00 	vldr	d7, [r3]
 8006066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006068:	9302      	str	r3, [sp, #8]
 800606a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	eeb0 0a47 	vmov.f32	s0, s14
 8006076:	eef0 0a67 	vmov.f32	s1, s15
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff f9c9 	bl	8005418 <_etoa>
 8006086:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	603b      	str	r3, [r7, #0]
        break;
 800608e:	e0fa      	b.n	8006286 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8006090:	2301      	movs	r3, #1
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8006094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10e      	bne.n	80060bc <_vsnprintf+0x774>
          while (l++ < width) {
 800609e:	e007      	b.n	80060b0 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 80060a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060a2:	1c53      	adds	r3, r2, #1
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	68fc      	ldr	r4, [r7, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	2020      	movs	r0, #32
 80060ae:	47a0      	blx	r4
          while (l++ < width) {
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d8f1      	bhi.n	80060a0 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80060bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060be:	1d1a      	adds	r2, r3, #4
 80060c0:	66ba      	str	r2, [r7, #104]	; 0x68
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	b2d8      	uxtb	r0, r3
 80060c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c8:	1c53      	adds	r3, r2, #1
 80060ca:	647b      	str	r3, [r7, #68]	; 0x44
 80060cc:	68fc      	ldr	r4, [r7, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80060d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00e      	beq.n	80060fc <_vsnprintf+0x7b4>
          while (l++ < width) {
 80060de:	e007      	b.n	80060f0 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 80060e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e2:	1c53      	adds	r3, r2, #1
 80060e4:	647b      	str	r3, [r7, #68]	; 0x44
 80060e6:	68fc      	ldr	r4, [r7, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	2020      	movs	r0, #32
 80060ee:	47a0      	blx	r4
          while (l++ < width) {
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d8f1      	bhi.n	80060e0 <_vsnprintf+0x798>
          }
        }
        format++;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	603b      	str	r3, [r7, #0]
        break;
 8006102:	e0c0      	b.n	8006286 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8006104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006106:	1d1a      	adds	r2, r3, #4
 8006108:	66ba      	str	r2, [r7, #104]	; 0x68
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800610e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <_vsnprintf+0x7d0>
 8006114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006116:	e001      	b.n	800611c <_vsnprintf+0x7d4>
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	4619      	mov	r1, r3
 800611e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006120:	f7fe fcb4 	bl	8004a8c <_strnlen_s>
 8006124:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8006126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8006130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006134:	4293      	cmp	r3, r2
 8006136:	bf28      	it	cs
 8006138:	4613      	movcs	r3, r2
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800613c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11a      	bne.n	800617c <_vsnprintf+0x834>
          while (l++ < width) {
 8006146:	e007      	b.n	8006158 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8006148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614a:	1c53      	adds	r3, r2, #1
 800614c:	647b      	str	r3, [r7, #68]	; 0x44
 800614e:	68fc      	ldr	r4, [r7, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	2020      	movs	r0, #32
 8006156:	47a0      	blx	r4
          while (l++ < width) {
 8006158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	637a      	str	r2, [r7, #52]	; 0x34
 800615e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006160:	429a      	cmp	r2, r3
 8006162:	d8f1      	bhi.n	8006148 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006164:	e00a      	b.n	800617c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	63ba      	str	r2, [r7, #56]	; 0x38
 800616c:	7818      	ldrb	r0, [r3, #0]
 800616e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006170:	1c53      	adds	r3, r2, #1
 8006172:	647b      	str	r3, [r7, #68]	; 0x44
 8006174:	68fc      	ldr	r4, [r7, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <_vsnprintf+0x850>
 8006184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0eb      	beq.n	8006166 <_vsnprintf+0x81e>
 800618e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8006198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <_vsnprintf+0x878>
          while (l++ < width) {
 80061a2:	e007      	b.n	80061b4 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 80061a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a6:	1c53      	adds	r3, r2, #1
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
 80061aa:	68fc      	ldr	r4, [r7, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	2020      	movs	r0, #32
 80061b2:	47a0      	blx	r4
          while (l++ < width) {
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	637a      	str	r2, [r7, #52]	; 0x34
 80061ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061bc:	429a      	cmp	r2, r3
 80061be:	d8f1      	bhi.n	80061a4 <_vsnprintf+0x85c>
          }
        }
        format++;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	603b      	str	r3, [r7, #0]
        break;
 80061c6:	e05e      	b.n	8006286 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80061c8:	2308      	movs	r3, #8
 80061ca:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80061cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ce:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80061d2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80061da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01d      	beq.n	800621e <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80061e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f04f 0400 	mov.w	r4, #0
 80061ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061f0:	9208      	str	r2, [sp, #32]
 80061f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061f4:	9207      	str	r2, [sp, #28]
 80061f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f8:	9206      	str	r2, [sp, #24]
 80061fa:	f04f 0110 	mov.w	r1, #16
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8006206:	2200      	movs	r2, #0
 8006208:	9202      	str	r2, [sp, #8]
 800620a:	e9cd 3400 	strd	r3, r4, [sp]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7fe fe24 	bl	8004e62 <_ntoa_long_long>
 800621a:	6478      	str	r0, [r7, #68]	; 0x44
 800621c:	e016      	b.n	800624c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800621e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006220:	1d1a      	adds	r2, r3, #4
 8006222:	66ba      	str	r2, [r7, #104]	; 0x68
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622a:	9305      	str	r3, [sp, #20]
 800622c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	2310      	movs	r3, #16
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	2300      	movs	r3, #0
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	9200      	str	r2, [sp, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7fe fda5 	bl	8004d94 <_ntoa_long>
 800624a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	603b      	str	r3, [r7, #0]
        break;
 8006252:	e018      	b.n	8006286 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8006254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006256:	1c53      	adds	r3, r2, #1
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
 800625a:	68fc      	ldr	r4, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	2025      	movs	r0, #37	; 0x25
 8006262:	47a0      	blx	r4
        format++;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	603b      	str	r3, [r7, #0]
        break;
 800626a:	e00c      	b.n	8006286 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	7818      	ldrb	r0, [r3, #0]
 8006270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006272:	1c53      	adds	r3, r2, #1
 8006274:	647b      	str	r3, [r7, #68]	; 0x44
 8006276:	68fc      	ldr	r4, [r7, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	47a0      	blx	r4
        format++;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	603b      	str	r3, [r7, #0]
        break;
 8006284:	bf00      	nop
  while (*format)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f47f ab6d 	bne.w	800596a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <_vsnprintf+0x956>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	e000      	b.n	80062a0 <_vsnprintf+0x958>
 800629e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a0:	68fc      	ldr	r4, [r7, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	2000      	movs	r0, #0
 80062a8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80062aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3758      	adds	r7, #88	; 0x58
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bdb0      	pop	{r4, r5, r7, pc}

080062b4 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 80062b4:	b40c      	push	{r2, r3}
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af02      	add	r7, sp, #8
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 80062c0:	f107 031c 	add.w	r3, r7, #28
 80062c4:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4805      	ldr	r0, [pc, #20]	; (80062e8 <snprintf_+0x34>)
 80062d2:	f7ff fb39 	bl	8005948 <_vsnprintf>
 80062d6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e4:	b002      	add	sp, #8
 80062e6:	4770      	bx	lr
 80062e8:	08004a43 	.word	0x08004a43

080062ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	4b10      	ldr	r3, [pc, #64]	; (8006338 <HAL_MspInit+0x4c>)
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	4a0f      	ldr	r2, [pc, #60]	; (8006338 <HAL_MspInit+0x4c>)
 80062fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006300:	6453      	str	r3, [r2, #68]	; 0x44
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <HAL_MspInit+0x4c>)
 8006304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <HAL_MspInit+0x4c>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	4a08      	ldr	r2, [pc, #32]	; (8006338 <HAL_MspInit+0x4c>)
 8006318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631c:	6413      	str	r3, [r2, #64]	; 0x40
 800631e:	4b06      	ldr	r3, [pc, #24]	; (8006338 <HAL_MspInit+0x4c>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40023800 	.word	0x40023800

0800633c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <HAL_SPI_MspInit+0x84>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d12b      	bne.n	80063b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <HAL_SPI_MspInit+0x88>)
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_SPI_MspInit+0x88>)
 8006368:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800636c:	6453      	str	r3, [r2, #68]	; 0x44
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_SPI_MspInit+0x88>)
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_SPI_MspInit+0x88>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <HAL_SPI_MspInit+0x88>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6313      	str	r3, [r2, #48]	; 0x30
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_SPI_MspInit+0x88>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006396:	23e0      	movs	r3, #224	; 0xe0
 8006398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639a:	2302      	movs	r3, #2
 800639c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800639e:	2301      	movs	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063a2:	2303      	movs	r3, #3
 80063a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80063a6:	2305      	movs	r3, #5
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063aa:	f107 0314 	add.w	r3, r7, #20
 80063ae:	4619      	mov	r1, r3
 80063b0:	4805      	ldr	r0, [pc, #20]	; (80063c8 <HAL_SPI_MspInit+0x8c>)
 80063b2:	f000 fa4d 	bl	8006850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80063b6:	bf00      	nop
 80063b8:	3728      	adds	r7, #40	; 0x28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40013000 	.word	0x40013000
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40020000 	.word	0x40020000

080063cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d4:	f107 0314 	add.w	r3, r7, #20
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a19      	ldr	r2, [pc, #100]	; (8006450 <HAL_UART_MspInit+0x84>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d12b      	bne.n	8006446 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	4b18      	ldr	r3, [pc, #96]	; (8006454 <HAL_UART_MspInit+0x88>)
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	4a17      	ldr	r2, [pc, #92]	; (8006454 <HAL_UART_MspInit+0x88>)
 80063f8:	f043 0320 	orr.w	r3, r3, #32
 80063fc:	6453      	str	r3, [r2, #68]	; 0x44
 80063fe:	4b15      	ldr	r3, [pc, #84]	; (8006454 <HAL_UART_MspInit+0x88>)
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_UART_MspInit+0x88>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <HAL_UART_MspInit+0x88>)
 8006414:	f043 0304 	orr.w	r3, r3, #4
 8006418:	6313      	str	r3, [r2, #48]	; 0x30
 800641a:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <HAL_UART_MspInit+0x88>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006426:	23c0      	movs	r3, #192	; 0xc0
 8006428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642a:	2302      	movs	r3, #2
 800642c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800642e:	2301      	movs	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006432:	2303      	movs	r3, #3
 8006434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006436:	2308      	movs	r3, #8
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800643a:	f107 0314 	add.w	r3, r7, #20
 800643e:	4619      	mov	r1, r3
 8006440:	4805      	ldr	r0, [pc, #20]	; (8006458 <HAL_UART_MspInit+0x8c>)
 8006442:	f000 fa05 	bl	8006850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006446:	bf00      	nop
 8006448:	3728      	adds	r7, #40	; 0x28
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40011400 	.word	0x40011400
 8006454:	40023800 	.word	0x40023800
 8006458:	40020800 	.word	0x40020800

0800645c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800646a:	b480      	push	{r7}
 800646c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800646e:	e7fe      	b.n	800646e <HardFault_Handler+0x4>

08006470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006474:	e7fe      	b.n	8006474 <MemManage_Handler+0x4>

08006476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006476:	b480      	push	{r7}
 8006478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800647a:	e7fe      	b.n	800647a <BusFault_Handler+0x4>

0800647c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006480:	e7fe      	b.n	8006480 <UsageFault_Handler+0x4>

08006482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006482:	b480      	push	{r7}
 8006484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006486:	bf00      	nop
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800649e:	b480      	push	{r7}
 80064a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064a2:	bf00      	nop
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064b0:	f000 f89c 	bl	80065ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064b4:	bf00      	nop
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80064bc:	2004      	movs	r0, #4
 80064be:	f000 fb7b 	bl	8006bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064cc:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <SystemInit+0x28>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d2:	4a07      	ldr	r2, [pc, #28]	; (80064f0 <SystemInit+0x28>)
 80064d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064dc:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <SystemInit+0x28>)
 80064de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064e2:	609a      	str	r2, [r3, #8]
#endif
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000ed00 	.word	0xe000ed00

080064f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80064f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800652c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064fa:	e003      	b.n	8006504 <LoopCopyDataInit>

080064fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006500:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006502:	3104      	adds	r1, #4

08006504 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006504:	480b      	ldr	r0, [pc, #44]	; (8006534 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006508:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800650a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800650c:	d3f6      	bcc.n	80064fc <CopyDataInit>
  ldr  r2, =_sbss
 800650e:	4a0b      	ldr	r2, [pc, #44]	; (800653c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006510:	e002      	b.n	8006518 <LoopFillZerobss>

08006512 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006512:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006514:	f842 3b04 	str.w	r3, [r2], #4

08006518 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800651a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800651c:	d3f9      	bcc.n	8006512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800651e:	f7ff ffd3 	bl	80064c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006522:	f002 f9ed 	bl	8008900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006526:	f7fd fec3 	bl	80042b0 <main>
  bx  lr    
 800652a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800652c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006530:	0800eb2c 	.word	0x0800eb2c
  ldr  r0, =_sdata
 8006534:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006538:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800653c:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8006540:	20014614 	.word	0x20014614

08006544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006544:	e7fe      	b.n	8006544 <ADC_IRQHandler>
	...

08006548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <HAL_Init+0x40>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0d      	ldr	r2, [pc, #52]	; (8006588 <HAL_Init+0x40>)
 8006552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <HAL_Init+0x40>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <HAL_Init+0x40>)
 800655e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <HAL_Init+0x40>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a07      	ldr	r2, [pc, #28]	; (8006588 <HAL_Init+0x40>)
 800656a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800656e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006570:	2003      	movs	r0, #3
 8006572:	f000 f92b 	bl	80067cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006576:	2000      	movs	r0, #0
 8006578:	f000 f808 	bl	800658c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800657c:	f7ff feb6 	bl	80062ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023c00 	.word	0x40023c00

0800658c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006594:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <HAL_InitTick+0x54>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <HAL_InitTick+0x58>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f943 	bl	8006836 <HAL_SYSTICK_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00e      	b.n	80065d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b0f      	cmp	r3, #15
 80065be:	d80a      	bhi.n	80065d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065c0:	2200      	movs	r2, #0
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	f000 f90b 	bl	80067e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065cc:	4a06      	ldr	r2, [pc, #24]	; (80065e8 <HAL_InitTick+0x5c>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000010 	.word	0x20000010
 80065e4:	20000018 	.word	0x20000018
 80065e8:	20000014 	.word	0x20000014

080065ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_IncTick+0x20>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <HAL_IncTick+0x24>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	4a04      	ldr	r2, [pc, #16]	; (8006610 <HAL_IncTick+0x24>)
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000018 	.word	0x20000018
 8006610:	20014610 	.word	0x20014610

08006614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  return uwTick;
 8006618:	4b03      	ldr	r3, [pc, #12]	; (8006628 <HAL_GetTick+0x14>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20014610 	.word	0x20014610

0800662c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <__NVIC_SetPriorityGrouping+0x44>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006648:	4013      	ands	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <__NVIC_SetPriorityGrouping+0x44>)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	60d3      	str	r3, [r2, #12]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <__NVIC_GetPriorityGrouping+0x18>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0a1b      	lsrs	r3, r3, #8
 800667e:	f003 0307 	and.w	r3, r3, #7
}
 8006682:	4618      	mov	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	e000ed00 	.word	0xe000ed00

08006690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	db0b      	blt.n	80066ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	f003 021f 	and.w	r2, r3, #31
 80066a8:	4907      	ldr	r1, [pc, #28]	; (80066c8 <__NVIC_EnableIRQ+0x38>)
 80066aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2001      	movs	r0, #1
 80066b2:	fa00 f202 	lsl.w	r2, r0, r2
 80066b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	e000e100 	.word	0xe000e100

080066cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db0a      	blt.n	80066f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	490c      	ldr	r1, [pc, #48]	; (8006718 <__NVIC_SetPriority+0x4c>)
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	440b      	add	r3, r1
 80066f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066f4:	e00a      	b.n	800670c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4908      	ldr	r1, [pc, #32]	; (800671c <__NVIC_SetPriority+0x50>)
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	3b04      	subs	r3, #4
 8006704:	0112      	lsls	r2, r2, #4
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	440b      	add	r3, r1
 800670a:	761a      	strb	r2, [r3, #24]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	e000e100 	.word	0xe000e100
 800671c:	e000ed00 	.word	0xe000ed00

08006720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f1c3 0307 	rsb	r3, r3, #7
 800673a:	2b04      	cmp	r3, #4
 800673c:	bf28      	it	cs
 800673e:	2304      	movcs	r3, #4
 8006740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3304      	adds	r3, #4
 8006746:	2b06      	cmp	r3, #6
 8006748:	d902      	bls.n	8006750 <NVIC_EncodePriority+0x30>
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3b03      	subs	r3, #3
 800674e:	e000      	b.n	8006752 <NVIC_EncodePriority+0x32>
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43da      	mvns	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	401a      	ands	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006768:	f04f 31ff 	mov.w	r1, #4294967295
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	43d9      	mvns	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006778:	4313      	orrs	r3, r2
         );
}
 800677a:	4618      	mov	r0, r3
 800677c:	3724      	adds	r7, #36	; 0x24
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3b01      	subs	r3, #1
 8006794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006798:	d301      	bcc.n	800679e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800679a:	2301      	movs	r3, #1
 800679c:	e00f      	b.n	80067be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800679e:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <SysTick_Config+0x40>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067a6:	210f      	movs	r1, #15
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	f7ff ff8e 	bl	80066cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <SysTick_Config+0x40>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <SysTick_Config+0x40>)
 80067b8:	2207      	movs	r2, #7
 80067ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	e000e010 	.word	0xe000e010

080067cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff29 	bl	800662c <__NVIC_SetPriorityGrouping>
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	4603      	mov	r3, r0
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067f4:	f7ff ff3e 	bl	8006674 <__NVIC_GetPriorityGrouping>
 80067f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	6978      	ldr	r0, [r7, #20]
 8006800:	f7ff ff8e 	bl	8006720 <NVIC_EncodePriority>
 8006804:	4602      	mov	r2, r0
 8006806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff5d 	bl	80066cc <__NVIC_SetPriority>
}
 8006812:	bf00      	nop
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	4603      	mov	r3, r0
 8006822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff ff31 	bl	8006690 <__NVIC_EnableIRQ>
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ffa2 	bl	8006788 <SysTick_Config>
 8006844:	4603      	mov	r3, r0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	; 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e16b      	b.n	8006b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800686c:	2201      	movs	r2, #1
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4013      	ands	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	429a      	cmp	r2, r3
 8006886:	f040 815a 	bne.w	8006b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d00b      	beq.n	80068aa <HAL_GPIO_Init+0x5a>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d007      	beq.n	80068aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800689e:	2b11      	cmp	r3, #17
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b12      	cmp	r3, #18
 80068a8:	d130      	bne.n	800690c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	2203      	movs	r2, #3
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4013      	ands	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068e0:	2201      	movs	r2, #1
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	43db      	mvns	r3, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4013      	ands	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	f003 0201 	and.w	r2, r3, #1
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4313      	orrs	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	2203      	movs	r2, #3
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	4013      	ands	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d003      	beq.n	800694c <HAL_GPIO_Init+0xfc>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b12      	cmp	r3, #18
 800694a:	d123      	bne.n	8006994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	08da      	lsrs	r2, r3, #3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3208      	adds	r2, #8
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	220f      	movs	r2, #15
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4013      	ands	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4313      	orrs	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	08da      	lsrs	r2, r3, #3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3208      	adds	r2, #8
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	2203      	movs	r2, #3
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4013      	ands	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f003 0203 	and.w	r2, r3, #3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4313      	orrs	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80b4 	beq.w	8006b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	4b5f      	ldr	r3, [pc, #380]	; (8006b58 <HAL_GPIO_Init+0x308>)
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	4a5e      	ldr	r2, [pc, #376]	; (8006b58 <HAL_GPIO_Init+0x308>)
 80069e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069e4:	6453      	str	r3, [r2, #68]	; 0x44
 80069e6:	4b5c      	ldr	r3, [pc, #368]	; (8006b58 <HAL_GPIO_Init+0x308>)
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069f2:	4a5a      	ldr	r2, [pc, #360]	; (8006b5c <HAL_GPIO_Init+0x30c>)
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	3302      	adds	r3, #2
 80069fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	220f      	movs	r2, #15
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a51      	ldr	r2, [pc, #324]	; (8006b60 <HAL_GPIO_Init+0x310>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02b      	beq.n	8006a76 <HAL_GPIO_Init+0x226>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a50      	ldr	r2, [pc, #320]	; (8006b64 <HAL_GPIO_Init+0x314>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d025      	beq.n	8006a72 <HAL_GPIO_Init+0x222>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a4f      	ldr	r2, [pc, #316]	; (8006b68 <HAL_GPIO_Init+0x318>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01f      	beq.n	8006a6e <HAL_GPIO_Init+0x21e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a4e      	ldr	r2, [pc, #312]	; (8006b6c <HAL_GPIO_Init+0x31c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d019      	beq.n	8006a6a <HAL_GPIO_Init+0x21a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a4d      	ldr	r2, [pc, #308]	; (8006b70 <HAL_GPIO_Init+0x320>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_GPIO_Init+0x216>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a4c      	ldr	r2, [pc, #304]	; (8006b74 <HAL_GPIO_Init+0x324>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00d      	beq.n	8006a62 <HAL_GPIO_Init+0x212>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <HAL_GPIO_Init+0x328>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <HAL_GPIO_Init+0x20e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a4a      	ldr	r2, [pc, #296]	; (8006b7c <HAL_GPIO_Init+0x32c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <HAL_GPIO_Init+0x20a>
 8006a56:	2307      	movs	r3, #7
 8006a58:	e00e      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	e00c      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a5e:	2306      	movs	r3, #6
 8006a60:	e00a      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a62:	2305      	movs	r3, #5
 8006a64:	e008      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a66:	2304      	movs	r3, #4
 8006a68:	e006      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e004      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e002      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <HAL_GPIO_Init+0x228>
 8006a76:	2300      	movs	r3, #0
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	f002 0203 	and.w	r2, r2, #3
 8006a7e:	0092      	lsls	r2, r2, #2
 8006a80:	4093      	lsls	r3, r2
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a88:	4934      	ldr	r1, [pc, #208]	; (8006b5c <HAL_GPIO_Init+0x30c>)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	089b      	lsrs	r3, r3, #2
 8006a8e:	3302      	adds	r3, #2
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a96:	4b3a      	ldr	r3, [pc, #232]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006aba:	4a31      	ldr	r2, [pc, #196]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ac0:	4b2f      	ldr	r3, [pc, #188]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4013      	ands	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aea:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b14:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4013      	ands	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b38:	4a11      	ldr	r2, [pc, #68]	; (8006b80 <HAL_GPIO_Init+0x330>)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	f67f ae90 	bls.w	800686c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3724      	adds	r7, #36	; 0x24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	40013800 	.word	0x40013800
 8006b60:	40020000 	.word	0x40020000
 8006b64:	40020400 	.word	0x40020400
 8006b68:	40020800 	.word	0x40020800
 8006b6c:	40020c00 	.word	0x40020c00
 8006b70:	40021000 	.word	0x40021000
 8006b74:	40021400 	.word	0x40021400
 8006b78:	40021800 	.word	0x40021800
 8006b7c:	40021c00 	.word	0x40021c00
 8006b80:	40013c00 	.word	0x40013c00

08006b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
 8006b90:	4613      	mov	r3, r2
 8006b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b94:	787b      	ldrb	r3, [r7, #1]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b9a:	887a      	ldrh	r2, [r7, #2]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ba0:	e003      	b.n	8006baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ba2:	887b      	ldrh	r3, [r7, #2]
 8006ba4:	041a      	lsls	r2, r3, #16
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	619a      	str	r2, [r3, #24]
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
	...

08006bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006bc2:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bce:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd ff04 	bl	80049e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40013c00 	.word	0x40013c00

08006be8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e02b      	b.n	8006c52 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006c02:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f245 5255 	movw	r2, #21845	; 0x5555
 8006c0c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6852      	ldr	r2, [r2, #4]
 8006c16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6892      	ldr	r2, [r2, #8]
 8006c20:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006c22:	f7ff fcf7 	bl	8006614 <HAL_GetTick>
 8006c26:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8006c28:	e008      	b.n	8006c3c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006c2a:	f7ff fcf3 	bl	8006614 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b30      	cmp	r3, #48	; 0x30
 8006c36:	d901      	bls.n	8006c3c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e00a      	b.n	8006c52 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f1      	bne.n	8006c2a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e25b      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d075      	beq.n	8006d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c9a:	4ba3      	ldr	r3, [pc, #652]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ca6:	4ba0      	ldr	r3, [pc, #640]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d112      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cb2:	4b9d      	ldr	r3, [pc, #628]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc0:	4b99      	ldr	r3, [pc, #612]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05b      	beq.n	8006d84 <HAL_RCC_OscConfig+0x108>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d157      	bne.n	8006d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e236      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x74>
 8006ce2:	4b91      	ldr	r3, [pc, #580]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a90      	ldr	r2, [pc, #576]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e01d      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x98>
 8006cfa:	4b8b      	ldr	r3, [pc, #556]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a8a      	ldr	r2, [pc, #552]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4b88      	ldr	r3, [pc, #544]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a87      	ldr	r2, [pc, #540]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e00b      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006d14:	4b84      	ldr	r3, [pc, #528]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a83      	ldr	r2, [pc, #524]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	4b81      	ldr	r3, [pc, #516]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a80      	ldr	r2, [pc, #512]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d013      	beq.n	8006d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d34:	f7ff fc6e 	bl	8006614 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d3c:	f7ff fc6a 	bl	8006614 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b64      	cmp	r3, #100	; 0x64
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e1fb      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d4e:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0xc0>
 8006d5a:	e014      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7ff fc5a 	bl	8006614 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d64:	f7ff fc56 	bl	8006614 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	; 0x64
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e1e7      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d76:	4b6c      	ldr	r3, [pc, #432]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0xe8>
 8006d82:	e000      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d063      	beq.n	8006e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d92:	4b65      	ldr	r3, [pc, #404]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d9e:	4b62      	ldr	r3, [pc, #392]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d11c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006daa:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006db6:	4b5c      	ldr	r3, [pc, #368]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_RCC_OscConfig+0x152>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e1bb      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dce:	4b56      	ldr	r3, [pc, #344]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4952      	ldr	r1, [pc, #328]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de2:	e03a      	b.n	8006e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d020      	beq.n	8006e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dec:	4b4f      	ldr	r3, [pc, #316]	; (8006f2c <HAL_RCC_OscConfig+0x2b0>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7ff fc0f 	bl	8006614 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dfa:	f7ff fc0b 	bl	8006614 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e19c      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e0c:	4b46      	ldr	r3, [pc, #280]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4b43      	ldr	r3, [pc, #268]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4940      	ldr	r1, [pc, #256]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	e015      	b.n	8006e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <HAL_RCC_OscConfig+0x2b0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7ff fbee 	bl	8006614 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e3c:	f7ff fbea 	bl	8006614 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e17b      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d030      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e6e:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <HAL_RCC_OscConfig+0x2b4>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7ff fbce 	bl	8006614 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e7c:	f7ff fbca 	bl	8006614 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e15b      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e8e:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x200>
 8006e9a:	e015      	b.n	8006ec8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e9c:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <HAL_RCC_OscConfig+0x2b4>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea2:	f7ff fbb7 	bl	8006614 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7ff fbb3 	bl	8006614 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e144      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a0 	beq.w	8007016 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10f      	bne.n	8006f06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	4a0e      	ldr	r2, [pc, #56]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <HAL_RCC_OscConfig+0x2ac>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efe:	60bb      	str	r3, [r7, #8]
 8006f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f06:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_RCC_OscConfig+0x2b8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d121      	bne.n	8006f56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f12:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <HAL_RCC_OscConfig+0x2b8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a07      	ldr	r2, [pc, #28]	; (8006f34 <HAL_RCC_OscConfig+0x2b8>)
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f1e:	f7ff fb79 	bl	8006614 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f24:	e011      	b.n	8006f4a <HAL_RCC_OscConfig+0x2ce>
 8006f26:	bf00      	nop
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	42470000 	.word	0x42470000
 8006f30:	42470e80 	.word	0x42470e80
 8006f34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f38:	f7ff fb6c 	bl	8006614 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e0fd      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f4a:	4b81      	ldr	r3, [pc, #516]	; (8007150 <HAL_RCC_OscConfig+0x4d4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d106      	bne.n	8006f6c <HAL_RCC_OscConfig+0x2f0>
 8006f5e:	4b7d      	ldr	r3, [pc, #500]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	4a7c      	ldr	r2, [pc, #496]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6a:	e01c      	b.n	8006fa6 <HAL_RCC_OscConfig+0x32a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b05      	cmp	r3, #5
 8006f72:	d10c      	bne.n	8006f8e <HAL_RCC_OscConfig+0x312>
 8006f74:	4b77      	ldr	r3, [pc, #476]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4a76      	ldr	r2, [pc, #472]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f7a:	f043 0304 	orr.w	r3, r3, #4
 8006f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f80:	4b74      	ldr	r3, [pc, #464]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f84:	4a73      	ldr	r2, [pc, #460]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f8c:	e00b      	b.n	8006fa6 <HAL_RCC_OscConfig+0x32a>
 8006f8e:	4b71      	ldr	r3, [pc, #452]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6713      	str	r3, [r2, #112]	; 0x70
 8006f9a:	4b6e      	ldr	r3, [pc, #440]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	4a6d      	ldr	r2, [pc, #436]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006fa0:	f023 0304 	bic.w	r3, r3, #4
 8006fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d015      	beq.n	8006fda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fae:	f7ff fb31 	bl	8006614 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fb6:	f7ff fb2d 	bl	8006614 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e0bc      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fcc:	4b61      	ldr	r3, [pc, #388]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0ee      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x33a>
 8006fd8:	e014      	b.n	8007004 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fda:	f7ff fb1b 	bl	8006614 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe2:	f7ff fb17 	bl	8006614 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e0a6      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff8:	4b56      	ldr	r3, [pc, #344]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ee      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d105      	bne.n	8007016 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800700a:	4b52      	ldr	r3, [pc, #328]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	4a51      	ldr	r2, [pc, #324]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8007010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8092 	beq.w	8007144 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007020:	4b4c      	ldr	r3, [pc, #304]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 030c 	and.w	r3, r3, #12
 8007028:	2b08      	cmp	r3, #8
 800702a:	d05c      	beq.n	80070e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d141      	bne.n	80070b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007034:	4b48      	ldr	r3, [pc, #288]	; (8007158 <HAL_RCC_OscConfig+0x4dc>)
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703a:	f7ff faeb 	bl	8006614 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007042:	f7ff fae7 	bl	8006614 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e078      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007054:	4b3f      	ldr	r3, [pc, #252]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69da      	ldr	r2, [r3, #28]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	019b      	lsls	r3, r3, #6
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	3b01      	subs	r3, #1
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	061b      	lsls	r3, r3, #24
 8007084:	4933      	ldr	r1, [pc, #204]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800708a:	4b33      	ldr	r3, [pc, #204]	; (8007158 <HAL_RCC_OscConfig+0x4dc>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007090:	f7ff fac0 	bl	8006614 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007098:	f7ff fabc 	bl	8006614 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e04d      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070aa:	4b2a      	ldr	r3, [pc, #168]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f0      	beq.n	8007098 <HAL_RCC_OscConfig+0x41c>
 80070b6:	e045      	b.n	8007144 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b8:	4b27      	ldr	r3, [pc, #156]	; (8007158 <HAL_RCC_OscConfig+0x4dc>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7ff faa9 	bl	8006614 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c6:	f7ff faa5 	bl	8006614 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e036      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f0      	bne.n	80070c6 <HAL_RCC_OscConfig+0x44a>
 80070e4:	e02e      	b.n	8007144 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e029      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80070f2:	4b18      	ldr	r3, [pc, #96]	; (8007154 <HAL_RCC_OscConfig+0x4d8>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	429a      	cmp	r2, r3
 8007104:	d11c      	bne.n	8007140 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d115      	bne.n	8007140 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800711a:	4013      	ands	r3, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007120:	4293      	cmp	r3, r2
 8007122:	d10d      	bne.n	8007140 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800712e:	429a      	cmp	r2, r3
 8007130:	d106      	bne.n	8007140 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d001      	beq.n	8007144 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40007000 	.word	0x40007000
 8007154:	40023800 	.word	0x40023800
 8007158:	42470060 	.word	0x42470060

0800715c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0cc      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007170:	4b68      	ldr	r3, [pc, #416]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d90c      	bls.n	8007198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b65      	ldr	r3, [pc, #404]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	4b63      	ldr	r3, [pc, #396]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d001      	beq.n	8007198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0b8      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071b0:	4b59      	ldr	r3, [pc, #356]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a58      	ldr	r2, [pc, #352]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c8:	4b53      	ldr	r3, [pc, #332]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4a52      	ldr	r2, [pc, #328]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d4:	4b50      	ldr	r3, [pc, #320]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	494d      	ldr	r1, [pc, #308]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d044      	beq.n	800727c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d119      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e07f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d003      	beq.n	800721a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007216:	2b03      	cmp	r3, #3
 8007218:	d107      	bne.n	800722a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800721a:	4b3f      	ldr	r3, [pc, #252]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e06f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722a:	4b3b      	ldr	r3, [pc, #236]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e067      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800723a:	4b37      	ldr	r3, [pc, #220]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4934      	ldr	r1, [pc, #208]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 8007248:	4313      	orrs	r3, r2
 800724a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800724c:	f7ff f9e2 	bl	8006614 <HAL_GetTick>
 8007250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007252:	e00a      	b.n	800726a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007254:	f7ff f9de 	bl	8006614 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e04f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726a:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 020c 	and.w	r2, r3, #12
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	429a      	cmp	r2, r3
 800727a:	d1eb      	bne.n	8007254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d20c      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728a:	4b22      	ldr	r3, [pc, #136]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e032      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4916      	ldr	r1, [pc, #88]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	490e      	ldr	r1, [pc, #56]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072e2:	f000 f821 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 80072e6:	4601      	mov	r1, r0
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	4a0a      	ldr	r2, [pc, #40]	; (800731c <HAL_RCC_ClockConfig+0x1c0>)
 80072f4:	5cd3      	ldrb	r3, [r2, r3]
 80072f6:	fa21 f303 	lsr.w	r3, r1, r3
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <HAL_RCC_ClockConfig+0x1c4>)
 80072fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <HAL_RCC_ClockConfig+0x1c8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff f942 	bl	800658c <HAL_InitTick>

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40023c00 	.word	0x40023c00
 8007318:	40023800 	.word	0x40023800
 800731c:	0800ea98 	.word	0x0800ea98
 8007320:	20000010 	.word	0x20000010
 8007324:	20000014 	.word	0x20000014

08007328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	2300      	movs	r3, #0
 8007338:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800733e:	4b50      	ldr	r3, [pc, #320]	; (8007480 <HAL_RCC_GetSysClockFreq+0x158>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 030c 	and.w	r3, r3, #12
 8007346:	2b04      	cmp	r3, #4
 8007348:	d007      	beq.n	800735a <HAL_RCC_GetSysClockFreq+0x32>
 800734a:	2b08      	cmp	r3, #8
 800734c:	d008      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0x38>
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 808d 	bne.w	800746e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007354:	4b4b      	ldr	r3, [pc, #300]	; (8007484 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007356:	60bb      	str	r3, [r7, #8]
       break;
 8007358:	e08c      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800735a:	4b4b      	ldr	r3, [pc, #300]	; (8007488 <HAL_RCC_GetSysClockFreq+0x160>)
 800735c:	60bb      	str	r3, [r7, #8]
      break;
 800735e:	e089      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007360:	4b47      	ldr	r3, [pc, #284]	; (8007480 <HAL_RCC_GetSysClockFreq+0x158>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007368:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800736a:	4b45      	ldr	r3, [pc, #276]	; (8007480 <HAL_RCC_GetSysClockFreq+0x158>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d023      	beq.n	80073be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007376:	4b42      	ldr	r3, [pc, #264]	; (8007480 <HAL_RCC_GetSysClockFreq+0x158>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	099b      	lsrs	r3, r3, #6
 800737c:	f04f 0400 	mov.w	r4, #0
 8007380:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	ea03 0501 	and.w	r5, r3, r1
 800738c:	ea04 0602 	and.w	r6, r4, r2
 8007390:	4a3d      	ldr	r2, [pc, #244]	; (8007488 <HAL_RCC_GetSysClockFreq+0x160>)
 8007392:	fb02 f106 	mul.w	r1, r2, r6
 8007396:	2200      	movs	r2, #0
 8007398:	fb02 f205 	mul.w	r2, r2, r5
 800739c:	440a      	add	r2, r1
 800739e:	493a      	ldr	r1, [pc, #232]	; (8007488 <HAL_RCC_GetSysClockFreq+0x160>)
 80073a0:	fba5 0101 	umull	r0, r1, r5, r1
 80073a4:	1853      	adds	r3, r2, r1
 80073a6:	4619      	mov	r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f04f 0400 	mov.w	r4, #0
 80073ae:	461a      	mov	r2, r3
 80073b0:	4623      	mov	r3, r4
 80073b2:	f7f9 fc75 	bl	8000ca0 <__aeabi_uldivmod>
 80073b6:	4603      	mov	r3, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	e049      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073be:	4b30      	ldr	r3, [pc, #192]	; (8007480 <HAL_RCC_GetSysClockFreq+0x158>)
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	099b      	lsrs	r3, r3, #6
 80073c4:	f04f 0400 	mov.w	r4, #0
 80073c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	ea03 0501 	and.w	r5, r3, r1
 80073d4:	ea04 0602 	and.w	r6, r4, r2
 80073d8:	4629      	mov	r1, r5
 80073da:	4632      	mov	r2, r6
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	f04f 0400 	mov.w	r4, #0
 80073e4:	0154      	lsls	r4, r2, #5
 80073e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80073ea:	014b      	lsls	r3, r1, #5
 80073ec:	4619      	mov	r1, r3
 80073ee:	4622      	mov	r2, r4
 80073f0:	1b49      	subs	r1, r1, r5
 80073f2:	eb62 0206 	sbc.w	r2, r2, r6
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	f04f 0400 	mov.w	r4, #0
 80073fe:	0194      	lsls	r4, r2, #6
 8007400:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007404:	018b      	lsls	r3, r1, #6
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	eb64 0402 	sbc.w	r4, r4, r2
 800740c:	f04f 0100 	mov.w	r1, #0
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	00e2      	lsls	r2, r4, #3
 8007416:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800741a:	00d9      	lsls	r1, r3, #3
 800741c:	460b      	mov	r3, r1
 800741e:	4614      	mov	r4, r2
 8007420:	195b      	adds	r3, r3, r5
 8007422:	eb44 0406 	adc.w	r4, r4, r6
 8007426:	f04f 0100 	mov.w	r1, #0
 800742a:	f04f 0200 	mov.w	r2, #0
 800742e:	02a2      	lsls	r2, r4, #10
 8007430:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007434:	0299      	lsls	r1, r3, #10
 8007436:	460b      	mov	r3, r1
 8007438:	4614      	mov	r4, r2
 800743a:	4618      	mov	r0, r3
 800743c:	4621      	mov	r1, r4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f04f 0400 	mov.w	r4, #0
 8007444:	461a      	mov	r2, r3
 8007446:	4623      	mov	r3, r4
 8007448:	f7f9 fc2a 	bl	8000ca0 <__aeabi_uldivmod>
 800744c:	4603      	mov	r3, r0
 800744e:	460c      	mov	r4, r1
 8007450:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007452:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <HAL_RCC_GetSysClockFreq+0x158>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	3301      	adds	r3, #1
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	60bb      	str	r3, [r7, #8]
      break;
 800746c:	e002      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007470:	60bb      	str	r3, [r7, #8]
      break;
 8007472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007474:	68bb      	ldr	r3, [r7, #8]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	bf00      	nop
 8007480:	40023800 	.word	0x40023800
 8007484:	00f42400 	.word	0x00f42400
 8007488:	017d7840 	.word	0x017d7840

0800748c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007492:	681b      	ldr	r3, [r3, #0]
}
 8007494:	4618      	mov	r0, r3
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000010 	.word	0x20000010

080074a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80074a8:	f7ff fff0 	bl	800748c <HAL_RCC_GetHCLKFreq>
 80074ac:	4601      	mov	r1, r0
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	0a9b      	lsrs	r3, r3, #10
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40023800 	.word	0x40023800
 80074c8:	0800eaa8 	.word	0x0800eaa8

080074cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80074d0:	f7ff ffdc 	bl	800748c <HAL_RCC_GetHCLKFreq>
 80074d4:	4601      	mov	r1, r0
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	0b5b      	lsrs	r3, r3, #13
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	4a03      	ldr	r2, [pc, #12]	; (80074f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074e2:	5cd3      	ldrb	r3, [r2, r3]
 80074e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40023800 	.word	0x40023800
 80074f0:	0800eaa8 	.word	0x0800eaa8

080074f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e056      	b.n	80075b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7fe ff0b 	bl	800633c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800753c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	ea42 0103 	orr.w	r1, r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	0c1b      	lsrs	r3, r3, #16
 8007584:	f003 0104 	and.w	r1, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_SPI_Transmit+0x22>
 80075da:	2302      	movs	r3, #2
 80075dc:	e11e      	b.n	800781c <HAL_SPI_Transmit+0x260>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e6:	f7ff f815 	bl	8006614 <HAL_GetTick>
 80075ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d002      	beq.n	8007602 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075fc:	2302      	movs	r3, #2
 80075fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007600:	e103      	b.n	800780a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <HAL_SPI_Transmit+0x52>
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007612:	e0fa      	b.n	800780a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2203      	movs	r2, #3
 8007618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	88fa      	ldrh	r2, [r7, #6]
 8007632:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800765a:	d107      	bne.n	800766c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800766a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d007      	beq.n	800768a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007692:	d14b      	bne.n	800772c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_SPI_Transmit+0xe6>
 800769c:	8afb      	ldrh	r3, [r7, #22]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d13e      	bne.n	8007720 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076c6:	e02b      	b.n	8007720 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d112      	bne.n	80076fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	881a      	ldrh	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	1c9a      	adds	r2, r3, #2
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80076fa:	e011      	b.n	8007720 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076fc:	f7fe ff8a 	bl	8006614 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d803      	bhi.n	8007714 <HAL_SPI_Transmit+0x158>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	d102      	bne.n	800771a <HAL_SPI_Transmit+0x15e>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800771e:	e074      	b.n	800780a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1ce      	bne.n	80076c8 <HAL_SPI_Transmit+0x10c>
 800772a:	e04c      	b.n	80077c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <HAL_SPI_Transmit+0x17e>
 8007734:	8afb      	ldrh	r3, [r7, #22]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d140      	bne.n	80077bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	7812      	ldrb	r2, [r2, #0]
 8007746:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007760:	e02c      	b.n	80077bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d113      	bne.n	8007798 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	86da      	strh	r2, [r3, #54]	; 0x36
 8007796:	e011      	b.n	80077bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007798:	f7fe ff3c 	bl	8006614 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d803      	bhi.n	80077b0 <HAL_SPI_Transmit+0x1f4>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d102      	bne.n	80077b6 <HAL_SPI_Transmit+0x1fa>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077ba:	e026      	b.n	800780a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1cd      	bne.n	8007762 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fba4 	bl	8007f18 <SPI_EndRxTxTransaction>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077e4:	2300      	movs	r3, #0
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	77fb      	strb	r3, [r7, #31]
 8007806:	e000      	b.n	800780a <HAL_SPI_Transmit+0x24e>
  }

error:
 8007808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800781a:	7ffb      	ldrb	r3, [r7, #31]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007840:	d112      	bne.n	8007868 <HAL_SPI_Receive+0x44>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10e      	bne.n	8007868 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2204      	movs	r2, #4
 800784e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007852:	88fa      	ldrh	r2, [r7, #6]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f8e9 	bl	8007a36 <HAL_SPI_TransmitReceive>
 8007864:	4603      	mov	r3, r0
 8007866:	e0e2      	b.n	8007a2e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_SPI_Receive+0x52>
 8007872:	2302      	movs	r3, #2
 8007874:	e0db      	b.n	8007a2e <HAL_SPI_Receive+0x20a>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800787e:	f7fe fec9 	bl	8006614 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b01      	cmp	r3, #1
 800788e:	d002      	beq.n	8007896 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007890:	2302      	movs	r3, #2
 8007892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007894:	e0c2      	b.n	8007a1c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SPI_Receive+0x7e>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d102      	bne.n	80078a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078a6:	e0b9      	b.n	8007a1c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2204      	movs	r2, #4
 80078ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ee:	d107      	bne.n	8007900 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d007      	beq.n	800791e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d162      	bne.n	80079ec <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007926:	e02e      	b.n	8007986 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b01      	cmp	r3, #1
 8007934:	d115      	bne.n	8007962 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f103 020c 	add.w	r2, r3, #12
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	7812      	ldrb	r2, [r2, #0]
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007960:	e011      	b.n	8007986 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007962:	f7fe fe57 	bl	8006614 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d803      	bhi.n	800797a <HAL_SPI_Receive+0x156>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007978:	d102      	bne.n	8007980 <HAL_SPI_Receive+0x15c>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007984:	e04a      	b.n	8007a1c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1cb      	bne.n	8007928 <HAL_SPI_Receive+0x104>
 8007990:	e031      	b.n	80079f6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b01      	cmp	r3, #1
 800799e:	d113      	bne.n	80079c8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	b292      	uxth	r2, r2
 80079ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	1c9a      	adds	r2, r3, #2
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079c6:	e011      	b.n	80079ec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c8:	f7fe fe24 	bl	8006614 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d803      	bhi.n	80079e0 <HAL_SPI_Receive+0x1bc>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079de:	d102      	bne.n	80079e6 <HAL_SPI_Receive+0x1c2>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079ea:	e017      	b.n	8007a1c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1cd      	bne.n	8007992 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fa27 	bl	8007e4e <SPI_EndRxTransaction>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	75fb      	strb	r3, [r7, #23]
 8007a18:	e000      	b.n	8007a1c <HAL_SPI_Receive+0x1f8>
  }

error :
 8007a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b08c      	sub	sp, #48	; 0x30
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a44:	2301      	movs	r3, #1
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d101      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x26>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e18a      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x33c>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a64:	f7fe fdd6 	bl	8006614 <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d00f      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x70>
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a8c:	d107      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x68>
 8007a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d003      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007aa4:	e15b      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_SPI_TransmitReceive+0x82>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_SPI_TransmitReceive+0x82>
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007abe:	e14e      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d003      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2205      	movs	r2, #5
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	887a      	ldrh	r2, [r7, #2]
 8007ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	887a      	ldrh	r2, [r7, #2]
 8007aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	887a      	ldrh	r2, [r7, #2]
 8007af6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d007      	beq.n	8007b28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b30:	d178      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x10a>
 8007b3a:	8b7b      	ldrh	r3, [r7, #26]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d166      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	881a      	ldrh	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b64:	e053      	b.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d11b      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x176>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d016      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x176>
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d113      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	1c9a      	adds	r2, r3, #2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d119      	bne.n	8007bee <HAL_SPI_TransmitReceive+0x1b8>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d014      	beq.n	8007bee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	1c9a      	adds	r2, r3, #2
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bea:	2301      	movs	r3, #1
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bee:	f7fe fd11 	bl	8006614 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d807      	bhi.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d003      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c0c:	e0a7      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1a6      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x130>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1a1      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x130>
 8007c22:	e07c      	b.n	8007d1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_SPI_TransmitReceive+0x1fc>
 8007c2c:	8b7b      	ldrh	r3, [r7, #26]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d16b      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c58:	e057      	b.n	8007d0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d11c      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x26c>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_SPI_TransmitReceive+0x26c>
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d114      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	330c      	adds	r3, #12
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d119      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x2ae>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d014      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ce4:	f7fe fc96 	bl	8006614 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d803      	bhi.n	8007cfc <HAL_SPI_TransmitReceive+0x2c6>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d102      	bne.n	8007d02 <HAL_SPI_TransmitReceive+0x2cc>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d08:	e029      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1a2      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x224>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d19d      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f8f8 	bl	8007f18 <SPI_EndRxTxTransaction>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d3a:	e010      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	e000      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3730      	adds	r7, #48	; 0x30
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	603b      	str	r3, [r7, #0]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d8a:	e04c      	b.n	8007e26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d048      	beq.n	8007e26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007d94:	f7fe fc3e 	bl	8006614 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d902      	bls.n	8007daa <SPI_WaitFlagStateUntilTimeout+0x30>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d13d      	bne.n	8007e26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc2:	d111      	bne.n	8007de8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dcc:	d004      	beq.n	8007dd8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd6:	d107      	bne.n	8007de8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df0:	d10f      	bne.n	8007e12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e00f      	b.n	8007e46 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	bf0c      	ite	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	2300      	movne	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d1a3      	bne.n	8007d8c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af02      	add	r7, sp, #8
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e62:	d111      	bne.n	8007e88 <SPI_EndRxTransaction+0x3a>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6c:	d004      	beq.n	8007e78 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e76:	d107      	bne.n	8007e88 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e86:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e90:	d12a      	bne.n	8007ee8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e9a:	d012      	beq.n	8007ec2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff ff67 	bl	8007d7a <SPI_WaitFlagStateUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d02d      	beq.n	8007f0e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	f043 0220 	orr.w	r2, r3, #32
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e026      	b.n	8007f10 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2101      	movs	r1, #1
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff ff54 	bl	8007d7a <SPI_WaitFlagStateUntilTimeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01a      	beq.n	8007f0e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007edc:	f043 0220 	orr.w	r2, r3, #32
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e013      	b.n	8007f10 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff ff41 	bl	8007d7a <SPI_WaitFlagStateUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f02:	f043 0220 	orr.w	r2, r3, #32
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e000      	b.n	8007f10 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f24:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <SPI_EndRxTxTransaction+0x7c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1b      	ldr	r2, [pc, #108]	; (8007f98 <SPI_EndRxTxTransaction+0x80>)
 8007f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2e:	0d5b      	lsrs	r3, r3, #21
 8007f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f34:	fb02 f303 	mul.w	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f42:	d112      	bne.n	8007f6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2180      	movs	r1, #128	; 0x80
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7ff ff13 	bl	8007d7a <SPI_WaitFlagStateUntilTimeout>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d016      	beq.n	8007f88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	f043 0220 	orr.w	r2, r3, #32
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e00f      	b.n	8007f8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b80      	cmp	r3, #128	; 0x80
 8007f82:	d0f2      	beq.n	8007f6a <SPI_EndRxTxTransaction+0x52>
 8007f84:	e000      	b.n	8007f88 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f86:	bf00      	nop
  }

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000010 	.word	0x20000010
 8007f98:	165e9f81 	.word	0x165e9f81

08007f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e03f      	b.n	800802e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fe fa02 	bl	80063cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2224      	movs	r2, #36	; 0x24
 8007fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f90b 	bl	80081fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691a      	ldr	r2, [r3, #16]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b088      	sub	sp, #32
 800803a:	af02      	add	r7, sp, #8
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b20      	cmp	r3, #32
 8008054:	f040 8083 	bne.w	800815e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_UART_Transmit+0x2e>
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e07b      	b.n	8008160 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_UART_Transmit+0x40>
 8008072:	2302      	movs	r3, #2
 8008074:	e074      	b.n	8008160 <HAL_UART_Transmit+0x12a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2221      	movs	r2, #33	; 0x21
 8008088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800808c:	f7fe fac2 	bl	8006614 <HAL_GetTick>
 8008090:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80080a6:	e042      	b.n	800812e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080be:	d122      	bne.n	8008106 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f84c 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e042      	b.n	8008160 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3302      	adds	r3, #2
 80080fa:	60bb      	str	r3, [r7, #8]
 80080fc:	e017      	b.n	800812e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	3301      	adds	r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
 8008104:	e013      	b.n	800812e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	2180      	movs	r1, #128	; 0x80
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f829 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e01f      	b.n	8008160 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	60ba      	str	r2, [r7, #8]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1b7      	bne.n	80080a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2200      	movs	r2, #0
 8008140:	2140      	movs	r1, #64	; 0x40
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 f810 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e006      	b.n	8008160 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e000      	b.n	8008160 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800815e:	2302      	movs	r3, #2
  }
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008178:	e02c      	b.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d028      	beq.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <UART_WaitOnFlagUntilTimeout+0x30>
 8008188:	f7fe fa44 	bl	8006614 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	429a      	cmp	r2, r3
 8008196:	d21d      	bcs.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0201 	bic.w	r2, r2, #1
 80081b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e00f      	b.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	4013      	ands	r3, r2
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d0c3      	beq.n	800817a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	431a      	orrs	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800823e:	f023 030c 	bic.w	r3, r3, #12
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	430b      	orrs	r3, r1
 800824a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826a:	f040 818b 	bne.w	8008584 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4ac1      	ldr	r2, [pc, #772]	; (8008578 <UART_SetConfig+0x37c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d005      	beq.n	8008284 <UART_SetConfig+0x88>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4abf      	ldr	r2, [pc, #764]	; (800857c <UART_SetConfig+0x380>)
 800827e:	4293      	cmp	r3, r2
 8008280:	f040 80bd 	bne.w	80083fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7ff f922 	bl	80074cc <HAL_RCC_GetPCLK2Freq>
 8008288:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	461d      	mov	r5, r3
 800828e:	f04f 0600 	mov.w	r6, #0
 8008292:	46a8      	mov	r8, r5
 8008294:	46b1      	mov	r9, r6
 8008296:	eb18 0308 	adds.w	r3, r8, r8
 800829a:	eb49 0409 	adc.w	r4, r9, r9
 800829e:	4698      	mov	r8, r3
 80082a0:	46a1      	mov	r9, r4
 80082a2:	eb18 0805 	adds.w	r8, r8, r5
 80082a6:	eb49 0906 	adc.w	r9, r9, r6
 80082aa:	f04f 0100 	mov.w	r1, #0
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082be:	4688      	mov	r8, r1
 80082c0:	4691      	mov	r9, r2
 80082c2:	eb18 0005 	adds.w	r0, r8, r5
 80082c6:	eb49 0106 	adc.w	r1, r9, r6
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	461d      	mov	r5, r3
 80082d0:	f04f 0600 	mov.w	r6, #0
 80082d4:	196b      	adds	r3, r5, r5
 80082d6:	eb46 0406 	adc.w	r4, r6, r6
 80082da:	461a      	mov	r2, r3
 80082dc:	4623      	mov	r3, r4
 80082de:	f7f8 fcdf 	bl	8000ca0 <__aeabi_uldivmod>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	461a      	mov	r2, r3
 80082e8:	4ba5      	ldr	r3, [pc, #660]	; (8008580 <UART_SetConfig+0x384>)
 80082ea:	fba3 2302 	umull	r2, r3, r3, r2
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	461d      	mov	r5, r3
 80082f8:	f04f 0600 	mov.w	r6, #0
 80082fc:	46a9      	mov	r9, r5
 80082fe:	46b2      	mov	sl, r6
 8008300:	eb19 0309 	adds.w	r3, r9, r9
 8008304:	eb4a 040a 	adc.w	r4, sl, sl
 8008308:	4699      	mov	r9, r3
 800830a:	46a2      	mov	sl, r4
 800830c:	eb19 0905 	adds.w	r9, r9, r5
 8008310:	eb4a 0a06 	adc.w	sl, sl, r6
 8008314:	f04f 0100 	mov.w	r1, #0
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008320:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008324:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008328:	4689      	mov	r9, r1
 800832a:	4692      	mov	sl, r2
 800832c:	eb19 0005 	adds.w	r0, r9, r5
 8008330:	eb4a 0106 	adc.w	r1, sl, r6
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	461d      	mov	r5, r3
 800833a:	f04f 0600 	mov.w	r6, #0
 800833e:	196b      	adds	r3, r5, r5
 8008340:	eb46 0406 	adc.w	r4, r6, r6
 8008344:	461a      	mov	r2, r3
 8008346:	4623      	mov	r3, r4
 8008348:	f7f8 fcaa 	bl	8000ca0 <__aeabi_uldivmod>
 800834c:	4603      	mov	r3, r0
 800834e:	460c      	mov	r4, r1
 8008350:	461a      	mov	r2, r3
 8008352:	4b8b      	ldr	r3, [pc, #556]	; (8008580 <UART_SetConfig+0x384>)
 8008354:	fba3 1302 	umull	r1, r3, r3, r2
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	2164      	movs	r1, #100	; 0x64
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	3332      	adds	r3, #50	; 0x32
 8008366:	4a86      	ldr	r2, [pc, #536]	; (8008580 <UART_SetConfig+0x384>)
 8008368:	fba2 2303 	umull	r2, r3, r2, r3
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008374:	4498      	add	r8, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	461d      	mov	r5, r3
 800837a:	f04f 0600 	mov.w	r6, #0
 800837e:	46a9      	mov	r9, r5
 8008380:	46b2      	mov	sl, r6
 8008382:	eb19 0309 	adds.w	r3, r9, r9
 8008386:	eb4a 040a 	adc.w	r4, sl, sl
 800838a:	4699      	mov	r9, r3
 800838c:	46a2      	mov	sl, r4
 800838e:	eb19 0905 	adds.w	r9, r9, r5
 8008392:	eb4a 0a06 	adc.w	sl, sl, r6
 8008396:	f04f 0100 	mov.w	r1, #0
 800839a:	f04f 0200 	mov.w	r2, #0
 800839e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083aa:	4689      	mov	r9, r1
 80083ac:	4692      	mov	sl, r2
 80083ae:	eb19 0005 	adds.w	r0, r9, r5
 80083b2:	eb4a 0106 	adc.w	r1, sl, r6
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	461d      	mov	r5, r3
 80083bc:	f04f 0600 	mov.w	r6, #0
 80083c0:	196b      	adds	r3, r5, r5
 80083c2:	eb46 0406 	adc.w	r4, r6, r6
 80083c6:	461a      	mov	r2, r3
 80083c8:	4623      	mov	r3, r4
 80083ca:	f7f8 fc69 	bl	8000ca0 <__aeabi_uldivmod>
 80083ce:	4603      	mov	r3, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	461a      	mov	r2, r3
 80083d4:	4b6a      	ldr	r3, [pc, #424]	; (8008580 <UART_SetConfig+0x384>)
 80083d6:	fba3 1302 	umull	r1, r3, r3, r2
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	2164      	movs	r1, #100	; 0x64
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	3332      	adds	r3, #50	; 0x32
 80083e8:	4a65      	ldr	r2, [pc, #404]	; (8008580 <UART_SetConfig+0x384>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f003 0207 	and.w	r2, r3, #7
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4442      	add	r2, r8
 80083fa:	609a      	str	r2, [r3, #8]
 80083fc:	e26f      	b.n	80088de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083fe:	f7ff f851 	bl	80074a4 <HAL_RCC_GetPCLK1Freq>
 8008402:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	461d      	mov	r5, r3
 8008408:	f04f 0600 	mov.w	r6, #0
 800840c:	46a8      	mov	r8, r5
 800840e:	46b1      	mov	r9, r6
 8008410:	eb18 0308 	adds.w	r3, r8, r8
 8008414:	eb49 0409 	adc.w	r4, r9, r9
 8008418:	4698      	mov	r8, r3
 800841a:	46a1      	mov	r9, r4
 800841c:	eb18 0805 	adds.w	r8, r8, r5
 8008420:	eb49 0906 	adc.w	r9, r9, r6
 8008424:	f04f 0100 	mov.w	r1, #0
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008430:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008434:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008438:	4688      	mov	r8, r1
 800843a:	4691      	mov	r9, r2
 800843c:	eb18 0005 	adds.w	r0, r8, r5
 8008440:	eb49 0106 	adc.w	r1, r9, r6
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	461d      	mov	r5, r3
 800844a:	f04f 0600 	mov.w	r6, #0
 800844e:	196b      	adds	r3, r5, r5
 8008450:	eb46 0406 	adc.w	r4, r6, r6
 8008454:	461a      	mov	r2, r3
 8008456:	4623      	mov	r3, r4
 8008458:	f7f8 fc22 	bl	8000ca0 <__aeabi_uldivmod>
 800845c:	4603      	mov	r3, r0
 800845e:	460c      	mov	r4, r1
 8008460:	461a      	mov	r2, r3
 8008462:	4b47      	ldr	r3, [pc, #284]	; (8008580 <UART_SetConfig+0x384>)
 8008464:	fba3 2302 	umull	r2, r3, r3, r2
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	461d      	mov	r5, r3
 8008472:	f04f 0600 	mov.w	r6, #0
 8008476:	46a9      	mov	r9, r5
 8008478:	46b2      	mov	sl, r6
 800847a:	eb19 0309 	adds.w	r3, r9, r9
 800847e:	eb4a 040a 	adc.w	r4, sl, sl
 8008482:	4699      	mov	r9, r3
 8008484:	46a2      	mov	sl, r4
 8008486:	eb19 0905 	adds.w	r9, r9, r5
 800848a:	eb4a 0a06 	adc.w	sl, sl, r6
 800848e:	f04f 0100 	mov.w	r1, #0
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800849a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800849e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084a2:	4689      	mov	r9, r1
 80084a4:	4692      	mov	sl, r2
 80084a6:	eb19 0005 	adds.w	r0, r9, r5
 80084aa:	eb4a 0106 	adc.w	r1, sl, r6
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	461d      	mov	r5, r3
 80084b4:	f04f 0600 	mov.w	r6, #0
 80084b8:	196b      	adds	r3, r5, r5
 80084ba:	eb46 0406 	adc.w	r4, r6, r6
 80084be:	461a      	mov	r2, r3
 80084c0:	4623      	mov	r3, r4
 80084c2:	f7f8 fbed 	bl	8000ca0 <__aeabi_uldivmod>
 80084c6:	4603      	mov	r3, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b2c      	ldr	r3, [pc, #176]	; (8008580 <UART_SetConfig+0x384>)
 80084ce:	fba3 1302 	umull	r1, r3, r3, r2
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	2164      	movs	r1, #100	; 0x64
 80084d6:	fb01 f303 	mul.w	r3, r1, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	3332      	adds	r3, #50	; 0x32
 80084e0:	4a27      	ldr	r2, [pc, #156]	; (8008580 <UART_SetConfig+0x384>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	095b      	lsrs	r3, r3, #5
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084ee:	4498      	add	r8, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	461d      	mov	r5, r3
 80084f4:	f04f 0600 	mov.w	r6, #0
 80084f8:	46a9      	mov	r9, r5
 80084fa:	46b2      	mov	sl, r6
 80084fc:	eb19 0309 	adds.w	r3, r9, r9
 8008500:	eb4a 040a 	adc.w	r4, sl, sl
 8008504:	4699      	mov	r9, r3
 8008506:	46a2      	mov	sl, r4
 8008508:	eb19 0905 	adds.w	r9, r9, r5
 800850c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008510:	f04f 0100 	mov.w	r1, #0
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800851c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008524:	4689      	mov	r9, r1
 8008526:	4692      	mov	sl, r2
 8008528:	eb19 0005 	adds.w	r0, r9, r5
 800852c:	eb4a 0106 	adc.w	r1, sl, r6
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	461d      	mov	r5, r3
 8008536:	f04f 0600 	mov.w	r6, #0
 800853a:	196b      	adds	r3, r5, r5
 800853c:	eb46 0406 	adc.w	r4, r6, r6
 8008540:	461a      	mov	r2, r3
 8008542:	4623      	mov	r3, r4
 8008544:	f7f8 fbac 	bl	8000ca0 <__aeabi_uldivmod>
 8008548:	4603      	mov	r3, r0
 800854a:	460c      	mov	r4, r1
 800854c:	461a      	mov	r2, r3
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <UART_SetConfig+0x384>)
 8008550:	fba3 1302 	umull	r1, r3, r3, r2
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	2164      	movs	r1, #100	; 0x64
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	3332      	adds	r3, #50	; 0x32
 8008562:	4a07      	ldr	r2, [pc, #28]	; (8008580 <UART_SetConfig+0x384>)
 8008564:	fba2 2303 	umull	r2, r3, r2, r3
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f003 0207 	and.w	r2, r3, #7
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4442      	add	r2, r8
 8008574:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008576:	e1b2      	b.n	80088de <UART_SetConfig+0x6e2>
 8008578:	40011000 	.word	0x40011000
 800857c:	40011400 	.word	0x40011400
 8008580:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4ad7      	ldr	r2, [pc, #860]	; (80088e8 <UART_SetConfig+0x6ec>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d005      	beq.n	800859a <UART_SetConfig+0x39e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4ad6      	ldr	r2, [pc, #856]	; (80088ec <UART_SetConfig+0x6f0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	f040 80d1 	bne.w	800873c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800859a:	f7fe ff97 	bl	80074cc <HAL_RCC_GetPCLK2Freq>
 800859e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	469a      	mov	sl, r3
 80085a4:	f04f 0b00 	mov.w	fp, #0
 80085a8:	46d0      	mov	r8, sl
 80085aa:	46d9      	mov	r9, fp
 80085ac:	eb18 0308 	adds.w	r3, r8, r8
 80085b0:	eb49 0409 	adc.w	r4, r9, r9
 80085b4:	4698      	mov	r8, r3
 80085b6:	46a1      	mov	r9, r4
 80085b8:	eb18 080a 	adds.w	r8, r8, sl
 80085bc:	eb49 090b 	adc.w	r9, r9, fp
 80085c0:	f04f 0100 	mov.w	r1, #0
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085d4:	4688      	mov	r8, r1
 80085d6:	4691      	mov	r9, r2
 80085d8:	eb1a 0508 	adds.w	r5, sl, r8
 80085dc:	eb4b 0609 	adc.w	r6, fp, r9
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4619      	mov	r1, r3
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 0300 	mov.w	r3, #0
 80085ee:	f04f 0400 	mov.w	r4, #0
 80085f2:	0094      	lsls	r4, r2, #2
 80085f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085f8:	008b      	lsls	r3, r1, #2
 80085fa:	461a      	mov	r2, r3
 80085fc:	4623      	mov	r3, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	4631      	mov	r1, r6
 8008602:	f7f8 fb4d 	bl	8000ca0 <__aeabi_uldivmod>
 8008606:	4603      	mov	r3, r0
 8008608:	460c      	mov	r4, r1
 800860a:	461a      	mov	r2, r3
 800860c:	4bb8      	ldr	r3, [pc, #736]	; (80088f0 <UART_SetConfig+0x6f4>)
 800860e:	fba3 2302 	umull	r2, r3, r3, r2
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	469b      	mov	fp, r3
 800861c:	f04f 0c00 	mov.w	ip, #0
 8008620:	46d9      	mov	r9, fp
 8008622:	46e2      	mov	sl, ip
 8008624:	eb19 0309 	adds.w	r3, r9, r9
 8008628:	eb4a 040a 	adc.w	r4, sl, sl
 800862c:	4699      	mov	r9, r3
 800862e:	46a2      	mov	sl, r4
 8008630:	eb19 090b 	adds.w	r9, r9, fp
 8008634:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008638:	f04f 0100 	mov.w	r1, #0
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008644:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008648:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800864c:	4689      	mov	r9, r1
 800864e:	4692      	mov	sl, r2
 8008650:	eb1b 0509 	adds.w	r5, fp, r9
 8008654:	eb4c 060a 	adc.w	r6, ip, sl
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4619      	mov	r1, r3
 800865e:	f04f 0200 	mov.w	r2, #0
 8008662:	f04f 0300 	mov.w	r3, #0
 8008666:	f04f 0400 	mov.w	r4, #0
 800866a:	0094      	lsls	r4, r2, #2
 800866c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008670:	008b      	lsls	r3, r1, #2
 8008672:	461a      	mov	r2, r3
 8008674:	4623      	mov	r3, r4
 8008676:	4628      	mov	r0, r5
 8008678:	4631      	mov	r1, r6
 800867a:	f7f8 fb11 	bl	8000ca0 <__aeabi_uldivmod>
 800867e:	4603      	mov	r3, r0
 8008680:	460c      	mov	r4, r1
 8008682:	461a      	mov	r2, r3
 8008684:	4b9a      	ldr	r3, [pc, #616]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008686:	fba3 1302 	umull	r1, r3, r3, r2
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	2164      	movs	r1, #100	; 0x64
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	3332      	adds	r3, #50	; 0x32
 8008698:	4a95      	ldr	r2, [pc, #596]	; (80088f0 <UART_SetConfig+0x6f4>)
 800869a:	fba2 2303 	umull	r2, r3, r2, r3
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086a4:	4498      	add	r8, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	469b      	mov	fp, r3
 80086aa:	f04f 0c00 	mov.w	ip, #0
 80086ae:	46d9      	mov	r9, fp
 80086b0:	46e2      	mov	sl, ip
 80086b2:	eb19 0309 	adds.w	r3, r9, r9
 80086b6:	eb4a 040a 	adc.w	r4, sl, sl
 80086ba:	4699      	mov	r9, r3
 80086bc:	46a2      	mov	sl, r4
 80086be:	eb19 090b 	adds.w	r9, r9, fp
 80086c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086c6:	f04f 0100 	mov.w	r1, #0
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086da:	4689      	mov	r9, r1
 80086dc:	4692      	mov	sl, r2
 80086de:	eb1b 0509 	adds.w	r5, fp, r9
 80086e2:	eb4c 060a 	adc.w	r6, ip, sl
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4619      	mov	r1, r3
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	f04f 0400 	mov.w	r4, #0
 80086f8:	0094      	lsls	r4, r2, #2
 80086fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086fe:	008b      	lsls	r3, r1, #2
 8008700:	461a      	mov	r2, r3
 8008702:	4623      	mov	r3, r4
 8008704:	4628      	mov	r0, r5
 8008706:	4631      	mov	r1, r6
 8008708:	f7f8 faca 	bl	8000ca0 <__aeabi_uldivmod>
 800870c:	4603      	mov	r3, r0
 800870e:	460c      	mov	r4, r1
 8008710:	461a      	mov	r2, r3
 8008712:	4b77      	ldr	r3, [pc, #476]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008714:	fba3 1302 	umull	r1, r3, r3, r2
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	2164      	movs	r1, #100	; 0x64
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	3332      	adds	r3, #50	; 0x32
 8008726:	4a72      	ldr	r2, [pc, #456]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008728:	fba2 2303 	umull	r2, r3, r2, r3
 800872c:	095b      	lsrs	r3, r3, #5
 800872e:	f003 020f 	and.w	r2, r3, #15
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4442      	add	r2, r8
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	e0d0      	b.n	80088de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800873c:	f7fe feb2 	bl	80074a4 <HAL_RCC_GetPCLK1Freq>
 8008740:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	469a      	mov	sl, r3
 8008746:	f04f 0b00 	mov.w	fp, #0
 800874a:	46d0      	mov	r8, sl
 800874c:	46d9      	mov	r9, fp
 800874e:	eb18 0308 	adds.w	r3, r8, r8
 8008752:	eb49 0409 	adc.w	r4, r9, r9
 8008756:	4698      	mov	r8, r3
 8008758:	46a1      	mov	r9, r4
 800875a:	eb18 080a 	adds.w	r8, r8, sl
 800875e:	eb49 090b 	adc.w	r9, r9, fp
 8008762:	f04f 0100 	mov.w	r1, #0
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800876e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008772:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008776:	4688      	mov	r8, r1
 8008778:	4691      	mov	r9, r2
 800877a:	eb1a 0508 	adds.w	r5, sl, r8
 800877e:	eb4b 0609 	adc.w	r6, fp, r9
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	4619      	mov	r1, r3
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	f04f 0400 	mov.w	r4, #0
 8008794:	0094      	lsls	r4, r2, #2
 8008796:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800879a:	008b      	lsls	r3, r1, #2
 800879c:	461a      	mov	r2, r3
 800879e:	4623      	mov	r3, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	4631      	mov	r1, r6
 80087a4:	f7f8 fa7c 	bl	8000ca0 <__aeabi_uldivmod>
 80087a8:	4603      	mov	r3, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b50      	ldr	r3, [pc, #320]	; (80088f0 <UART_SetConfig+0x6f4>)
 80087b0:	fba3 2302 	umull	r2, r3, r3, r2
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	469b      	mov	fp, r3
 80087be:	f04f 0c00 	mov.w	ip, #0
 80087c2:	46d9      	mov	r9, fp
 80087c4:	46e2      	mov	sl, ip
 80087c6:	eb19 0309 	adds.w	r3, r9, r9
 80087ca:	eb4a 040a 	adc.w	r4, sl, sl
 80087ce:	4699      	mov	r9, r3
 80087d0:	46a2      	mov	sl, r4
 80087d2:	eb19 090b 	adds.w	r9, r9, fp
 80087d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087da:	f04f 0100 	mov.w	r1, #0
 80087de:	f04f 0200 	mov.w	r2, #0
 80087e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087ee:	4689      	mov	r9, r1
 80087f0:	4692      	mov	sl, r2
 80087f2:	eb1b 0509 	adds.w	r5, fp, r9
 80087f6:	eb4c 060a 	adc.w	r6, ip, sl
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4619      	mov	r1, r3
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	f04f 0400 	mov.w	r4, #0
 800880c:	0094      	lsls	r4, r2, #2
 800880e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008812:	008b      	lsls	r3, r1, #2
 8008814:	461a      	mov	r2, r3
 8008816:	4623      	mov	r3, r4
 8008818:	4628      	mov	r0, r5
 800881a:	4631      	mov	r1, r6
 800881c:	f7f8 fa40 	bl	8000ca0 <__aeabi_uldivmod>
 8008820:	4603      	mov	r3, r0
 8008822:	460c      	mov	r4, r1
 8008824:	461a      	mov	r2, r3
 8008826:	4b32      	ldr	r3, [pc, #200]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008828:	fba3 1302 	umull	r1, r3, r3, r2
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	2164      	movs	r1, #100	; 0x64
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	3332      	adds	r3, #50	; 0x32
 800883a:	4a2d      	ldr	r2, [pc, #180]	; (80088f0 <UART_SetConfig+0x6f4>)
 800883c:	fba2 2303 	umull	r2, r3, r2, r3
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008846:	4498      	add	r8, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	469b      	mov	fp, r3
 800884c:	f04f 0c00 	mov.w	ip, #0
 8008850:	46d9      	mov	r9, fp
 8008852:	46e2      	mov	sl, ip
 8008854:	eb19 0309 	adds.w	r3, r9, r9
 8008858:	eb4a 040a 	adc.w	r4, sl, sl
 800885c:	4699      	mov	r9, r3
 800885e:	46a2      	mov	sl, r4
 8008860:	eb19 090b 	adds.w	r9, r9, fp
 8008864:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008868:	f04f 0100 	mov.w	r1, #0
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800887c:	4689      	mov	r9, r1
 800887e:	4692      	mov	sl, r2
 8008880:	eb1b 0509 	adds.w	r5, fp, r9
 8008884:	eb4c 060a 	adc.w	r6, ip, sl
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	4619      	mov	r1, r3
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f04f 0400 	mov.w	r4, #0
 800889a:	0094      	lsls	r4, r2, #2
 800889c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088a0:	008b      	lsls	r3, r1, #2
 80088a2:	461a      	mov	r2, r3
 80088a4:	4623      	mov	r3, r4
 80088a6:	4628      	mov	r0, r5
 80088a8:	4631      	mov	r1, r6
 80088aa:	f7f8 f9f9 	bl	8000ca0 <__aeabi_uldivmod>
 80088ae:	4603      	mov	r3, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	461a      	mov	r2, r3
 80088b4:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <UART_SetConfig+0x6f4>)
 80088b6:	fba3 1302 	umull	r1, r3, r3, r2
 80088ba:	095b      	lsrs	r3, r3, #5
 80088bc:	2164      	movs	r1, #100	; 0x64
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	3332      	adds	r3, #50	; 0x32
 80088c8:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <UART_SetConfig+0x6f4>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	f003 020f 	and.w	r2, r3, #15
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4442      	add	r2, r8
 80088da:	609a      	str	r2, [r3, #8]
}
 80088dc:	e7ff      	b.n	80088de <UART_SetConfig+0x6e2>
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	40011000 	.word	0x40011000
 80088ec:	40011400 	.word	0x40011400
 80088f0:	51eb851f 	.word	0x51eb851f

080088f4 <__errno>:
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <__errno+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	2000001c 	.word	0x2000001c

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4e0d      	ldr	r6, [pc, #52]	; (8008938 <__libc_init_array+0x38>)
 8008904:	4c0d      	ldr	r4, [pc, #52]	; (800893c <__libc_init_array+0x3c>)
 8008906:	1ba4      	subs	r4, r4, r6
 8008908:	10a4      	asrs	r4, r4, #2
 800890a:	2500      	movs	r5, #0
 800890c:	42a5      	cmp	r5, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	4e0b      	ldr	r6, [pc, #44]	; (8008940 <__libc_init_array+0x40>)
 8008912:	4c0c      	ldr	r4, [pc, #48]	; (8008944 <__libc_init_array+0x44>)
 8008914:	f000 f980 	bl	8008c18 <_init>
 8008918:	1ba4      	subs	r4, r4, r6
 800891a:	10a4      	asrs	r4, r4, #2
 800891c:	2500      	movs	r5, #0
 800891e:	42a5      	cmp	r5, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008928:	4798      	blx	r3
 800892a:	3501      	adds	r5, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008932:	4798      	blx	r3
 8008934:	3501      	adds	r5, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	0800eb24 	.word	0x0800eb24
 800893c:	0800eb24 	.word	0x0800eb24
 8008940:	0800eb24 	.word	0x0800eb24
 8008944:	0800eb28 	.word	0x0800eb28

08008948 <memset>:
 8008948:	4402      	add	r2, r0
 800894a:	4603      	mov	r3, r0
 800894c:	4293      	cmp	r3, r2
 800894e:	d100      	bne.n	8008952 <memset+0xa>
 8008950:	4770      	bx	lr
 8008952:	f803 1b01 	strb.w	r1, [r3], #1
 8008956:	e7f9      	b.n	800894c <memset+0x4>

08008958 <sqrt>:
 8008958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800895c:	ed2d 8b02 	vpush	{d8}
 8008960:	b08b      	sub	sp, #44	; 0x2c
 8008962:	ec55 4b10 	vmov	r4, r5, d0
 8008966:	f000 f8a1 	bl	8008aac <__ieee754_sqrt>
 800896a:	4b26      	ldr	r3, [pc, #152]	; (8008a04 <sqrt+0xac>)
 800896c:	eeb0 8a40 	vmov.f32	s16, s0
 8008970:	eef0 8a60 	vmov.f32	s17, s1
 8008974:	f993 6000 	ldrsb.w	r6, [r3]
 8008978:	1c73      	adds	r3, r6, #1
 800897a:	d02a      	beq.n	80089d2 <sqrt+0x7a>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	4620      	mov	r0, r4
 8008982:	4629      	mov	r1, r5
 8008984:	f7f8 f8de 	bl	8000b44 <__aeabi_dcmpun>
 8008988:	4607      	mov	r7, r0
 800898a:	bb10      	cbnz	r0, 80089d2 <sqrt+0x7a>
 800898c:	f04f 0800 	mov.w	r8, #0
 8008990:	f04f 0900 	mov.w	r9, #0
 8008994:	4642      	mov	r2, r8
 8008996:	464b      	mov	r3, r9
 8008998:	4620      	mov	r0, r4
 800899a:	4629      	mov	r1, r5
 800899c:	f7f8 f8aa 	bl	8000af4 <__aeabi_dcmplt>
 80089a0:	b1b8      	cbz	r0, 80089d2 <sqrt+0x7a>
 80089a2:	2301      	movs	r3, #1
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4b18      	ldr	r3, [pc, #96]	; (8008a08 <sqrt+0xb0>)
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	9708      	str	r7, [sp, #32]
 80089ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80089b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80089b4:	b9b6      	cbnz	r6, 80089e4 <sqrt+0x8c>
 80089b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80089ba:	4668      	mov	r0, sp
 80089bc:	f000 f929 	bl	8008c12 <matherr>
 80089c0:	b1d0      	cbz	r0, 80089f8 <sqrt+0xa0>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	b11b      	cbz	r3, 80089ce <sqrt+0x76>
 80089c6:	f7ff ff95 	bl	80088f4 <__errno>
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80089d2:	eeb0 0a48 	vmov.f32	s0, s16
 80089d6:	eef0 0a68 	vmov.f32	s1, s17
 80089da:	b00b      	add	sp, #44	; 0x2c
 80089dc:	ecbd 8b02 	vpop	{d8}
 80089e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e4:	4642      	mov	r2, r8
 80089e6:	464b      	mov	r3, r9
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f7 ff3a 	bl	8000864 <__aeabi_ddiv>
 80089f0:	2e02      	cmp	r6, #2
 80089f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089f6:	d1e0      	bne.n	80089ba <sqrt+0x62>
 80089f8:	f7ff ff7c 	bl	80088f4 <__errno>
 80089fc:	2321      	movs	r3, #33	; 0x21
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	e7df      	b.n	80089c2 <sqrt+0x6a>
 8008a02:	bf00      	nop
 8008a04:	20000080 	.word	0x20000080
 8008a08:	0800eb10 	.word	0x0800eb10

08008a0c <sqrtf>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	ed2d 8b02 	vpush	{d8}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	eeb0 8a40 	vmov.f32	s16, s0
 8008a18:	f000 f8f8 	bl	8008c0c <__ieee754_sqrtf>
 8008a1c:	4b21      	ldr	r3, [pc, #132]	; (8008aa4 <sqrtf+0x98>)
 8008a1e:	f993 4000 	ldrsb.w	r4, [r3]
 8008a22:	1c63      	adds	r3, r4, #1
 8008a24:	d02c      	beq.n	8008a80 <sqrtf+0x74>
 8008a26:	eeb4 8a48 	vcmp.f32	s16, s16
 8008a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2e:	d627      	bvs.n	8008a80 <sqrtf+0x74>
 8008a30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a38:	d522      	bpl.n	8008a80 <sqrtf+0x74>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <sqrtf+0x9c>)
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	ee18 0a10 	vmov	r0, s16
 8008a46:	2300      	movs	r3, #0
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	f7f7 fd89 	bl	8000560 <__aeabi_f2d>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	b9ac      	cbnz	r4, 8008a88 <sqrtf+0x7c>
 8008a5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a60:	4668      	mov	r0, sp
 8008a62:	f000 f8d6 	bl	8008c12 <matherr>
 8008a66:	b1b8      	cbz	r0, 8008a98 <sqrtf+0x8c>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	b11b      	cbz	r3, 8008a74 <sqrtf+0x68>
 8008a6c:	f7ff ff42 	bl	80088f4 <__errno>
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	6003      	str	r3, [r0, #0]
 8008a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a78:	f7f8 f8c2 	bl	8000c00 <__aeabi_d2f>
 8008a7c:	ee00 0a10 	vmov	s0, r0
 8008a80:	b00a      	add	sp, #40	; 0x28
 8008a82:	ecbd 8b02 	vpop	{d8}
 8008a86:	bd10      	pop	{r4, pc}
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f7f7 feea 	bl	8000864 <__aeabi_ddiv>
 8008a90:	2c02      	cmp	r4, #2
 8008a92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a96:	d1e3      	bne.n	8008a60 <sqrtf+0x54>
 8008a98:	f7ff ff2c 	bl	80088f4 <__errno>
 8008a9c:	2321      	movs	r3, #33	; 0x21
 8008a9e:	6003      	str	r3, [r0, #0]
 8008aa0:	e7e2      	b.n	8008a68 <sqrtf+0x5c>
 8008aa2:	bf00      	nop
 8008aa4:	20000080 	.word	0x20000080
 8008aa8:	0800eb15 	.word	0x0800eb15

08008aac <__ieee754_sqrt>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4955      	ldr	r1, [pc, #340]	; (8008c08 <__ieee754_sqrt+0x15c>)
 8008ab2:	ec55 4b10 	vmov	r4, r5, d0
 8008ab6:	43a9      	bics	r1, r5
 8008ab8:	462b      	mov	r3, r5
 8008aba:	462a      	mov	r2, r5
 8008abc:	d112      	bne.n	8008ae4 <__ieee754_sqrt+0x38>
 8008abe:	ee10 2a10 	vmov	r2, s0
 8008ac2:	ee10 0a10 	vmov	r0, s0
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f7 fda2 	bl	8000610 <__aeabi_dmul>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fbe6 	bl	80002a4 <__adddf3>
 8008ad8:	4604      	mov	r4, r0
 8008ada:	460d      	mov	r5, r1
 8008adc:	ec45 4b10 	vmov	d0, r4, r5
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	2d00      	cmp	r5, #0
 8008ae6:	ee10 0a10 	vmov	r0, s0
 8008aea:	4621      	mov	r1, r4
 8008aec:	dc0f      	bgt.n	8008b0e <__ieee754_sqrt+0x62>
 8008aee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008af2:	4330      	orrs	r0, r6
 8008af4:	d0f2      	beq.n	8008adc <__ieee754_sqrt+0x30>
 8008af6:	b155      	cbz	r5, 8008b0e <__ieee754_sqrt+0x62>
 8008af8:	ee10 2a10 	vmov	r2, s0
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fbce 	bl	80002a0 <__aeabi_dsub>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	f7f7 feac 	bl	8000864 <__aeabi_ddiv>
 8008b0c:	e7e4      	b.n	8008ad8 <__ieee754_sqrt+0x2c>
 8008b0e:	151b      	asrs	r3, r3, #20
 8008b10:	d073      	beq.n	8008bfa <__ieee754_sqrt+0x14e>
 8008b12:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b16:	07dd      	lsls	r5, r3, #31
 8008b18:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b1c:	bf48      	it	mi
 8008b1e:	0fc8      	lsrmi	r0, r1, #31
 8008b20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b24:	bf44      	itt	mi
 8008b26:	0049      	lslmi	r1, r1, #1
 8008b28:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008b2c:	2500      	movs	r5, #0
 8008b2e:	1058      	asrs	r0, r3, #1
 8008b30:	0fcb      	lsrs	r3, r1, #31
 8008b32:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008b36:	0049      	lsls	r1, r1, #1
 8008b38:	2316      	movs	r3, #22
 8008b3a:	462c      	mov	r4, r5
 8008b3c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008b40:	19a7      	adds	r7, r4, r6
 8008b42:	4297      	cmp	r7, r2
 8008b44:	bfde      	ittt	le
 8008b46:	19bc      	addle	r4, r7, r6
 8008b48:	1bd2      	suble	r2, r2, r7
 8008b4a:	19ad      	addle	r5, r5, r6
 8008b4c:	0fcf      	lsrs	r7, r1, #31
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008b54:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b5c:	d1f0      	bne.n	8008b40 <__ieee754_sqrt+0x94>
 8008b5e:	f04f 0c20 	mov.w	ip, #32
 8008b62:	469e      	mov	lr, r3
 8008b64:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b68:	42a2      	cmp	r2, r4
 8008b6a:	eb06 070e 	add.w	r7, r6, lr
 8008b6e:	dc02      	bgt.n	8008b76 <__ieee754_sqrt+0xca>
 8008b70:	d112      	bne.n	8008b98 <__ieee754_sqrt+0xec>
 8008b72:	428f      	cmp	r7, r1
 8008b74:	d810      	bhi.n	8008b98 <__ieee754_sqrt+0xec>
 8008b76:	2f00      	cmp	r7, #0
 8008b78:	eb07 0e06 	add.w	lr, r7, r6
 8008b7c:	da42      	bge.n	8008c04 <__ieee754_sqrt+0x158>
 8008b7e:	f1be 0f00 	cmp.w	lr, #0
 8008b82:	db3f      	blt.n	8008c04 <__ieee754_sqrt+0x158>
 8008b84:	f104 0801 	add.w	r8, r4, #1
 8008b88:	1b12      	subs	r2, r2, r4
 8008b8a:	428f      	cmp	r7, r1
 8008b8c:	bf88      	it	hi
 8008b8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b92:	1bc9      	subs	r1, r1, r7
 8008b94:	4433      	add	r3, r6
 8008b96:	4644      	mov	r4, r8
 8008b98:	0052      	lsls	r2, r2, #1
 8008b9a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008b9e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008ba2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ba6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008baa:	d1dd      	bne.n	8008b68 <__ieee754_sqrt+0xbc>
 8008bac:	430a      	orrs	r2, r1
 8008bae:	d006      	beq.n	8008bbe <__ieee754_sqrt+0x112>
 8008bb0:	1c5c      	adds	r4, r3, #1
 8008bb2:	bf13      	iteet	ne
 8008bb4:	3301      	addne	r3, #1
 8008bb6:	3501      	addeq	r5, #1
 8008bb8:	4663      	moveq	r3, ip
 8008bba:	f023 0301 	bicne.w	r3, r3, #1
 8008bbe:	106a      	asrs	r2, r5, #1
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	07e9      	lsls	r1, r5, #31
 8008bc4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008bc8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008bcc:	bf48      	it	mi
 8008bce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008bd2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008bd6:	461c      	mov	r4, r3
 8008bd8:	e780      	b.n	8008adc <__ieee754_sqrt+0x30>
 8008bda:	0aca      	lsrs	r2, r1, #11
 8008bdc:	3815      	subs	r0, #21
 8008bde:	0549      	lsls	r1, r1, #21
 8008be0:	2a00      	cmp	r2, #0
 8008be2:	d0fa      	beq.n	8008bda <__ieee754_sqrt+0x12e>
 8008be4:	02d6      	lsls	r6, r2, #11
 8008be6:	d50a      	bpl.n	8008bfe <__ieee754_sqrt+0x152>
 8008be8:	f1c3 0420 	rsb	r4, r3, #32
 8008bec:	fa21 f404 	lsr.w	r4, r1, r4
 8008bf0:	1e5d      	subs	r5, r3, #1
 8008bf2:	4099      	lsls	r1, r3
 8008bf4:	4322      	orrs	r2, r4
 8008bf6:	1b43      	subs	r3, r0, r5
 8008bf8:	e78b      	b.n	8008b12 <__ieee754_sqrt+0x66>
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	e7f0      	b.n	8008be0 <__ieee754_sqrt+0x134>
 8008bfe:	0052      	lsls	r2, r2, #1
 8008c00:	3301      	adds	r3, #1
 8008c02:	e7ef      	b.n	8008be4 <__ieee754_sqrt+0x138>
 8008c04:	46a0      	mov	r8, r4
 8008c06:	e7bf      	b.n	8008b88 <__ieee754_sqrt+0xdc>
 8008c08:	7ff00000 	.word	0x7ff00000

08008c0c <__ieee754_sqrtf>:
 8008c0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008c10:	4770      	bx	lr

08008c12 <matherr>:
 8008c12:	2000      	movs	r0, #0
 8008c14:	4770      	bx	lr
	...

08008c18 <_init>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr

08008c24 <_fini>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr
